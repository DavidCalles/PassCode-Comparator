
PassCode_FSMV0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007988  08007988  00017988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd8  08007dd8  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08007dd8  08007dd8  00017dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007de0  08007de0  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007de0  08007de0  00017de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08007de8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000138  08007f20  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08007f20  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148b8  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a27  00000000  00000000  00034a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00037448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00038550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f5d  00000000  00000000  00039550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012788  00000000  00000000  0005c4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf159  00000000  00000000  0006ec35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013dd8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  0013dde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800796c 	.word	0x0800796c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	0800796c 	.word	0x0800796c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b96e 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468c      	mov	ip, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8083 	bne.w	8000d02 <__udivmoddi4+0x116>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4617      	mov	r7, r2
 8000c00:	d947      	bls.n	8000c92 <__udivmoddi4+0xa6>
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	b142      	cbz	r2, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	f1c2 0020 	rsb	r0, r2, #32
 8000c0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c10:	4091      	lsls	r1, r2
 8000c12:	4097      	lsls	r7, r2
 8000c14:	ea40 0c01 	orr.w	ip, r0, r1
 8000c18:	4094      	lsls	r4, r2
 8000c1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1e:	0c23      	lsrs	r3, r4, #16
 8000c20:	fbbc f6f8 	udiv	r6, ip, r8
 8000c24:	fa1f fe87 	uxth.w	lr, r7
 8000c28:	fb08 c116 	mls	r1, r8, r6, ip
 8000c2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c30:	fb06 f10e 	mul.w	r1, r6, lr
 8000c34:	4299      	cmp	r1, r3
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x60>
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 8119 	bcs.w	8000e74 <__udivmoddi4+0x288>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 8116 	bls.w	8000e74 <__udivmoddi4+0x288>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	443b      	add	r3, r7
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c60:	45a6      	cmp	lr, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x8c>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6a:	f080 8105 	bcs.w	8000e78 <__udivmoddi4+0x28c>
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	f240 8102 	bls.w	8000e78 <__udivmoddi4+0x28c>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7c:	eba4 040e 	sub.w	r4, r4, lr
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa0>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	b902      	cbnz	r2, 8000c96 <__udivmoddi4+0xaa>
 8000c94:	deff      	udf	#255	; 0xff
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d150      	bne.n	8000d40 <__udivmoddi4+0x154>
 8000c9e:	1bcb      	subs	r3, r1, r7
 8000ca0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	2601      	movs	r6, #1
 8000caa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cae:	0c21      	lsrs	r1, r4, #16
 8000cb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0xe4>
 8000cc0:	1879      	adds	r1, r7, r1
 8000cc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0xe2>
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	f200 80e9 	bhi.w	8000ea0 <__udivmoddi4+0x2b4>
 8000cce:	4684      	mov	ip, r0
 8000cd0:	1ac9      	subs	r1, r1, r3
 8000cd2:	b2a3      	uxth	r3, r4
 8000cd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ce0:	fb08 f800 	mul.w	r8, r8, r0
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x10c>
 8000ce8:	193c      	adds	r4, r7, r4
 8000cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x10a>
 8000cf0:	45a0      	cmp	r8, r4
 8000cf2:	f200 80d9 	bhi.w	8000ea8 <__udivmoddi4+0x2bc>
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	eba4 0408 	sub.w	r4, r4, r8
 8000cfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d00:	e7bf      	b.n	8000c82 <__udivmoddi4+0x96>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x12e>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80b1 	beq.w	8000e6e <__udivmoddi4+0x282>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x1cc>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0x140>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80b8 	bhi.w	8000e9c <__udivmoddi4+0x2b0>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	468c      	mov	ip, r1
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0a8      	beq.n	8000c8c <__udivmoddi4+0xa0>
 8000d3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3e:	e7a5      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000d40:	f1c2 0320 	rsb	r3, r2, #32
 8000d44:	fa20 f603 	lsr.w	r6, r0, r3
 8000d48:	4097      	lsls	r7, r2
 8000d4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d52:	40d9      	lsrs	r1, r3
 8000d54:	4330      	orrs	r0, r6
 8000d56:	0c03      	lsrs	r3, r0, #16
 8000d58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f108 	mul.w	r1, r6, r8
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x19c>
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d7a:	f080 808d 	bcs.w	8000e98 <__udivmoddi4+0x2ac>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 808a 	bls.w	8000e98 <__udivmoddi4+0x2ac>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	443b      	add	r3, r7
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b281      	uxth	r1, r0
 8000d8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb00 f308 	mul.w	r3, r0, r8
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x1c4>
 8000da0:	1879      	adds	r1, r7, r1
 8000da2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da6:	d273      	bcs.n	8000e90 <__udivmoddi4+0x2a4>
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d971      	bls.n	8000e90 <__udivmoddi4+0x2a4>
 8000dac:	3802      	subs	r0, #2
 8000dae:	4439      	add	r1, r7
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db6:	e778      	b.n	8000caa <__udivmoddi4+0xbe>
 8000db8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc4:	431c      	orrs	r4, r3
 8000dc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd6:	431f      	orrs	r7, r3
 8000dd8:	0c3b      	lsrs	r3, r7, #16
 8000dda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dde:	fa1f f884 	uxth.w	r8, r4
 8000de2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dea:	fb09 fa08 	mul.w	sl, r9, r8
 8000dee:	458a      	cmp	sl, r1
 8000df0:	fa02 f206 	lsl.w	r2, r2, r6
 8000df4:	fa00 f306 	lsl.w	r3, r0, r6
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x220>
 8000dfa:	1861      	adds	r1, r4, r1
 8000dfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e00:	d248      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e02:	458a      	cmp	sl, r1
 8000e04:	d946      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e06:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0a:	4421      	add	r1, r4
 8000e0c:	eba1 010a 	sub.w	r1, r1, sl
 8000e10:	b2bf      	uxth	r7, r7
 8000e12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1e:	fb00 f808 	mul.w	r8, r0, r8
 8000e22:	45b8      	cmp	r8, r7
 8000e24:	d907      	bls.n	8000e36 <__udivmoddi4+0x24a>
 8000e26:	19e7      	adds	r7, r4, r7
 8000e28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e2c:	d22e      	bcs.n	8000e8c <__udivmoddi4+0x2a0>
 8000e2e:	45b8      	cmp	r8, r7
 8000e30:	d92c      	bls.n	8000e8c <__udivmoddi4+0x2a0>
 8000e32:	3802      	subs	r0, #2
 8000e34:	4427      	add	r7, r4
 8000e36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3a:	eba7 0708 	sub.w	r7, r7, r8
 8000e3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e42:	454f      	cmp	r7, r9
 8000e44:	46c6      	mov	lr, r8
 8000e46:	4649      	mov	r1, r9
 8000e48:	d31a      	bcc.n	8000e80 <__udivmoddi4+0x294>
 8000e4a:	d017      	beq.n	8000e7c <__udivmoddi4+0x290>
 8000e4c:	b15d      	cbz	r5, 8000e66 <__udivmoddi4+0x27a>
 8000e4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e52:	eb67 0701 	sbc.w	r7, r7, r1
 8000e56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e5a:	40f2      	lsrs	r2, r6
 8000e5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e60:	40f7      	lsrs	r7, r6
 8000e62:	e9c5 2700 	strd	r2, r7, [r5]
 8000e66:	2600      	movs	r6, #0
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e70b      	b.n	8000c8c <__udivmoddi4+0xa0>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e9      	b.n	8000c4c <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fd      	b.n	8000c78 <__udivmoddi4+0x8c>
 8000e7c:	4543      	cmp	r3, r8
 8000e7e:	d2e5      	bcs.n	8000e4c <__udivmoddi4+0x260>
 8000e80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e84:	eb69 0104 	sbc.w	r1, r9, r4
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7df      	b.n	8000e4c <__udivmoddi4+0x260>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	e7d2      	b.n	8000e36 <__udivmoddi4+0x24a>
 8000e90:	4660      	mov	r0, ip
 8000e92:	e78d      	b.n	8000db0 <__udivmoddi4+0x1c4>
 8000e94:	4681      	mov	r9, r0
 8000e96:	e7b9      	b.n	8000e0c <__udivmoddi4+0x220>
 8000e98:	4666      	mov	r6, ip
 8000e9a:	e775      	b.n	8000d88 <__udivmoddi4+0x19c>
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	e74a      	b.n	8000d36 <__udivmoddi4+0x14a>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	4439      	add	r1, r7
 8000ea6:	e713      	b.n	8000cd0 <__udivmoddi4+0xe4>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	443c      	add	r4, r7
 8000eac:	e724      	b.n	8000cf8 <__udivmoddi4+0x10c>
 8000eae:	bf00      	nop

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000eb4:	b5b0      	push	{r4, r5, r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000ec2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ec6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000eca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ece:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000ed4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ed6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000ee4:	f107 0310 	add.w	r3, r7, #16
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f80e 	bl	8000f0a <Lcd_init>

	return lcd;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	461d      	mov	r5, r3
 8000ef2:	f107 0410 	add.w	r4, r7, #16
 8000ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000efa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000efe:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bdb0      	pop	{r4, r5, r7, pc}

08000f0a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7d9b      	ldrb	r3, [r3, #22]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10c      	bne.n	8000f34 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000f1a:	2133      	movs	r1, #51	; 0x33
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f863 	bl	8000fe8 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000f22:	2132      	movs	r1, #50	; 0x32
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f85f 	bl	8000fe8 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000f2a:	2128      	movs	r1, #40	; 0x28
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f85b 	bl	8000fe8 <lcd_write_command>
 8000f32:	e003      	b.n	8000f3c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000f34:	2138      	movs	r1, #56	; 0x38
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f856 	bl	8000fe8 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f852 	bl	8000fe8 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000f44:	210c      	movs	r1, #12
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f84e 	bl	8000fe8 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000f4c:	2106      	movs	r1, #6
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f84a 	bl	8000fe8 <lcd_write_command>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	e00a      	b.n	8000f82 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f864 	bl	8001044 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	7bfc      	ldrb	r4, [r7, #15]
 8000f84:	6838      	ldr	r0, [r7, #0]
 8000f86:	f7ff f923 	bl	80001d0 <strlen>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	429c      	cmp	r4, r3
 8000f8e:	d3ed      	bcc.n	8000f6c <Lcd_string+0x10>
	}
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
	...

08000f9c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <Lcd_cursor+0x30>)
 8000fb0:	5cd2      	ldrb	r2, [r2, r3]
 8000fb2:	78bb      	ldrb	r3, [r7, #2]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	3b80      	subs	r3, #128	; 0x80
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f812 	bl	8000fe8 <lcd_write_command>
	#endif
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08007b1c 	.word	0x08007b1c

08000fd0 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f804 	bl	8000fe8 <lcd_write_command>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6898      	ldr	r0, [r3, #8]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	899b      	ldrh	r3, [r3, #12]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	f001 ffc4 	bl	8002f8c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7d9b      	ldrb	r3, [r3, #22]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d111      	bne.n	8001030 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2204      	movs	r2, #4
 8001014:	4619      	mov	r1, r3
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f842 	bl	80010a0 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2204      	movs	r2, #4
 8001026:	4619      	mov	r1, r3
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f839 	bl	80010a0 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800102e:	e005      	b.n	800103c <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2208      	movs	r2, #8
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f832 	bl	80010a0 <lcd_write>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	899b      	ldrh	r3, [r3, #12]
 8001058:	2201      	movs	r2, #1
 800105a:	4619      	mov	r1, r3
 800105c:	f001 ff96 	bl	8002f8c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7d9b      	ldrb	r3, [r3, #22]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d111      	bne.n	800108c <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001068:	78fb      	ldrb	r3, [r7, #3]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2204      	movs	r2, #4
 8001070:	4619      	mov	r1, r3
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f814 	bl	80010a0 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2204      	movs	r2, #4
 8001082:	4619      	mov	r1, r3
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 f80b 	bl	80010a0 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800108a:	e005      	b.n	8001098 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 800108c:	78fb      	ldrb	r3, [r7, #3]
 800108e:	2208      	movs	r2, #8
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f804 	bl	80010a0 <lcd_write>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
 80010ac:	4613      	mov	r3, r2
 80010ae:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e019      	b.n	80010ea <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	8819      	ldrh	r1, [r3, #0]
 80010ce:	78fa      	ldrb	r2, [r7, #3]
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
 80010d2:	fa42 f303 	asr.w	r3, r2, r3
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	f001 ff54 	bl	8002f8c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	3301      	adds	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	78bb      	ldrb	r3, [r7, #2]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3e1      	bcc.n	80010b6 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6918      	ldr	r0, [r3, #16]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	8a9b      	ldrh	r3, [r3, #20]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4619      	mov	r1, r3
 80010fe:	f001 ff45 	bl	8002f8c <HAL_GPIO_WritePin>
	DELAY(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 ff76 	bl	8001ff4 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6918      	ldr	r0, [r3, #16]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	8a9b      	ldrh	r3, [r3, #20]
 8001110:	2200      	movs	r2, #0
 8001112:	4619      	mov	r1, r3
 8001114:	f001 ff3a 	bl	8002f8c <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <main>:
/**************************************************************************
-------------------------------- MAIN FUNCTION ----------------------------
***************************************************************************/

int main(void)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b0a4      	sub	sp, #144	; 0x90
 8001124:	af04      	add	r7, sp, #16
	// GPIO Ports for LCD
	Lcd_PortType ports[] = {
 8001126:	4bd0      	ldr	r3, [pc, #832]	; (8001468 <main+0x348>)
 8001128:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800112c:	461d      	mov	r5, r3
 800112e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001132:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		D0_GPIO_Port, D1_GPIO_Port, D2_GPIO_Port, D3_GPIO_Port,
		D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
	 };
	// GPIO Pins for LCD
	Lcd_PinType pins[] = {D0_Pin, D1_Pin, D2_Pin, D3_Pin,
 800113a:	4bcc      	ldr	r3, [pc, #816]	; (800146c <main+0x34c>)
 800113c:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{"0006", "Visitor6"},
			{"0007", "Visitor7"},
			{"0008", "Visitor8"}
	};
	// Initial setup for fsm
	STATE_T state = RECEIVING_PASS;	//Initiate in state 0
 8001146:	2300      	movs	r3, #0
 8001148:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t n = 0;					//Index of input character
 800114c:	2300      	movs	r3, #0
 800114e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	int16_t ch;						//Input character
	uint8_t cPass = 0;				//Index of checked passcode
 8001152:	2300      	movs	r3, #0
 8001154:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	COMPARISON result = NOT_EQUAL;	//Result of comparing 2 strings
 8001158:	2301      	movs	r3, #1
 800115a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	char myPass[MAX_PASS_SIZE];		//Input passcode

	/* MCU Configuration--------------------------------------------------*/
	/* Reset of peripherals, Initializes  Flash interface and  Systick. */
	HAL_Init();
 800115e:	f000 fed4 	bl	8001f0a <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8001162:	f000 fad3 	bl	800170c <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001166:	f000 fc0f 	bl	8001988 <MX_GPIO_Init>
	MX_DMA_Init();
 800116a:	f000 fbef 	bl	800194c <MX_DMA_Init>
	MX_DAC1_Init();
 800116e:	f000 fb3f 	bl	80017f0 <MX_DAC1_Init>
	MX_USART2_UART_Init();
 8001172:	f000 fbbb 	bl	80018ec <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8001176:	f000 fb6d 	bl	8001854 <MX_TIM2_Init>

	// Create handler for the LCD
	Lcd_HandleTypeDef lcd;
	lcd = Lcd_create(ports, pins,
 800117a:	4638      	mov	r0, r7
 800117c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001180:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001184:	2301      	movs	r3, #1
 8001186:	9303      	str	r3, [sp, #12]
 8001188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800119e:	f7ff fe89 	bl	8000eb4 <Lcd_create>
 80011a2:	f107 0418 	add.w	r4, r7, #24
 80011a6:	463d      	mov	r5, r7
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011b0:	e884 0003 	stmia.w	r4, {r0, r1}
				  RS_GPIO_Port, RS_Pin,
				  EN_GPIO_Port, EN_Pin,
				  LCD_8_BIT_MODE);

	// Initial message serial
	printf("Hello User!\r\n");
 80011b4:	48ae      	ldr	r0, [pc, #696]	; (8001470 <main+0x350>)
 80011b6:	f004 f959 	bl	800546c <puts>

	// Initial message LCD
	Lcd_clear(&lcd);
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff06 	bl	8000fd0 <Lcd_clear>
	Lcd_cursor(&lcd, 0,3);
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	2203      	movs	r2, #3
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fee5 	bl	8000f9c <Lcd_cursor>
	Lcd_string(&lcd, "Pass Code");
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	49a7      	ldr	r1, [pc, #668]	; (8001474 <main+0x354>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff febf 	bl	8000f5c <Lcd_string>
	Lcd_cursor(&lcd, 1,0);
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	2200      	movs	r2, #0
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fed8 	bl	8000f9c <Lcd_cursor>
	Lcd_string(&lcd, "by David Calles!");
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	49a1      	ldr	r1, [pc, #644]	; (8001478 <main+0x358>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff feb2 	bl	8000f5c <Lcd_string>

	// Generate sine signal
	SineGenerator (sine_val, SAMPLES, VREF, SCALE);
 80011f8:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8001458 <main+0x338>
 80011fc:	ed9f 0b98 	vldr	d0, [pc, #608]	; 8001460 <main+0x340>
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	489e      	ldr	r0, [pc, #632]	; (800147c <main+0x35c>)
 8001204:	f000 fa14 	bl	8001630 <SineGenerator>


	/* Infinite loop */
	while (1)
	{
		switch(state){
 8001208:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800120c:	2b03      	cmp	r3, #3
 800120e:	f200 81d3 	bhi.w	80015b8 <main+0x498>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <main+0xf8>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001229 	.word	0x08001229
 800121c:	080012b1 	.word	0x080012b1
 8001220:	08001379 	.word	0x08001379
 8001224:	0800143d 	.word	0x0800143d
			// State 0
			case RECEIVING_PASS:{
				// Pass within correct size
				if(n < (MAX_PASS_SIZE+1)){
 8001228:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800122c:	2b04      	cmp	r3, #4
 800122e:	d808      	bhi.n	8001242 <main+0x122>
					ch = getchar();	// Get character
 8001230:	f004 f858 	bl	80052e4 <getchar>
 8001234:	4603      	mov	r3, r0
 8001236:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					state = CHECKING_PASS;
 800123a:	2301      	movs	r3, #1
 800123c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					ch = getchar();
					printf("Hello User! \r\n");
					n = 0;
					state = RECEIVING_PASS;
				}//else
				break;
 8001240:	e1bd      	b.n	80015be <main+0x49e>
					Lcd_clear(&lcd);
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fec2 	bl	8000fd0 <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 800124c:	f107 0318 	add.w	r3, r7, #24
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fea1 	bl	8000f9c <Lcd_cursor>
					Lcd_string(&lcd, "Input too long!");
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4988      	ldr	r1, [pc, #544]	; (8001480 <main+0x360>)
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fe7b 	bl	8000f5c <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	2200      	movs	r2, #0
 800126c:	2101      	movs	r1, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe94 	bl	8000f9c <Lcd_cursor>
					Lcd_string(&lcd, "Try again.");
 8001274:	f107 0318 	add.w	r3, r7, #24
 8001278:	4982      	ldr	r1, [pc, #520]	; (8001484 <main+0x364>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe6e 	bl	8000f5c <Lcd_string>
					printf("Input is too long, Try again!: %c \r\n",ch);
 8001280:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8001284:	4619      	mov	r1, r3
 8001286:	4880      	ldr	r0, [pc, #512]	; (8001488 <main+0x368>)
 8001288:	f004 f86a 	bl	8005360 <iprintf>
					printf("Press ENTER key to reset. \r\n");
 800128c:	487f      	ldr	r0, [pc, #508]	; (800148c <main+0x36c>)
 800128e:	f004 f8ed 	bl	800546c <puts>
					ch = getchar();
 8001292:	f004 f827 	bl	80052e4 <getchar>
 8001296:	4603      	mov	r3, r0
 8001298:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					printf("Hello User! \r\n");
 800129c:	487c      	ldr	r0, [pc, #496]	; (8001490 <main+0x370>)
 800129e:	f004 f8e5 	bl	800546c <puts>
					n = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					state = RECEIVING_PASS;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80012ae:	e186      	b.n	80015be <main+0x49e>
			}// State 0

			// State 1
			case CHECKING_PASS:{
				// Normal character received
				if( ch != MY_EOF ){
 80012b0:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80012b4:	2b0d      	cmp	r3, #13
 80012b6:	d012      	beq.n	80012de <main+0x1be>
					myPass[n] = (uint8_t)ch;
 80012b8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80012bc:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80012c6:	440b      	add	r3, r1
 80012c8:	f803 2c50 	strb.w	r2, [r3, #-80]
					++n;
 80012cc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80012d0:	3301      	adds	r3, #1
 80012d2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					state = RECEIVING_PASS;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					ch = getchar();
					printf("\r\n Hello User! \r\n");
					n = 0;
					state = RECEIVING_PASS;
				}//else
				break;
 80012dc:	e16f      	b.n	80015be <main+0x49e>
				else if( (ch == MY_EOF) && (n == (MAX_PASS_SIZE)) ){
 80012de:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80012e2:	2b0d      	cmp	r3, #13
 80012e4:	d114      	bne.n	8001310 <main+0x1f0>
 80012e6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d110      	bne.n	8001310 <main+0x1f0>
					cPass = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					printf("Input is: %.4s \r\n", myPass);
 80012f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f8:	4619      	mov	r1, r3
 80012fa:	4866      	ldr	r0, [pc, #408]	; (8001494 <main+0x374>)
 80012fc:	f004 f830 	bl	8005360 <iprintf>
					printf("Elements: %d \r\n", sizeof(myPass));
 8001300:	2104      	movs	r1, #4
 8001302:	4865      	ldr	r0, [pc, #404]	; (8001498 <main+0x378>)
 8001304:	f004 f82c 	bl	8005360 <iprintf>
					state = COMPARING_PASS;
 8001308:	2302      	movs	r3, #2
 800130a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 800130e:	e156      	b.n	80015be <main+0x49e>
					Lcd_clear(&lcd);
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe5b 	bl	8000fd0 <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe3a 	bl	8000f9c <Lcd_cursor>
					Lcd_string(&lcd, "Input too short!");
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	495b      	ldr	r1, [pc, #364]	; (800149c <main+0x37c>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe14 	bl	8000f5c <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 8001334:	f107 0318 	add.w	r3, r7, #24
 8001338:	2200      	movs	r2, #0
 800133a:	2101      	movs	r1, #1
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe2d 	bl	8000f9c <Lcd_cursor>
					Lcd_string(&lcd, "Try again.");
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	494f      	ldr	r1, [pc, #316]	; (8001484 <main+0x364>)
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe07 	bl	8000f5c <Lcd_string>
					printf("Input is too short, Try again! \r\n");
 800134e:	4854      	ldr	r0, [pc, #336]	; (80014a0 <main+0x380>)
 8001350:	f004 f88c 	bl	800546c <puts>
					printf("Press ENTER key to reset. \r\n");
 8001354:	484d      	ldr	r0, [pc, #308]	; (800148c <main+0x36c>)
 8001356:	f004 f889 	bl	800546c <puts>
					ch = getchar();
 800135a:	f003 ffc3 	bl	80052e4 <getchar>
 800135e:	4603      	mov	r3, r0
 8001360:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					printf("\r\n Hello User! \r\n");
 8001364:	484f      	ldr	r0, [pc, #316]	; (80014a4 <main+0x384>)
 8001366:	f004 f881 	bl	800546c <puts>
					n = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					state = RECEIVING_PASS;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8001376:	e122      	b.n	80015be <main+0x49e>
			}// State 1

			// State 2
			case COMPARING_PASS:{
				// Not all passwords have been checked
				if( cPass < NUM_PASSCODES ){
 8001378:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800137c:	2b09      	cmp	r3, #9
 800137e:	d814      	bhi.n	80013aa <main+0x28a>
					// Compare strings
					result = StringCompare(myPass, db[cPass].pass, MAX_PASS_SIZE);
 8001380:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4a46      	ldr	r2, [pc, #280]	; (80014a8 <main+0x388>)
 800138e:	1899      	adds	r1, r3, r2
 8001390:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001394:	2204      	movs	r2, #4
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f922 	bl	80015e0 <StringCompare>
 800139c:	4603      	mov	r3, r0
 800139e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
					state = GIVING_ACCESS;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

					cPass = 0;
					n = 0;
					state = RECEIVING_PASS;
				}//else
				break;
 80013a8:	e109      	b.n	80015be <main+0x49e>
					Lcd_clear(&lcd);
 80013aa:	f107 0318 	add.w	r3, r7, #24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fe0e 	bl	8000fd0 <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fded 	bl	8000f9c <Lcd_cursor>
					Lcd_string(&lcd, "Incorrect pass!");
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4939      	ldr	r1, [pc, #228]	; (80014ac <main+0x38c>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fdc7 	bl	8000f5c <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 80013ce:	f107 0318 	add.w	r3, r7, #24
 80013d2:	2200      	movs	r2, #0
 80013d4:	2101      	movs	r1, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fde0 	bl	8000f9c <Lcd_cursor>
					Lcd_string(&lcd, "Try again.");
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4928      	ldr	r1, [pc, #160]	; (8001484 <main+0x364>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fdba 	bl	8000f5c <Lcd_string>
					printf("Pass-code Incorrect! \r\n");
 80013e8:	4831      	ldr	r0, [pc, #196]	; (80014b0 <main+0x390>)
 80013ea:	f004 f83f 	bl	800546c <puts>
					HAL_TIM_Base_Start(&htim2);
 80013ee:	4831      	ldr	r0, [pc, #196]	; (80014b4 <main+0x394>)
 80013f0:	f002 ffac 	bl	800434c <HAL_TIM_Base_Start>
					HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, SAMPLES, DAC_ALIGN_12B_R);
 80013f4:	2300      	movs	r3, #0
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2340      	movs	r3, #64	; 0x40
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <main+0x35c>)
 80013fc:	2100      	movs	r1, #0
 80013fe:	482e      	ldr	r0, [pc, #184]	; (80014b8 <main+0x398>)
 8001400:	f000 ff50 	bl	80022a4 <HAL_DAC_Start_DMA>
					printf("Press ENTER key to reset. \r\n");
 8001404:	4821      	ldr	r0, [pc, #132]	; (800148c <main+0x36c>)
 8001406:	f004 f831 	bl	800546c <puts>
					ch = getchar();
 800140a:	f003 ff6b 	bl	80052e4 <getchar>
 800140e:	4603      	mov	r3, r0
 8001410:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					printf("\r\n Hello User! \r\n");
 8001414:	4823      	ldr	r0, [pc, #140]	; (80014a4 <main+0x384>)
 8001416:	f004 f829 	bl	800546c <puts>
					HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800141a:	2100      	movs	r1, #0
 800141c:	4826      	ldr	r0, [pc, #152]	; (80014b8 <main+0x398>)
 800141e:	f001 f80d 	bl	800243c <HAL_DAC_Stop_DMA>
					HAL_TIM_Base_Stop(&htim2);
 8001422:	4824      	ldr	r0, [pc, #144]	; (80014b4 <main+0x394>)
 8001424:	f002 ffde 	bl	80043e4 <HAL_TIM_Base_Stop>
					cPass = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					n = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					state = RECEIVING_PASS;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 800143a:	e0c0      	b.n	80015be <main+0x49e>
			}// State 2

			// State 3
			case GIVING_ACCESS:{
				// Pass-codes are not equal
				if(result == NOT_EQUAL){
 800143c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001440:	2b01      	cmp	r3, #1
 8001442:	d13b      	bne.n	80014bc <main+0x39c>
					++cPass;
 8001444:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001448:	3301      	adds	r3, #1
 800144a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					state = COMPARING_PASS;
 800144e:	2302      	movs	r3, #2
 8001450:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					n = 0;
					cPass = 0;
					result = NOT_EQUAL;
					state = RECEIVING_PASS;
				}//else
				break;
 8001454:	e0b3      	b.n	80015be <main+0x49e>
 8001456:	bf00      	nop
 8001458:	00000000 	.word	0x00000000
 800145c:	3fe00000 	.word	0x3fe00000
 8001460:	00000000 	.word	0x00000000
 8001464:	40040000 	.word	0x40040000
 8001468:	08007aec 	.word	0x08007aec
 800146c:	08007b0c 	.word	0x08007b0c
 8001470:	08007988 	.word	0x08007988
 8001474:	08007998 	.word	0x08007998
 8001478:	080079a4 	.word	0x080079a4
 800147c:	20000174 	.word	0x20000174
 8001480:	080079b8 	.word	0x080079b8
 8001484:	080079c8 	.word	0x080079c8
 8001488:	080079d4 	.word	0x080079d4
 800148c:	080079fc 	.word	0x080079fc
 8001490:	08007a18 	.word	0x08007a18
 8001494:	08007a28 	.word	0x08007a28
 8001498:	08007a3c 	.word	0x08007a3c
 800149c:	08007a4c 	.word	0x08007a4c
 80014a0:	08007a60 	.word	0x08007a60
 80014a4:	08007a84 	.word	0x08007a84
 80014a8:	20000000 	.word	0x20000000
 80014ac:	08007a98 	.word	0x08007a98
 80014b0:	08007aa8 	.word	0x08007aa8
 80014b4:	200002bc 	.word	0x200002bc
 80014b8:	20000160 	.word	0x20000160
					Lcd_clear(&lcd);
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fd85 	bl	8000fd0 <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fd64 	bl	8000f9c <Lcd_cursor>
					sprintf(messg, "Input: %.4s", myPass);
 80014d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80014d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014dc:	4938      	ldr	r1, [pc, #224]	; (80015c0 <main+0x4a0>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f003 ffcc 	bl	800547c <siprintf>
					Lcd_string(&lcd, messg);
 80014e4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80014e8:	f107 0318 	add.w	r3, r7, #24
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd34 	bl	8000f5c <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	2200      	movs	r2, #0
 80014fa:	2101      	movs	r1, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fd4d 	bl	8000f9c <Lcd_cursor>
					sprintf(messg, "%s", db[cPass].name);
 8001502:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <main+0x4a4>)
 8001510:	4413      	add	r3, r2
 8001512:	1d1a      	adds	r2, r3, #4
 8001514:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001518:	492b      	ldr	r1, [pc, #172]	; (80015c8 <main+0x4a8>)
 800151a:	4618      	mov	r0, r3
 800151c:	f003 ffae 	bl	800547c <siprintf>
					Lcd_string(&lcd, messg);
 8001520:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001524:	f107 0318 	add.w	r3, r7, #24
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fd16 	bl	8000f5c <Lcd_string>
					printf("Pass Accepted, Hello %s! \r\n", db[cPass].name);
 8001530:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <main+0x4a4>)
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	4619      	mov	r1, r3
 8001544:	4821      	ldr	r0, [pc, #132]	; (80015cc <main+0x4ac>)
 8001546:	f003 ff0b 	bl	8005360 <iprintf>
					printf("Press ENTER key to reset. \r\n");
 800154a:	4821      	ldr	r0, [pc, #132]	; (80015d0 <main+0x4b0>)
 800154c:	f003 ff8e 	bl	800546c <puts>
					ch = getchar();
 8001550:	f003 fec8 	bl	80052e4 <getchar>
 8001554:	4603      	mov	r3, r0
 8001556:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					printf("Hello User! \r\n");
 800155a:	481e      	ldr	r0, [pc, #120]	; (80015d4 <main+0x4b4>)
 800155c:	f003 ff86 	bl	800546c <puts>
					Lcd_clear(&lcd);
 8001560:	f107 0318 	add.w	r3, r7, #24
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd33 	bl	8000fd0 <Lcd_clear>
					Lcd_cursor(&lcd, 0,3);
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	2203      	movs	r2, #3
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fd12 	bl	8000f9c <Lcd_cursor>
					Lcd_string(&lcd, "Pass Code");
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <main+0x4b8>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fcec 	bl	8000f5c <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	2200      	movs	r2, #0
 800158a:	2101      	movs	r1, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fd05 	bl	8000f9c <Lcd_cursor>
					Lcd_string(&lcd, "by David Calles!");
 8001592:	f107 0318 	add.w	r3, r7, #24
 8001596:	4911      	ldr	r1, [pc, #68]	; (80015dc <main+0x4bc>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fcdf 	bl	8000f5c <Lcd_string>
					n = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					cPass = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					result = NOT_EQUAL;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
					state = RECEIVING_PASS;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80015b6:	e002      	b.n	80015be <main+0x49e>
			}// State 3

			// Default: Go to state 0
			default:
				state = RECEIVING_PASS;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		switch(state){
 80015be:	e623      	b.n	8001208 <main+0xe8>
 80015c0:	08007ac0 	.word	0x08007ac0
 80015c4:	20000000 	.word	0x20000000
 80015c8:	08007acc 	.word	0x08007acc
 80015cc:	08007ad0 	.word	0x08007ad0
 80015d0:	080079fc 	.word	0x080079fc
 80015d4:	08007a18 	.word	0x08007a18
 80015d8:	08007998 	.word	0x08007998
 80015dc:	080079a4 	.word	0x080079a4

080015e0 <StringCompare>:
*							Array to compare 1.
*					uint8_t n: number of characters in array
*
*	Returns:		COMPARISON c: EQUAL or NOT_EQUAL
---------------------------------------------------------------------------*/
COMPARISON StringCompare(char *a, char *b, uint8_t n){
 80015e0:	b480      	push	{r7}
 80015e2:	b087      	sub	sp, #28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	4613      	mov	r3, r2
 80015ec:	71fb      	strb	r3, [r7, #7]
	COMPARISON c = EQUAL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<n; i++){
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	e00e      	b.n	8001616 <StringCompare+0x36>
		if(a[i] != b[i]){
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	440b      	add	r3, r1
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <StringCompare+0x30>
			c = NOT_EQUAL;
 800160c:	2301      	movs	r3, #1
 800160e:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<n; i++){
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	3301      	adds	r3, #1
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	429a      	cmp	r2, r3
 800161c:	dbec      	blt.n	80015f8 <StringCompare+0x18>
		}//if
	}//for
	return c;
 800161e:	7dfb      	ldrb	r3, [r7, #23]
}//StringCompare
 8001620:	4618      	mov	r0, r3
 8001622:	371c      	adds	r7, #28
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	0000      	movs	r0, r0
	...

08001630 <SineGenerator>:
*					double scale:
*							Scaling factor for the sine
*
*	Returns:		(void)
---------------------------------------------------------------------------*/
void SineGenerator (uint32_t *sSine, uint16_t samples, double vref, double scale){
 8001630:	b5b0      	push	{r4, r5, r7, lr}
 8001632:	b088      	sub	sp, #32
 8001634:	af00      	add	r7, sp, #0
 8001636:	6178      	str	r0, [r7, #20]
 8001638:	460b      	mov	r3, r1
 800163a:	ed87 0b02 	vstr	d0, [r7, #8]
 800163e:	ed87 1b00 	vstr	d1, [r7]
 8001642:	827b      	strh	r3, [r7, #18]
	for (int i=0; i<samples; i++){
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
 8001648:	e051      	b.n	80016ee <SineGenerator+0xbe>
		sSine[i] = (uint32_t)((sin(i*2*PI/samples) + (vref/2))*
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff68 	bl	8000524 <__aeabi_i2d>
 8001654:	a32b      	add	r3, pc, #172	; (adr r3, 8001704 <SineGenerator+0xd4>)
 8001656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165a:	f7fe ffcd 	bl	80005f8 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4614      	mov	r4, r2
 8001664:	461d      	mov	r5, r3
 8001666:	8a7b      	ldrh	r3, [r7, #18]
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff5b 	bl	8000524 <__aeabi_i2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4620      	mov	r0, r4
 8001674:	4629      	mov	r1, r5
 8001676:	f7ff f8e9 	bl	800084c <__aeabi_ddiv>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	ec43 2b17 	vmov	d7, r2, r3
 8001682:	eeb0 0a47 	vmov.f32	s0, s14
 8001686:	eef0 0a67 	vmov.f32	s1, s15
 800168a:	f005 f939 	bl	8006900 <sin>
 800168e:	ec55 4b10 	vmov	r4, r5, d0
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800169e:	f7ff f8d5 	bl	800084c <__aeabi_ddiv>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4620      	mov	r0, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	f7fe fdef 	bl	800028c <__adddf3>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <SineGenerator+0xd0>)
 80016bc:	f7fe ff9c 	bl	80005f8 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
				(double)(4096/2)*(double)scale);
 80016c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016cc:	f7fe ff94 	bl	80005f8 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
		sSine[i] = (uint32_t)((sin(i*2*PI/samples) + (vref/2))*
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	18d4      	adds	r4, r2, r3
 80016e0:	f7ff fa4c 	bl	8000b7c <__aeabi_d2uiz>
 80016e4:	4603      	mov	r3, r0
 80016e6:	6023      	str	r3, [r4, #0]
	for (int i=0; i<samples; i++){
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	3301      	adds	r3, #1
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	8a7b      	ldrh	r3, [r7, #18]
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dba9      	blt.n	800164a <SineGenerator+0x1a>
	}//for
}//SineGenerator
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	40a00000 	.word	0x40a00000
 8001704:	4d12d84a 	.word	0x4d12d84a
 8001708:	400921fb 	.word	0x400921fb

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0ac      	sub	sp, #176	; 0xb0
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001716:	2244      	movs	r2, #68	; 0x44
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fe18 	bl	8005350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2254      	movs	r2, #84	; 0x54
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f003 fe0a 	bl	8005350 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800173c:	2310      	movs	r3, #16
 800173e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001740:	2301      	movs	r3, #1
 8001742:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800174c:	2360      	movs	r3, #96	; 0x60
 800174e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001758:	2301      	movs	r3, #1
 800175a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800175e:	2301      	movs	r3, #1
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001764:	2310      	movs	r3, #16
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800176a:	2307      	movs	r3, #7
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001780:	4618      	mov	r0, r3
 8001782:	f001 fc7f 	bl	8003084 <HAL_RCC_OscConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800178c:	f000 f97a 	bl	8001a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001790:	230f      	movs	r3, #15
 8001792:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001794:	2303      	movs	r3, #3
 8001796:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017a8:	2101      	movs	r1, #1
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 f88a 	bl	80038c4 <HAL_RCC_ClockConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80017b6:	f000 f965 	bl	8001a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fa83 	bl	8003cd0 <HAL_RCCEx_PeriphCLKConfig>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80017d0:	f000 f958 	bl	8001a84 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017d8:	f001 fbfe 	bl	8002fd8 <HAL_PWREx_ControlVoltageScaling>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80017e2:	f000 f94f 	bl	8001a84 <Error_Handler>
  }
}
 80017e6:	bf00      	nop
 80017e8:	37b0      	adds	r7, #176	; 0xb0
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2224      	movs	r2, #36	; 0x24
 80017fa:	2100      	movs	r1, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fda7 	bl	8005350 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001802:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_DAC1_Init+0x5c>)
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <MX_DAC1_Init+0x60>)
 8001806:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <MX_DAC1_Init+0x5c>)
 800180a:	f000 fd28 	bl	800225e <HAL_DAC_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001814:	f000 f936 	bl	8001a84 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800181c:	2324      	movs	r3, #36	; 0x24
 800181e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2200      	movs	r2, #0
 8001830:	4619      	mov	r1, r3
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <MX_DAC1_Init+0x5c>)
 8001834:	f000 fe65 	bl	8002502 <HAL_DAC_ConfigChannel>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800183e:	f000 f921 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000160 	.word	0x20000160
 8001850:	40007400 	.word	0x40007400

08001854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_TIM2_Init+0x94>)
 8001874:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001878:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_TIM2_Init+0x94>)
 800187c:	2201      	movs	r2, #1
 800187e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <MX_TIM2_Init+0x94>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 125;
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_TIM2_Init+0x94>)
 8001888:	227d      	movs	r2, #125	; 0x7d
 800188a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_TIM2_Init+0x94>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_TIM2_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001898:	4813      	ldr	r0, [pc, #76]	; (80018e8 <MX_TIM2_Init+0x94>)
 800189a:	f002 fcff 	bl	800429c <HAL_TIM_Base_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018a4:	f000 f8ee 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	4619      	mov	r1, r3
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <MX_TIM2_Init+0x94>)
 80018b6:	f002 fdbc 	bl	8004432 <HAL_TIM_ConfigClockSource>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018c0:	f000 f8e0 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018c4:	2320      	movs	r3, #32
 80018c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_TIM2_Init+0x94>)
 80018d2:	f002 ff73 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018dc:	f000 f8d2 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	200002bc 	.word	0x200002bc

080018ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f0:	4b14      	ldr	r3, [pc, #80]	; (8001944 <MX_USART2_UART_Init+0x58>)
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <MX_USART2_UART_Init+0x5c>)
 80018f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018f6:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_USART2_UART_Init+0x58>)
 80018f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <MX_USART2_UART_Init+0x58>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_USART2_UART_Init+0x58>)
 8001906:	2200      	movs	r2, #0
 8001908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <MX_USART2_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <MX_USART2_UART_Init+0x58>)
 8001912:	220c      	movs	r2, #12
 8001914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <MX_USART2_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <MX_USART2_UART_Init+0x58>)
 800191e:	2200      	movs	r2, #0
 8001920:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <MX_USART2_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_USART2_UART_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <MX_USART2_UART_Init+0x58>)
 8001930:	f002 ffaa 	bl	8004888 <HAL_UART_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800193a:	f000 f8a3 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000308 	.word	0x20000308
 8001948:	40004400 	.word	0x40004400

0800194c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <MX_DMA_Init+0x38>)
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <MX_DMA_Init+0x38>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6493      	str	r3, [r2, #72]	; 0x48
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <MX_DMA_Init+0x38>)
 8001960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	200d      	movs	r0, #13
 8001970:	f000 fc3f 	bl	80021f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001974:	200d      	movs	r0, #13
 8001976:	f000 fc58 	bl	800222a <HAL_NVIC_EnableIRQ>

}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000

08001988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a36      	ldr	r2, [pc, #216]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a30      	ldr	r2, [pc, #192]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 80019e6:	2200      	movs	r2, #0
 80019e8:	21fb      	movs	r1, #251	; 0xfb
 80019ea:	4825      	ldr	r0, [pc, #148]	; (8001a80 <MX_GPIO_Init+0xf8>)
 80019ec:	f001 face 	bl	8002f8c <HAL_GPIO_WritePin>
						  |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80019f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fa:	f001 fac7 	bl	8002f8c <HAL_GPIO_WritePin>
						  |GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure LED Output level*/
	HAL_GPIO_WritePin(LED_GPIO, LED_PIN, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a08:	f001 fac0 	bl	8002f8c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB1 LD3_Pin PB4
						   PB5 PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8001a0c:	23fb      	movs	r3, #251	; 0xfb
 8001a0e:	60fb      	str	r3, [r7, #12]
						  |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	if(LED_GPIO == GPIOB) // Add Led pin if part of GPIOB
	  GPIO_InitStruct.Pin |= LED_PIN;

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	4619      	mov	r1, r3
 8001a22:	4817      	ldr	r0, [pc, #92]	; (8001a80 <MX_GPIO_Init+0xf8>)
 8001a24:	f001 f948 	bl	8002cb8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 PA10 PA11
						   PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a28:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a2c:	60fb      	str	r3, [r7, #12]
						  |GPIO_PIN_12;
	if(LED_GPIO == GPIOA)// Add Led pin if part of GPIOA
	  GPIO_InitStruct.Pin |= LED_PIN;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a34:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f001 f934 	bl	8002cb8 <HAL_GPIO_Init>

	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a54:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a62:	2303      	movs	r3, #3
 8001a64:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f001 f922 	bl	8002cb8 <HAL_GPIO_Init>
}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	48000400 	.word	0x48000400

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <Error_Handler+0x8>
	...

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_MspInit+0x44>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x44>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x44>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x44>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <HAL_DAC_MspInit+0xcc>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d14f      	bne.n	8001b9a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_DAC_MspInit+0xd0>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <HAL_DAC_MspInit+0xd0>)
 8001b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_DAC_MspInit+0xd0>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <HAL_DAC_MspInit+0xd0>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a24      	ldr	r2, [pc, #144]	; (8001ba8 <HAL_DAC_MspInit+0xd0>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <HAL_DAC_MspInit+0xd0>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b40:	f001 f8ba 	bl	8002cb8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b46:	4a1a      	ldr	r2, [pc, #104]	; (8001bb0 <HAL_DAC_MspInit+0xd8>)
 8001b48:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b4c:	2206      	movs	r2, #6
 8001b4e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b52:	2210      	movs	r2, #16
 8001b54:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b5e:	2280      	movs	r2, #128	; 0x80
 8001b60:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b68:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b70:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b74:	2220      	movs	r2, #32
 8001b76:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001b7e:	480b      	ldr	r0, [pc, #44]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b80:	f000 fe64 	bl	800284c <HAL_DMA_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001b8a:	f7ff ff7b 	bl	8001a84 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	4a05      	ldr	r2, [pc, #20]	; (8001bac <HAL_DAC_MspInit+0xd4>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40007400 	.word	0x40007400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	20000274 	.word	0x20000274
 8001bb0:	40020030 	.word	0x40020030

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d10b      	bne.n	8001bde <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_TIM_Base_MspInit+0x38>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	4a08      	ldr	r2, [pc, #32]	; (8001bec <HAL_TIM_Base_MspInit+0x38>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_TIM_Base_MspInit+0x38>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <HAL_UART_MspInit+0xa0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d13a      	bne.n	8001c88 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_UART_MspInit+0xa4>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <HAL_UART_MspInit+0xa4>)
 8001c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <HAL_UART_MspInit+0xa4>)
 8001c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_UART_MspInit+0xa4>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_UART_MspInit+0xa4>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_UART_MspInit+0xa4>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c42:	2304      	movs	r3, #4
 8001c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c52:	2307      	movs	r3, #7
 8001c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 0314 	add.w	r3, r7, #20
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f001 f82a 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c76:	2303      	movs	r3, #3
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c84:	f001 f818 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3728      	adds	r7, #40	; 0x28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40004400 	.word	0x40004400
 8001c94:	40021000 	.word	0x40021000

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <NMI_Handler+0x4>

08001c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca2:	e7fe      	b.n	8001ca2 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <MemManage_Handler+0x4>

08001caa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <BusFault_Handler+0x4>

08001cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <UsageFault_Handler+0x4>

08001cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce4:	f000 f966 	bl	8001fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <DMA1_Channel3_IRQHandler+0x10>)
 8001cf2:	f000 ff01 	bl	8002af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000274 	.word	0x20000274

08001d00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	4807      	ldr	r0, [pc, #28]	; (8001d38 <_read+0x38>)
 8001d1c:	f002 fe96 	bl	8004a4c <HAL_UART_Receive>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	607b      	str	r3, [r7, #4]

	return len;
 8001d2c:	687b      	ldr	r3, [r7, #4]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000308 	.word	0x20000308

08001d3c <_write>:

int _write(int file, char *ptr, int len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	4809      	ldr	r0, [pc, #36]	; (8001d7c <_write+0x40>)
 8001d58:	f002 fde4 	bl	8004924 <HAL_UART_Transmit>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d002      	beq.n	8001d6c <_write+0x30>
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d101      	bne.n	8001d70 <_write+0x34>
	{
		Error_Handler();
 8001d6c:	f7ff fe8a 	bl	8001a84 <Error_Handler>
	}

	return len;
 8001d70:	687b      	ldr	r3, [r7, #4]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000308 	.word	0x20000308

08001d80 <_close>:



int _close(int file)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	return -1;
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da8:	605a      	str	r2, [r3, #4]
	return 0;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_isatty>:

int _isatty(int file)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	return 1;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
	return 0;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f003 fa5e 	bl	80052d8 <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20010000 	.word	0x20010000
 8001e48:	00000400 	.word	0x00000400
 8001e4c:	20000154 	.word	0x20000154
 8001e50:	200003a0 	.word	0x200003a0

08001e54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <SystemInit+0x5c>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <SystemInit+0x5c>)
 8001e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <SystemInit+0x60>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <SystemInit+0x60>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <SystemInit+0x60>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <SystemInit+0x60>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <SystemInit+0x60>)
 8001e80:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e84:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <SystemInit+0x60>)
 8001e8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e90:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <SystemInit+0x60>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <SystemInit+0x60>)
 8001e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SystemInit+0x60>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	619a      	str	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ebc:	f7ff ffca 	bl	8001e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ec0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ec2:	e003      	b.n	8001ecc <LoopCopyDataInit>

08001ec4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ec6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ec8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001eca:	3104      	adds	r1, #4

08001ecc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ecc:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ed0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ed2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ed4:	d3f6      	bcc.n	8001ec4 <CopyDataInit>
	ldr	r2, =_sbss
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ed8:	e002      	b.n	8001ee0 <LoopFillZerobss>

08001eda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001eda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001edc:	f842 3b04 	str.w	r3, [r2], #4

08001ee0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <LoopForever+0x16>)
	cmp	r2, r3
 8001ee2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ee4:	d3f9      	bcc.n	8001eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f003 fa0f 	bl	8005308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eea:	f7ff f919 	bl	8001120 <main>

08001eee <LoopForever>:

LoopForever:
    b LoopForever
 8001eee:	e7fe      	b.n	8001eee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001ef4:	08007de8 	.word	0x08007de8
	ldr	r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001efc:	20000138 	.word	0x20000138
	ldr	r2, =_sbss
 8001f00:	20000138 	.word	0x20000138
	ldr	r3, = _ebss
 8001f04:	200003a0 	.word	0x200003a0

08001f08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_IRQHandler>

08001f0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f961 	bl	80021dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f80e 	bl	8001f3c <HAL_InitTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e001      	b.n	8001f30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f2c:	f7ff fdb0 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_InitTick+0x6c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d023      	beq.n	8001f98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f50:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_InitTick+0x70>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_InitTick+0x6c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f96d 	bl	8002246 <HAL_SYSTICK_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10f      	bne.n	8001f92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b0f      	cmp	r3, #15
 8001f76:	d809      	bhi.n	8001f8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f80:	f000 f937 	bl	80021f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <HAL_InitTick+0x74>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e007      	b.n	8001f9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e004      	b.n	8001f9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	e001      	b.n	8001f9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200000d0 	.word	0x200000d0
 8001fac:	200000c8 	.word	0x200000c8
 8001fb0:	200000cc 	.word	0x200000cc

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x20>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200000d0 	.word	0x200000d0
 8001fd8:	2000038c 	.word	0x2000038c

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	2000038c 	.word	0x2000038c

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff ffee 	bl	8001fdc <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <HAL_Delay+0x44>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffde 	bl	8001fdc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200000d0 	.word	0x200000d0

0800203c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002058:	4013      	ands	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800206c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206e:	4a04      	ldr	r2, [pc, #16]	; (8002080 <__NVIC_SetPriorityGrouping+0x44>)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60d3      	str	r3, [r2, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002088:	4b04      	ldr	r3, [pc, #16]	; (800209c <__NVIC_GetPriorityGrouping+0x18>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	f003 0307 	and.w	r3, r3, #7
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	db0b      	blt.n	80020ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	f003 021f 	and.w	r2, r3, #31
 80020b8:	4907      	ldr	r1, [pc, #28]	; (80020d8 <__NVIC_EnableIRQ+0x38>)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2001      	movs	r0, #1
 80020c2:	fa00 f202 	lsl.w	r2, r0, r2
 80020c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	db0a      	blt.n	8002106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	490c      	ldr	r1, [pc, #48]	; (8002128 <__NVIC_SetPriority+0x4c>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	440b      	add	r3, r1
 8002100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002104:	e00a      	b.n	800211c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <__NVIC_SetPriority+0x50>)
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	3b04      	subs	r3, #4
 8002114:	0112      	lsls	r2, r2, #4
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	440b      	add	r3, r1
 800211a:	761a      	strb	r2, [r3, #24]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1c3 0307 	rsb	r3, r3, #7
 800214a:	2b04      	cmp	r3, #4
 800214c:	bf28      	it	cs
 800214e:	2304      	movcs	r3, #4
 8002150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	2b06      	cmp	r3, #6
 8002158:	d902      	bls.n	8002160 <NVIC_EncodePriority+0x30>
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3b03      	subs	r3, #3
 800215e:	e000      	b.n	8002162 <NVIC_EncodePriority+0x32>
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	401a      	ands	r2, r3
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002178:	f04f 31ff 	mov.w	r1, #4294967295
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	43d9      	mvns	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	4313      	orrs	r3, r2
         );
}
 800218a:	4618      	mov	r0, r3
 800218c:	3724      	adds	r7, #36	; 0x24
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a8:	d301      	bcc.n	80021ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00f      	b.n	80021ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <SysTick_Config+0x40>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021b6:	210f      	movs	r1, #15
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f7ff ff8e 	bl	80020dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c0:	4b05      	ldr	r3, [pc, #20]	; (80021d8 <SysTick_Config+0x40>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <SysTick_Config+0x40>)
 80021c8:	2207      	movs	r2, #7
 80021ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	e000e010 	.word	0xe000e010

080021dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff29 	bl	800203c <__NVIC_SetPriorityGrouping>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	60b9      	str	r1, [r7, #8]
 80021fc:	607a      	str	r2, [r7, #4]
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002204:	f7ff ff3e 	bl	8002084 <__NVIC_GetPriorityGrouping>
 8002208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68b9      	ldr	r1, [r7, #8]
 800220e:	6978      	ldr	r0, [r7, #20]
 8002210:	f7ff ff8e 	bl	8002130 <NVIC_EncodePriority>
 8002214:	4602      	mov	r2, r0
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	4611      	mov	r1, r2
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff5d 	bl	80020dc <__NVIC_SetPriority>
}
 8002222:	bf00      	nop
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff31 	bl	80020a0 <__NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffa2 	bl	8002198 <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e014      	b.n	800229a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	791b      	ldrb	r3, [r3, #4]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d105      	bne.n	8002286 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fc29 	bl	8001ad8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	795b      	ldrb	r3, [r3, #5]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_DAC_Start_DMA+0x1e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0ab      	b.n	800241a <HAL_DAC_Start_DMA+0x176>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2202      	movs	r2, #2
 80022cc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d12f      	bne.n	8002334 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_DAC_Start_DMA+0x180>)
 80022da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a51      	ldr	r2, [pc, #324]	; (8002428 <HAL_DAC_Start_DMA+0x184>)
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4a50      	ldr	r2, [pc, #320]	; (800242c <HAL_DAC_Start_DMA+0x188>)
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022fa:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d013      	beq.n	800232a <HAL_DAC_Start_DMA+0x86>
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d845      	bhi.n	8002394 <HAL_DAC_Start_DMA+0xf0>
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_DAC_Start_DMA+0x72>
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	2b04      	cmp	r3, #4
 8002312:	d005      	beq.n	8002320 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002314:	e03e      	b.n	8002394 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3308      	adds	r3, #8
 800231c:	613b      	str	r3, [r7, #16]
        break;
 800231e:	e03c      	b.n	800239a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	330c      	adds	r3, #12
 8002326:	613b      	str	r3, [r7, #16]
        break;
 8002328:	e037      	b.n	800239a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	613b      	str	r3, [r7, #16]
        break;
 8002332:	e032      	b.n	800239a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a3d      	ldr	r2, [pc, #244]	; (8002430 <HAL_DAC_Start_DMA+0x18c>)
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a3c      	ldr	r2, [pc, #240]	; (8002434 <HAL_DAC_Start_DMA+0x190>)
 8002342:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_DAC_Start_DMA+0x194>)
 800234a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800235a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	2b08      	cmp	r3, #8
 8002360:	d013      	beq.n	800238a <HAL_DAC_Start_DMA+0xe6>
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d817      	bhi.n	8002398 <HAL_DAC_Start_DMA+0xf4>
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_DAC_Start_DMA+0xd2>
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d005      	beq.n	8002380 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002374:	e010      	b.n	8002398 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	613b      	str	r3, [r7, #16]
        break;
 800237e:	e00c      	b.n	800239a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3318      	adds	r3, #24
 8002386:	613b      	str	r3, [r7, #16]
        break;
 8002388:	e007      	b.n	800239a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	331c      	adds	r3, #28
 8002390:	613b      	str	r3, [r7, #16]
        break;
 8002392:	e002      	b.n	800239a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002394:	bf00      	nop
 8002396:	e000      	b.n	800239a <HAL_DAC_Start_DMA+0xf6>
        break;
 8002398:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6898      	ldr	r0, [r3, #8]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	f000 faff 	bl	80029bc <HAL_DMA_Start_IT>
 80023be:	4603      	mov	r3, r0
 80023c0:	75fb      	strb	r3, [r7, #23]
 80023c2:	e010      	b.n	80023e6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68d8      	ldr	r0, [r3, #12]
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	f000 faed 	bl	80029bc <HAL_DMA_Start_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0310 	and.w	r3, r3, #16
 80023fe:	2201      	movs	r2, #1
 8002400:	409a      	lsls	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e005      	b.n	8002418 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002418:	7dfb      	ldrb	r3, [r7, #23]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	08002737 	.word	0x08002737
 8002428:	08002759 	.word	0x08002759
 800242c:	08002775 	.word	0x08002775
 8002430:	080027df 	.word	0x080027df
 8002434:	08002801 	.word	0x08002801
 8002438:	0800281d 	.word	0x0800281d

0800243c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	400a      	ands	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	2201      	movs	r2, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 faf6 	bl	8002a7c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e00c      	b.n	80024bc <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fae8 	bl	8002a7c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80024ba:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b088      	sub	sp, #32
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	795b      	ldrb	r3, [r3, #5]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_DAC_ConfigChannel+0x1c>
 800251a:	2302      	movs	r3, #2
 800251c:	e107      	b.n	800272e <HAL_DAC_ConfigChannel+0x22c>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2202      	movs	r2, #2
 8002528:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d174      	bne.n	800261c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002532:	f7ff fd53 	bl	8001fdc <HAL_GetTick>
 8002536:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d134      	bne.n	80025a8 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800253e:	e011      	b.n	8002564 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002540:	f7ff fd4c 	bl	8001fdc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d90a      	bls.n	8002564 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f043 0208 	orr.w	r2, r3, #8
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2203      	movs	r2, #3
 800255e:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0e4      	b.n	800272e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e6      	bne.n	8002540 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002572:	2001      	movs	r0, #1
 8002574:	f7ff fd3e 	bl	8001ff4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	6992      	ldr	r2, [r2, #24]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
 8002582:	e01e      	b.n	80025c2 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002584:	f7ff fd2a 	bl	8001fdc <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d90a      	bls.n	80025a8 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f043 0208 	orr.w	r2, r3, #8
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2203      	movs	r2, #3
 80025a2:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0c2      	b.n	800272e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	dbe8      	blt.n	8002584 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7ff fd1e 	bl	8001ff4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	6992      	ldr	r2, [r2, #24]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	ea02 0103 	and.w	r1, r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	409a      	lsls	r2, r3
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	21ff      	movs	r1, #255	; 0xff
 80025fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	ea02 0103 	and.w	r1, r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	6a1a      	ldr	r2, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d11d      	bne.n	8002660 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	221f      	movs	r2, #31
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2207      	movs	r2, #7
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	431a      	orrs	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6819      	ldr	r1, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43da      	mvns	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	400a      	ands	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	f640 72fc 	movw	r2, #4092	; 0xffc
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	22c0      	movs	r2, #192	; 0xc0
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	400a      	ands	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f7ff febe 	bl	80024c6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2201      	movs	r2, #1
 800274e:	711a      	strb	r2, [r3, #4]
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff feb7 	bl	80024da <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f043 0204 	orr.w	r2, r3, #4
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff fead 	bl	80024ee <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	711a      	strb	r2, [r3, #4]
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7ff ffd8 	bl	80027a2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	711a      	strb	r2, [r3, #4]
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff ffd1 	bl	80027b6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f043 0204 	orr.w	r2, r3, #4
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff ffc7 	bl	80027ca <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	711a      	strb	r2, [r3, #4]
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e098      	b.n	8002990 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	4b4d      	ldr	r3, [pc, #308]	; (800299c <HAL_DMA_Init+0x150>)
 8002866:	429a      	cmp	r2, r3
 8002868:	d80f      	bhi.n	800288a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_DMA_Init+0x154>)
 8002872:	4413      	add	r3, r2
 8002874:	4a4b      	ldr	r2, [pc, #300]	; (80029a4 <HAL_DMA_Init+0x158>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	009a      	lsls	r2, r3, #2
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a48      	ldr	r2, [pc, #288]	; (80029a8 <HAL_DMA_Init+0x15c>)
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
 8002888:	e00e      	b.n	80028a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	4b46      	ldr	r3, [pc, #280]	; (80029ac <HAL_DMA_Init+0x160>)
 8002892:	4413      	add	r3, r2
 8002894:	4a43      	ldr	r2, [pc, #268]	; (80029a4 <HAL_DMA_Init+0x158>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	009a      	lsls	r2, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a42      	ldr	r2, [pc, #264]	; (80029b0 <HAL_DMA_Init+0x164>)
 80028a6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002902:	d039      	beq.n	8002978 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <HAL_DMA_Init+0x15c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d11a      	bne.n	8002944 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800290e:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_DMA_Init+0x168>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f003 031c 	and.w	r3, r3, #28
 800291a:	210f      	movs	r1, #15
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	4924      	ldr	r1, [pc, #144]	; (80029b4 <HAL_DMA_Init+0x168>)
 8002924:	4013      	ands	r3, r2
 8002926:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002928:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <HAL_DMA_Init+0x168>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6859      	ldr	r1, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f003 031c 	and.w	r3, r3, #28
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	491d      	ldr	r1, [pc, #116]	; (80029b4 <HAL_DMA_Init+0x168>)
 800293e:	4313      	orrs	r3, r2
 8002940:	600b      	str	r3, [r1, #0]
 8002942:	e019      	b.n	8002978 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_DMA_Init+0x16c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	f003 031c 	and.w	r3, r3, #28
 8002950:	210f      	movs	r1, #15
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	4917      	ldr	r1, [pc, #92]	; (80029b8 <HAL_DMA_Init+0x16c>)
 800295a:	4013      	ands	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_DMA_Init+0x16c>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6859      	ldr	r1, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	f003 031c 	and.w	r3, r3, #28
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	4911      	ldr	r1, [pc, #68]	; (80029b8 <HAL_DMA_Init+0x16c>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40020407 	.word	0x40020407
 80029a0:	bffdfff8 	.word	0xbffdfff8
 80029a4:	cccccccd 	.word	0xcccccccd
 80029a8:	40020000 	.word	0x40020000
 80029ac:	bffdfbf8 	.word	0xbffdfbf8
 80029b0:	40020400 	.word	0x40020400
 80029b4:	400200a8 	.word	0x400200a8
 80029b8:	400204a8 	.word	0x400204a8

080029bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_DMA_Start_IT+0x20>
 80029d8:	2302      	movs	r3, #2
 80029da:	e04b      	b.n	8002a74 <HAL_DMA_Start_IT+0xb8>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d13a      	bne.n	8002a66 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68b9      	ldr	r1, [r7, #8]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f91e 	bl	8002c56 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d008      	beq.n	8002a34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 020e 	orr.w	r2, r2, #14
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e00f      	b.n	8002a54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0204 	bic.w	r2, r2, #4
 8002a42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 020a 	orr.w	r2, r2, #10
 8002a52:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e005      	b.n	8002a72 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2204      	movs	r2, #4
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e022      	b.n	8002aec <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 020e 	bic.w	r2, r2, #14
 8002ab4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0201 	bic.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f003 021c 	and.w	r2, r3, #28
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	f003 031c 	and.w	r3, r3, #28
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d026      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x7a>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d021      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b50:	f003 021c 	and.w	r2, r3, #28
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	2104      	movs	r1, #4
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d071      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002b70:	e06c      	b.n	8002c4c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f003 031c 	and.w	r3, r3, #28
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d02e      	beq.n	8002be4 <HAL_DMA_IRQHandler+0xec>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d029      	beq.n	8002be4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10b      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 020a 	bic.w	r2, r2, #10
 8002bac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	f003 021c 	and.w	r2, r3, #28
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d038      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002be2:	e033      	b.n	8002c4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be8:	f003 031c 	and.w	r3, r3, #28
 8002bec:	2208      	movs	r2, #8
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d02a      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x156>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d025      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 020e 	bic.w	r2, r2, #14
 8002c10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f003 021c 	and.w	r2, r3, #28
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	2101      	movs	r1, #1
 8002c20:	fa01 f202 	lsl.w	r2, r1, r2
 8002c24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
}
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	f003 021c 	and.w	r2, r3, #28
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	2101      	movs	r1, #1
 8002c72:	fa01 f202 	lsl.w	r2, r1, r2
 8002c76:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b10      	cmp	r3, #16
 8002c86:	d108      	bne.n	8002c9a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c98:	e007      	b.n	8002caa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	60da      	str	r2, [r3, #12]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc6:	e148      	b.n	8002f5a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 813a 	beq.w	8002f54 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d00b      	beq.n	8002d00 <HAL_GPIO_Init+0x48>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d007      	beq.n	8002d00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cf4:	2b11      	cmp	r3, #17
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b12      	cmp	r3, #18
 8002cfe:	d130      	bne.n	8002d62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d36:	2201      	movs	r2, #1
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	091b      	lsrs	r3, r3, #4
 8002d4c:	f003 0201 	and.w	r2, r3, #1
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4013      	ands	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0xea>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b12      	cmp	r3, #18
 8002da0:	d123      	bne.n	8002dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	08da      	lsrs	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3208      	adds	r2, #8
 8002daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	220f      	movs	r2, #15
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	6939      	ldr	r1, [r7, #16]
 8002de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8094 	beq.w	8002f54 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2c:	4b52      	ldr	r3, [pc, #328]	; (8002f78 <HAL_GPIO_Init+0x2c0>)
 8002e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e30:	4a51      	ldr	r2, [pc, #324]	; (8002f78 <HAL_GPIO_Init+0x2c0>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6613      	str	r3, [r2, #96]	; 0x60
 8002e38:	4b4f      	ldr	r3, [pc, #316]	; (8002f78 <HAL_GPIO_Init+0x2c0>)
 8002e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e44:	4a4d      	ldr	r2, [pc, #308]	; (8002f7c <HAL_GPIO_Init+0x2c4>)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e6e:	d00d      	beq.n	8002e8c <HAL_GPIO_Init+0x1d4>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a43      	ldr	r2, [pc, #268]	; (8002f80 <HAL_GPIO_Init+0x2c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d007      	beq.n	8002e88 <HAL_GPIO_Init+0x1d0>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a42      	ldr	r2, [pc, #264]	; (8002f84 <HAL_GPIO_Init+0x2cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d101      	bne.n	8002e84 <HAL_GPIO_Init+0x1cc>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e004      	b.n	8002e8e <HAL_GPIO_Init+0x1d6>
 8002e84:	2307      	movs	r3, #7
 8002e86:	e002      	b.n	8002e8e <HAL_GPIO_Init+0x1d6>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_GPIO_Init+0x1d6>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	f002 0203 	and.w	r2, r2, #3
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	4093      	lsls	r3, r2
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e9e:	4937      	ldr	r1, [pc, #220]	; (8002f7c <HAL_GPIO_Init+0x2c4>)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eac:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ed6:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efa:	4a23      	ldr	r2, [pc, #140]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_GPIO_Init+0x2d0>)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	fa22 f303 	lsr.w	r3, r2, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f aeaf 	bne.w	8002cc8 <HAL_GPIO_Init+0x10>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	40010400 	.word	0x40010400

08002f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f9c:	787b      	ldrb	r3, [r7, #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40007000 	.word	0x40007000

08002fd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe6:	d130      	bne.n	800304a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fe8:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff4:	d038      	beq.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003004:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2232      	movs	r2, #50	; 0x32
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0c9b      	lsrs	r3, r3, #18
 8003018:	3301      	adds	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301c:	e002      	b.n	8003024 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3b01      	subs	r3, #1
 8003022:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003024:	4b14      	ldr	r3, [pc, #80]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003030:	d102      	bne.n	8003038 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f2      	bne.n	800301e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003044:	d110      	bne.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e00f      	b.n	800306a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003056:	d007      	beq.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003058:	4b07      	ldr	r3, [pc, #28]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003060:	4a05      	ldr	r2, [pc, #20]	; (8003078 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003062:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003066:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40007000 	.word	0x40007000
 800307c:	200000c8 	.word	0x200000c8
 8003080:	431bde83 	.word	0x431bde83

08003084 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f000 bc11 	b.w	80038ba <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003098:	4ba0      	ldr	r3, [pc, #640]	; (800331c <HAL_RCC_OscConfig+0x298>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a2:	4b9e      	ldr	r3, [pc, #632]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80e4 	beq.w	8003282 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4c>
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	f040 808b 	bne.w	80031de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	f040 8087 	bne.w	80031de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030d0:	4b92      	ldr	r3, [pc, #584]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_OscConfig+0x64>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e3e8      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	4b8b      	ldr	r3, [pc, #556]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <HAL_RCC_OscConfig+0x7e>
 80030f8:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003100:	e005      	b.n	800310e <HAL_RCC_OscConfig+0x8a>
 8003102:	4b86      	ldr	r3, [pc, #536]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800310e:	4293      	cmp	r3, r2
 8003110:	d223      	bcs.n	800315a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fd7a 	bl	8003c10 <RCC_SetFlashLatencyFromMSIRange>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e3c9      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003126:	4b7d      	ldr	r3, [pc, #500]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a7c      	ldr	r2, [pc, #496]	; (800331c <HAL_RCC_OscConfig+0x298>)
 800312c:	f043 0308 	orr.w	r3, r3, #8
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b7a      	ldr	r3, [pc, #488]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	4977      	ldr	r1, [pc, #476]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003144:	4b75      	ldr	r3, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	4972      	ldr	r1, [pc, #456]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
 8003158:	e025      	b.n	80031a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800315a:	4b70      	ldr	r3, [pc, #448]	; (800331c <HAL_RCC_OscConfig+0x298>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6f      	ldr	r2, [pc, #444]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003160:	f043 0308 	orr.w	r3, r3, #8
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	496a      	ldr	r1, [pc, #424]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003174:	4313      	orrs	r3, r2
 8003176:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003178:	4b68      	ldr	r3, [pc, #416]	; (800331c <HAL_RCC_OscConfig+0x298>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	4965      	ldr	r1, [pc, #404]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fd3a 	bl	8003c10 <RCC_SetFlashLatencyFromMSIRange>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e389      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031a6:	f000 fc6f 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b5b      	ldr	r3, [pc, #364]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	495a      	ldr	r1, [pc, #360]	; (8003320 <HAL_RCC_OscConfig+0x29c>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a58      	ldr	r2, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x2a0>)
 80031c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031c6:	4b58      	ldr	r3, [pc, #352]	; (8003328 <HAL_RCC_OscConfig+0x2a4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe feb6 	bl	8001f3c <HAL_InitTick>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d052      	beq.n	8003280 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	e36d      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d032      	beq.n	800324c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031e6:	4b4d      	ldr	r3, [pc, #308]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a4c      	ldr	r2, [pc, #304]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f2:	f7fe fef3 	bl	8001fdc <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031fa:	f7fe feef 	bl	8001fdc <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e356      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <HAL_RCC_OscConfig+0x298>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003218:	4b40      	ldr	r3, [pc, #256]	; (800331c <HAL_RCC_OscConfig+0x298>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a3f      	ldr	r2, [pc, #252]	; (800331c <HAL_RCC_OscConfig+0x298>)
 800321e:	f043 0308 	orr.w	r3, r3, #8
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	493a      	ldr	r1, [pc, #232]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003236:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	4935      	ldr	r1, [pc, #212]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003246:	4313      	orrs	r3, r2
 8003248:	604b      	str	r3, [r1, #4]
 800324a:	e01a      	b.n	8003282 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800324c:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_RCC_OscConfig+0x298>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a32      	ldr	r2, [pc, #200]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003258:	f7fe fec0 	bl	8001fdc <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003260:	f7fe febc 	bl	8001fdc <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e323      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003272:	4b2a      	ldr	r3, [pc, #168]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1dc>
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003280:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d073      	beq.n	8003376 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_OscConfig+0x21c>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d10e      	bne.n	80032b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d10b      	bne.n	80032b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	4b1e      	ldr	r3, [pc, #120]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d063      	beq.n	8003374 <HAL_RCC_OscConfig+0x2f0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d15f      	bne.n	8003374 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e300      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d106      	bne.n	80032d0 <HAL_RCC_OscConfig+0x24c>
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0x288>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0x270>
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a0f      	ldr	r2, [pc, #60]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a0c      	ldr	r2, [pc, #48]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0x288>
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a08      	ldr	r2, [pc, #32]	; (800331c <HAL_RCC_OscConfig+0x298>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a05      	ldr	r2, [pc, #20]	; (800331c <HAL_RCC_OscConfig+0x298>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01b      	beq.n	800334c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe fe62 	bl	8001fdc <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331a:	e010      	b.n	800333e <HAL_RCC_OscConfig+0x2ba>
 800331c:	40021000 	.word	0x40021000
 8003320:	08007b20 	.word	0x08007b20
 8003324:	200000c8 	.word	0x200000c8
 8003328:	200000cc 	.word	0x200000cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800332c:	f7fe fe56 	bl	8001fdc <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e2bd      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333e:	4baf      	ldr	r3, [pc, #700]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x2a8>
 800334a:	e014      	b.n	8003376 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe fe46 	bl	8001fdc <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe fe42 	bl	8001fdc <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b64      	cmp	r3, #100	; 0x64
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e2a9      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003366:	4ba5      	ldr	r3, [pc, #660]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x2d0>
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d060      	beq.n	8003444 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d005      	beq.n	8003394 <HAL_RCC_OscConfig+0x310>
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d119      	bne.n	80033c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d116      	bne.n	80033c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003394:	4b99      	ldr	r3, [pc, #612]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_OscConfig+0x328>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e286      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ac:	4b93      	ldr	r3, [pc, #588]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	4990      	ldr	r1, [pc, #576]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033c0:	e040      	b.n	8003444 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d023      	beq.n	8003412 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033ca:	4b8c      	ldr	r3, [pc, #560]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a8b      	ldr	r2, [pc, #556]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe fe01 	bl	8001fdc <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033de:	f7fe fdfd 	bl	8001fdc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e264      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f0:	4b82      	ldr	r3, [pc, #520]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fc:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	497c      	ldr	r1, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
 8003410:	e018      	b.n	8003444 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003412:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a79      	ldr	r2, [pc, #484]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003418:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800341c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341e:	f7fe fddd 	bl	8001fdc <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fe fdd9 	bl	8001fdc <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e240      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003438:	4b70      	ldr	r3, [pc, #448]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1f0      	bne.n	8003426 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d03c      	beq.n	80034ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01c      	beq.n	8003492 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003458:	4b68      	ldr	r3, [pc, #416]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800345a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345e:	4a67      	ldr	r2, [pc, #412]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe fdb8 	bl	8001fdc <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003470:	f7fe fdb4 	bl	8001fdc <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e21b      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003482:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ef      	beq.n	8003470 <HAL_RCC_OscConfig+0x3ec>
 8003490:	e01b      	b.n	80034ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003492:	4b5a      	ldr	r3, [pc, #360]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003498:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7fe fd9b 	bl	8001fdc <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034aa:	f7fe fd97 	bl	8001fdc <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1fe      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1ef      	bne.n	80034aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a6 	beq.w	8003624 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034dc:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80034de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e8:	4b44      	ldr	r3, [pc, #272]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80034ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ec:	4a43      	ldr	r2, [pc, #268]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80034ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f2:	6593      	str	r3, [r2, #88]	; 0x58
 80034f4:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003500:	2301      	movs	r3, #1
 8003502:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003504:	4b3e      	ldr	r3, [pc, #248]	; (8003600 <HAL_RCC_OscConfig+0x57c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d118      	bne.n	8003542 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003510:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_RCC_OscConfig+0x57c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <HAL_RCC_OscConfig+0x57c>)
 8003516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800351c:	f7fe fd5e 	bl	8001fdc <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003524:	f7fe fd5a 	bl	8001fdc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e1c1      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	4b32      	ldr	r3, [pc, #200]	; (8003600 <HAL_RCC_OscConfig+0x57c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d108      	bne.n	800355c <HAL_RCC_OscConfig+0x4d8>
 800354a:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800355a:	e024      	b.n	80035a6 <HAL_RCC_OscConfig+0x522>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b05      	cmp	r3, #5
 8003562:	d110      	bne.n	8003586 <HAL_RCC_OscConfig+0x502>
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356a:	4a24      	ldr	r2, [pc, #144]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	4a20      	ldr	r2, [pc, #128]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003584:	e00f      	b.n	80035a6 <HAL_RCC_OscConfig+0x522>
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800358c:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800358e:	f023 0301 	bic.w	r3, r3, #1
 8003592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 800359e:	f023 0304 	bic.w	r3, r3, #4
 80035a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fe fd15 	bl	8001fdc <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b4:	e00a      	b.n	80035cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fe fd11 	bl	8001fdc <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e176      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x578>)
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0ed      	beq.n	80035b6 <HAL_RCC_OscConfig+0x532>
 80035da:	e01a      	b.n	8003612 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe fcfe 	bl	8001fdc <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e2:	e00f      	b.n	8003604 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e4:	f7fe fcfa 	bl	8001fdc <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d906      	bls.n	8003604 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e15f      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003604:	4baa      	ldr	r3, [pc, #680]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e8      	bne.n	80035e4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d105      	bne.n	8003624 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003618:	4ba5      	ldr	r3, [pc, #660]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	4aa4      	ldr	r2, [pc, #656]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800361e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003622:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03c      	beq.n	80036aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003638:	4b9d      	ldr	r3, [pc, #628]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800363a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800363e:	4a9c      	ldr	r2, [pc, #624]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fe fcc8 	bl	8001fdc <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003650:	f7fe fcc4 	bl	8001fdc <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e12b      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003662:	4b93      	ldr	r3, [pc, #588]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003664:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ef      	beq.n	8003650 <HAL_RCC_OscConfig+0x5cc>
 8003670:	e01b      	b.n	80036aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003672:	4b8f      	ldr	r3, [pc, #572]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003674:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003678:	4a8d      	ldr	r2, [pc, #564]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fe fcab 	bl	8001fdc <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800368a:	f7fe fca7 	bl	8001fdc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e10e      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800369c:	4b84      	ldr	r3, [pc, #528]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800369e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ef      	bne.n	800368a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8102 	beq.w	80038b8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	f040 80c5 	bne.w	8003848 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036be:	4b7c      	ldr	r3, [pc, #496]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0203 	and.w	r2, r3, #3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d12c      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	3b01      	subs	r3, #1
 80036de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d123      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d11b      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d113      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d109      	bne.n	800372c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	085b      	lsrs	r3, r3, #1
 8003724:	3b01      	subs	r3, #1
 8003726:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003728:	429a      	cmp	r2, r3
 800372a:	d067      	beq.n	80037fc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b0c      	cmp	r3, #12
 8003730:	d062      	beq.n	80037f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003732:	4b5f      	ldr	r3, [pc, #380]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0bb      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003742:	4b5b      	ldr	r3, [pc, #364]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a5a      	ldr	r2, [pc, #360]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800374e:	f7fe fc45 	bl	8001fdc <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003756:	f7fe fc41 	bl	8001fdc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0a8      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003768:	4b51      	ldr	r3, [pc, #324]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1f0      	bne.n	8003756 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	4b4e      	ldr	r3, [pc, #312]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	4b4e      	ldr	r3, [pc, #312]	; (80038b4 <HAL_RCC_OscConfig+0x830>)
 800377a:	4013      	ands	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003784:	3a01      	subs	r2, #1
 8003786:	0112      	lsls	r2, r2, #4
 8003788:	4311      	orrs	r1, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800378e:	0212      	lsls	r2, r2, #8
 8003790:	4311      	orrs	r1, r2
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003796:	0852      	lsrs	r2, r2, #1
 8003798:	3a01      	subs	r2, #1
 800379a:	0552      	lsls	r2, r2, #21
 800379c:	4311      	orrs	r1, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037a2:	0852      	lsrs	r2, r2, #1
 80037a4:	3a01      	subs	r2, #1
 80037a6:	0652      	lsls	r2, r2, #25
 80037a8:	4311      	orrs	r1, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037ae:	06d2      	lsls	r2, r2, #27
 80037b0:	430a      	orrs	r2, r1
 80037b2:	493f      	ldr	r1, [pc, #252]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037b8:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a3c      	ldr	r2, [pc, #240]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 80037be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c4:	4b3a      	ldr	r3, [pc, #232]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a39      	ldr	r2, [pc, #228]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 80037ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037d0:	f7fe fc04 	bl	8001fdc <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe fc00 	bl	8001fdc <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e067      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ea:	4b31      	ldr	r3, [pc, #196]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f6:	e05f      	b.n	80038b8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e05e      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fc:	4b2c      	ldr	r3, [pc, #176]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d157      	bne.n	80038b8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003808:	4b29      	ldr	r3, [pc, #164]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a28      	ldr	r2, [pc, #160]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800380e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003812:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800381a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800381e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003820:	f7fe fbdc 	bl	8001fdc <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003828:	f7fe fbd8 	bl	8001fdc <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e03f      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x7a4>
 8003846:	e037      	b.n	80038b8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b0c      	cmp	r3, #12
 800384c:	d02d      	beq.n	80038aa <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a17      	ldr	r2, [pc, #92]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003858:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800385a:	4b15      	ldr	r3, [pc, #84]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d105      	bne.n	8003872 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	4a11      	ldr	r2, [pc, #68]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800386c:	f023 0303 	bic.w	r3, r3, #3
 8003870:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003872:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 8003878:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800387c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003880:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fe fbab 	bl	8001fdc <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800388a:	f7fe fba7 	bl	8001fdc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e00e      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <HAL_RCC_OscConfig+0x82c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x806>
 80038a8:	e006      	b.n	80038b8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e005      	b.n	80038ba <HAL_RCC_OscConfig+0x836>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3720      	adds	r7, #32
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop

080038c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0c8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d8:	4b66      	ldr	r3, [pc, #408]	; (8003a74 <HAL_RCC_ClockConfig+0x1b0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d910      	bls.n	8003908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x1b0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 0207 	bic.w	r2, r3, #7
 80038ee:	4961      	ldr	r1, [pc, #388]	; (8003a74 <HAL_RCC_ClockConfig+0x1b0>)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f6:	4b5f      	ldr	r3, [pc, #380]	; (8003a74 <HAL_RCC_ClockConfig+0x1b0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0b0      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d04c      	beq.n	80039ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d107      	bne.n	800392c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391c:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d121      	bne.n	800396c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e09e      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d107      	bne.n	8003944 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d115      	bne.n	800396c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e092      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800394c:	4b4a      	ldr	r3, [pc, #296]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d109      	bne.n	800396c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e086      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800395c:	4b46      	ldr	r3, [pc, #280]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e07e      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800396c:	4b42      	ldr	r3, [pc, #264]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 0203 	bic.w	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	493f      	ldr	r1, [pc, #252]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397e:	f7fe fb2d 	bl	8001fdc <HAL_GetTick>
 8003982:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003984:	e00a      	b.n	800399c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003986:	f7fe fb29 	bl	8001fdc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e066      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399c:	4b36      	ldr	r3, [pc, #216]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 020c 	and.w	r2, r3, #12
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d1eb      	bne.n	8003986 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ba:	4b2f      	ldr	r3, [pc, #188]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	492c      	ldr	r1, [pc, #176]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039cc:	4b29      	ldr	r3, [pc, #164]	; (8003a74 <HAL_RCC_ClockConfig+0x1b0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d210      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <HAL_RCC_ClockConfig+0x1b0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4924      	ldr	r1, [pc, #144]	; (8003a74 <HAL_RCC_ClockConfig+0x1b0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_ClockConfig+0x1b0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e036      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d008      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4918      	ldr	r1, [pc, #96]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a26:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4910      	ldr	r1, [pc, #64]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a3a:	f000 f825 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <HAL_RCC_ClockConfig+0x1b4>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	490c      	ldr	r1, [pc, #48]	; (8003a7c <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe fa6c 	bl	8001f3c <HAL_InitTick>
 8003a64:	4603      	mov	r3, r0
 8003a66:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a68:	7afb      	ldrb	r3, [r7, #11]
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	08007b20 	.word	0x08007b20
 8003a80:	200000c8 	.word	0x200000c8
 8003a84:	200000cc 	.word	0x200000cc

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a96:	4b3e      	ldr	r3, [pc, #248]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa0:	4b3b      	ldr	r3, [pc, #236]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x34>
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b0c      	cmp	r3, #12
 8003ab4:	d121      	bne.n	8003afa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d11e      	bne.n	8003afa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003abc:	4b34      	ldr	r3, [pc, #208]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ac8:	4b31      	ldr	r3, [pc, #196]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ace:	0a1b      	lsrs	r3, r3, #8
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	e005      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ae4:	4a2b      	ldr	r2, [pc, #172]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10d      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d102      	bne.n	8003b06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e004      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003b0e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b0c      	cmp	r3, #12
 8003b14:	d134      	bne.n	8003b80 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b16:	4b1e      	ldr	r3, [pc, #120]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d003      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0xa6>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d003      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0xac>
 8003b2c:	e005      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b30:	617b      	str	r3, [r7, #20]
      break;
 8003b32:	e005      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x114>)
 8003b36:	617b      	str	r3, [r7, #20]
      break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	617b      	str	r3, [r7, #20]
      break;
 8003b3e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b40:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b4e:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	fb02 f203 	mul.w	r2, r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	0e5b      	lsrs	r3, r3, #25
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	3301      	adds	r3, #1
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b80:	69bb      	ldr	r3, [r7, #24]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3724      	adds	r7, #36	; 0x24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000
 8003b94:	08007b38 	.word	0x08007b38
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	007a1200 	.word	0x007a1200

08003ba0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	200000c8 	.word	0x200000c8

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003bbc:	f7ff fff0 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4904      	ldr	r1, [pc, #16]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	08007b30 	.word	0x08007b30

08003be4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003be8:	f7ff ffda 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	0adb      	lsrs	r3, r3, #11
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	4904      	ldr	r1, [pc, #16]	; (8003c0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	08007b30 	.word	0x08007b30

08003c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c28:	f7ff f9c8 	bl	8002fbc <HAL_PWREx_GetVoltageRange>
 8003c2c:	6178      	str	r0, [r7, #20]
 8003c2e:	e014      	b.n	8003c5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c30:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c3c:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c48:	f7ff f9b8 	bl	8002fbc <HAL_PWREx_GetVoltageRange>
 8003c4c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c60:	d10b      	bne.n	8003c7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d919      	bls.n	8003c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2ba0      	cmp	r3, #160	; 0xa0
 8003c6c:	d902      	bls.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c6e:	2302      	movs	r3, #2
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	e013      	b.n	8003c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c74:	2301      	movs	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	e010      	b.n	8003c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b80      	cmp	r3, #128	; 0x80
 8003c7e:	d902      	bls.n	8003c86 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c80:	2303      	movs	r3, #3
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	e00a      	b.n	8003c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b80      	cmp	r3, #128	; 0x80
 8003c8a:	d102      	bne.n	8003c92 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	e004      	b.n	8003c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b70      	cmp	r3, #112	; 0x70
 8003c96:	d101      	bne.n	8003c9c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c98:	2301      	movs	r3, #1
 8003c9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 0207 	bic.w	r2, r3, #7
 8003ca4:	4909      	ldr	r1, [pc, #36]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40022000 	.word	0x40022000

08003cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cd8:	2300      	movs	r3, #0
 8003cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cdc:	2300      	movs	r3, #0
 8003cde:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d031      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cf4:	d01a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003cf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cfa:	d814      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d04:	d10f      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003d06:	4bac      	ldr	r3, [pc, #688]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4aab      	ldr	r2, [pc, #684]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d10:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d12:	e00c      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f9cc 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	74fb      	strb	r3, [r7, #19]
      break;
 8003d2a:	e000      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10b      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d34:	4ba0      	ldr	r3, [pc, #640]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	499d      	ldr	r1, [pc, #628]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d4a:	e001      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8099 	beq.w	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d62:	4b95      	ldr	r3, [pc, #596]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00d      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d78:	4b8f      	ldr	r3, [pc, #572]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7c:	4a8e      	ldr	r2, [pc, #568]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d82:	6593      	str	r3, [r2, #88]	; 0x58
 8003d84:	4b8c      	ldr	r3, [pc, #560]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d94:	4b89      	ldr	r3, [pc, #548]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a88      	ldr	r2, [pc, #544]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da0:	f7fe f91c 	bl	8001fdc <HAL_GetTick>
 8003da4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003da6:	e009      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da8:	f7fe f918 	bl	8001fdc <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d902      	bls.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dba:	e005      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dbc:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ef      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d155      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dce:	4b7a      	ldr	r3, [pc, #488]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01e      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d019      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dea:	4b73      	ldr	r3, [pc, #460]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003df6:	4b70      	ldr	r3, [pc, #448]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfc:	4a6e      	ldr	r2, [pc, #440]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e06:	4b6c      	ldr	r3, [pc, #432]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	4a6a      	ldr	r2, [pc, #424]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e16:	4a68      	ldr	r2, [pc, #416]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fe f8d8 	bl	8001fdc <HAL_GetTick>
 8003e2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fe f8d4 	bl	8001fdc <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d902      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	74fb      	strb	r3, [r7, #19]
            break;
 8003e46:	e006      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e48:	4b5b      	ldr	r3, [pc, #364]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0ec      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10b      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e5c:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6a:	4953      	ldr	r1, [pc, #332]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
 8003e76:	74bb      	strb	r3, [r7, #18]
 8003e78:	e001      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]
 8003e7c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e7e:	7c7b      	ldrb	r3, [r7, #17]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b4c      	ldr	r3, [pc, #304]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e88:	4a4b      	ldr	r2, [pc, #300]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e9c:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea2:	f023 0203 	bic.w	r2, r3, #3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	4943      	ldr	r1, [pc, #268]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ebe:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec4:	f023 020c 	bic.w	r2, r3, #12
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	493a      	ldr	r1, [pc, #232]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee0:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eee:	4932      	ldr	r1, [pc, #200]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	4929      	ldr	r1, [pc, #164]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	4921      	ldr	r1, [pc, #132]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	4918      	ldr	r1, [pc, #96]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4910      	ldr	r1, [pc, #64]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02c      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8a:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	4907      	ldr	r1, [pc, #28]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003faa:	4b03      	ldr	r3, [pc, #12]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4a02      	ldr	r2, [pc, #8]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003fb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fb4:	60d3      	str	r3, [r2, #12]
 8003fb6:	e015      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	2101      	movs	r1, #1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 f871 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003fe0:	7cfb      	ldrb	r3, [r7, #19]
 8003fe2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d028      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ff0:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	492d      	ldr	r1, [pc, #180]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800400e:	d106      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004010:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800401a:	60d3      	str	r3, [r2, #12]
 800401c:	e011      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004026:	d10c      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3304      	adds	r3, #4
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f842 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800403e:	7cfb      	ldrb	r3, [r7, #19]
 8004040:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d01c      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800404e:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405c:	4915      	ldr	r1, [pc, #84]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800406c:	d10c      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3304      	adds	r3, #4
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f81f 	bl	80040b8 <RCCEx_PLLSAI1_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800407e:	7cfb      	ldrb	r3, [r7, #19]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004084:	7cfb      	ldrb	r3, [r7, #19]
 8004086:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	4904      	ldr	r1, [pc, #16]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40021000 	.word	0x40021000

080040b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040c6:	4b74      	ldr	r3, [pc, #464]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d018      	beq.n	8004104 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040d2:	4b71      	ldr	r3, [pc, #452]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0203 	and.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d10d      	bne.n	80040fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
       ||
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040ea:	4b6b      	ldr	r3, [pc, #428]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
       ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d047      	beq.n	800418e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	e044      	b.n	800418e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d018      	beq.n	800413e <RCCEx_PLLSAI1_Config+0x86>
 800410c:	2b03      	cmp	r3, #3
 800410e:	d825      	bhi.n	800415c <RCCEx_PLLSAI1_Config+0xa4>
 8004110:	2b01      	cmp	r3, #1
 8004112:	d002      	beq.n	800411a <RCCEx_PLLSAI1_Config+0x62>
 8004114:	2b02      	cmp	r3, #2
 8004116:	d009      	beq.n	800412c <RCCEx_PLLSAI1_Config+0x74>
 8004118:	e020      	b.n	800415c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800411a:	4b5f      	ldr	r3, [pc, #380]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11d      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412a:	e01a      	b.n	8004162 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800412c:	4b5a      	ldr	r3, [pc, #360]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d116      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413c:	e013      	b.n	8004166 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800413e:	4b56      	ldr	r3, [pc, #344]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800414a:	4b53      	ldr	r3, [pc, #332]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800415a:	e006      	b.n	800416a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e004      	b.n	800416c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800416a:	bf00      	nop
    }

    if(status == HAL_OK)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004172:	4b49      	ldr	r3, [pc, #292]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	430b      	orrs	r3, r1
 8004188:	4943      	ldr	r1, [pc, #268]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800418a:	4313      	orrs	r3, r2
 800418c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d17c      	bne.n	800428e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004194:	4b40      	ldr	r3, [pc, #256]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a3f      	ldr	r2, [pc, #252]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800419a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800419e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fd ff1c 	bl	8001fdc <HAL_GetTick>
 80041a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041a6:	e009      	b.n	80041bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a8:	f7fd ff18 	bl	8001fdc <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d902      	bls.n	80041bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ba:	e005      	b.n	80041c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041bc:	4b36      	ldr	r3, [pc, #216]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ef      	bne.n	80041a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d15f      	bne.n	800428e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d110      	bne.n	80041f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6892      	ldr	r2, [r2, #8]
 80041e4:	0211      	lsls	r1, r2, #8
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	06d2      	lsls	r2, r2, #27
 80041ec:	430a      	orrs	r2, r1
 80041ee:	492a      	ldr	r1, [pc, #168]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	610b      	str	r3, [r1, #16]
 80041f4:	e027      	b.n	8004246 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d112      	bne.n	8004222 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041fc:	4b26      	ldr	r3, [pc, #152]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004204:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6892      	ldr	r2, [r2, #8]
 800420c:	0211      	lsls	r1, r2, #8
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6912      	ldr	r2, [r2, #16]
 8004212:	0852      	lsrs	r2, r2, #1
 8004214:	3a01      	subs	r2, #1
 8004216:	0552      	lsls	r2, r2, #21
 8004218:	430a      	orrs	r2, r1
 800421a:	491f      	ldr	r1, [pc, #124]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800421c:	4313      	orrs	r3, r2
 800421e:	610b      	str	r3, [r1, #16]
 8004220:	e011      	b.n	8004246 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004222:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800422a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6892      	ldr	r2, [r2, #8]
 8004232:	0211      	lsls	r1, r2, #8
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6952      	ldr	r2, [r2, #20]
 8004238:	0852      	lsrs	r2, r2, #1
 800423a:	3a01      	subs	r2, #1
 800423c:	0652      	lsls	r2, r2, #25
 800423e:	430a      	orrs	r2, r1
 8004240:	4915      	ldr	r1, [pc, #84]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004246:	4b14      	ldr	r3, [pc, #80]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a13      	ldr	r2, [pc, #76]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800424c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004250:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fd fec3 	bl	8001fdc <HAL_GetTick>
 8004256:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004258:	e009      	b.n	800426e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800425a:	f7fd febf 	bl	8001fdc <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d902      	bls.n	800426e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	73fb      	strb	r3, [r7, #15]
          break;
 800426c:	e005      	b.n	800427a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800426e:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004282:	691a      	ldr	r2, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	4903      	ldr	r1, [pc, #12]	; (8004298 <RCCEx_PLLSAI1_Config+0x1e0>)
 800428a:	4313      	orrs	r3, r2
 800428c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000

0800429c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e049      	b.n	8004342 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7fd fc76 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2202      	movs	r2, #2
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f000 f970 	bl	80045c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d001      	beq.n	8004364 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e033      	b.n	80043cc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <HAL_TIM_Base_Start+0x8c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_TIM_Base_Start+0x3e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437e:	d004      	beq.n	800438a <HAL_TIM_Base_Start+0x3e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a15      	ldr	r2, [pc, #84]	; (80043dc <HAL_TIM_Base_Start+0x90>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d115      	bne.n	80043b6 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <HAL_TIM_Base_Start+0x94>)
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d015      	beq.n	80043c8 <HAL_TIM_Base_Start+0x7c>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d011      	beq.n	80043c8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	e008      	b.n	80043c8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	e000      	b.n	80043ca <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	40012c00 	.word	0x40012c00
 80043dc:	40014000 	.word	0x40014000
 80043e0:	00010007 	.word	0x00010007

080043e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a1a      	ldr	r2, [r3, #32]
 80043f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10f      	bne.n	800441c <HAL_TIM_Base_Stop+0x38>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6a1a      	ldr	r2, [r3, #32]
 8004402:	f240 4344 	movw	r3, #1092	; 0x444
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d107      	bne.n	800441c <HAL_TIM_Base_Stop+0x38>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b084      	sub	sp, #16
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_TIM_ConfigClockSource+0x18>
 8004446:	2302      	movs	r3, #2
 8004448:	e0b5      	b.n	80045b6 <HAL_TIM_ConfigClockSource+0x184>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004468:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800446c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004474:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004486:	d03e      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0xd4>
 8004488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448c:	f200 8087 	bhi.w	800459e <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004494:	f000 8085 	beq.w	80045a2 <HAL_TIM_ConfigClockSource+0x170>
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d87f      	bhi.n	800459e <HAL_TIM_ConfigClockSource+0x16c>
 800449e:	2b70      	cmp	r3, #112	; 0x70
 80044a0:	d01a      	beq.n	80044d8 <HAL_TIM_ConfigClockSource+0xa6>
 80044a2:	2b70      	cmp	r3, #112	; 0x70
 80044a4:	d87b      	bhi.n	800459e <HAL_TIM_ConfigClockSource+0x16c>
 80044a6:	2b60      	cmp	r3, #96	; 0x60
 80044a8:	d050      	beq.n	800454c <HAL_TIM_ConfigClockSource+0x11a>
 80044aa:	2b60      	cmp	r3, #96	; 0x60
 80044ac:	d877      	bhi.n	800459e <HAL_TIM_ConfigClockSource+0x16c>
 80044ae:	2b50      	cmp	r3, #80	; 0x50
 80044b0:	d03c      	beq.n	800452c <HAL_TIM_ConfigClockSource+0xfa>
 80044b2:	2b50      	cmp	r3, #80	; 0x50
 80044b4:	d873      	bhi.n	800459e <HAL_TIM_ConfigClockSource+0x16c>
 80044b6:	2b40      	cmp	r3, #64	; 0x40
 80044b8:	d058      	beq.n	800456c <HAL_TIM_ConfigClockSource+0x13a>
 80044ba:	2b40      	cmp	r3, #64	; 0x40
 80044bc:	d86f      	bhi.n	800459e <HAL_TIM_ConfigClockSource+0x16c>
 80044be:	2b30      	cmp	r3, #48	; 0x30
 80044c0:	d064      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x15a>
 80044c2:	2b30      	cmp	r3, #48	; 0x30
 80044c4:	d86b      	bhi.n	800459e <HAL_TIM_ConfigClockSource+0x16c>
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d060      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x15a>
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d867      	bhi.n	800459e <HAL_TIM_ConfigClockSource+0x16c>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d05c      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x15a>
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d05a      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044d6:	e062      	b.n	800459e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f000 f948 	bl	800477c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	609a      	str	r2, [r3, #8]
      break;
 8004504:	e04e      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6899      	ldr	r1, [r3, #8]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f000 f931 	bl	800477c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004528:	609a      	str	r2, [r3, #8]
      break;
 800452a:	e03b      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	461a      	mov	r2, r3
 800453a:	f000 f8a5 	bl	8004688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2150      	movs	r1, #80	; 0x50
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f8fe 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 800454a:	e02b      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	461a      	mov	r2, r3
 800455a:	f000 f8c4 	bl	80046e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2160      	movs	r1, #96	; 0x60
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f8ee 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 800456a:	e01b      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	461a      	mov	r2, r3
 800457a:	f000 f885 	bl	8004688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2140      	movs	r1, #64	; 0x40
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f8de 	bl	8004746 <TIM_ITRx_SetConfig>
      break;
 800458a:	e00b      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f000 f8d5 	bl	8004746 <TIM_ITRx_SetConfig>
        break;
 800459c:	e002      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800459e:	bf00      	nop
 80045a0:	e000      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80045a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a2a      	ldr	r2, [pc, #168]	; (800467c <TIM_Base_SetConfig+0xbc>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x20>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045de:	d108      	bne.n	80045f2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a21      	ldr	r2, [pc, #132]	; (800467c <TIM_Base_SetConfig+0xbc>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00b      	beq.n	8004612 <TIM_Base_SetConfig+0x52>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004600:	d007      	beq.n	8004612 <TIM_Base_SetConfig+0x52>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a1e      	ldr	r2, [pc, #120]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_Base_SetConfig+0x52>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <TIM_Base_SetConfig+0xc4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d108      	bne.n	8004624 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a0c      	ldr	r2, [pc, #48]	; (800467c <TIM_Base_SetConfig+0xbc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_Base_SetConfig+0xa0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a0b      	ldr	r2, [pc, #44]	; (8004680 <TIM_Base_SetConfig+0xc0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0xa0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a0a      	ldr	r2, [pc, #40]	; (8004684 <TIM_Base_SetConfig+0xc4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d103      	bne.n	8004668 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	615a      	str	r2, [r3, #20]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400

08004688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 030a 	bic.w	r3, r3, #10
 80046c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	60f8      	str	r0, [r7, #12]
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0210 	bic.w	r2, r3, #16
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	031b      	lsls	r3, r3, #12
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004722:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	621a      	str	r2, [r3, #32]
}
 800473a:	bf00      	nop
 800473c:	371c      	adds	r7, #28
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	f043 0307 	orr.w	r3, r3, #7
 8004768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	021a      	lsls	r2, r3, #8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	431a      	orrs	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e04f      	b.n	8004874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a21      	ldr	r2, [pc, #132]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d108      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004804:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a14      	ldr	r2, [pc, #80]	; (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d009      	beq.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483c:	d004      	beq.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a10      	ldr	r2, [pc, #64]	; (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d10c      	bne.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	4313      	orrs	r3, r2
 8004858:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40014000 	.word	0x40014000

08004888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e040      	b.n	800491c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fd f9a0 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2224      	movs	r2, #36	; 0x24
 80048b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f992 	bl	8004bf0 <UART_SetConfig>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e022      	b.n	800491c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fb92 	bl	8005008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fc19 	bl	800514c <UART_CheckIdleState>
 800491a:	4603      	mov	r3, r0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004938:	2b20      	cmp	r3, #32
 800493a:	f040 8082 	bne.w	8004a42 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_UART_Transmit+0x26>
 8004944:	88fb      	ldrh	r3, [r7, #6]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07a      	b.n	8004a44 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_UART_Transmit+0x38>
 8004958:	2302      	movs	r3, #2
 800495a:	e073      	b.n	8004a44 <HAL_UART_Transmit+0x120>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2221      	movs	r2, #33	; 0x21
 8004970:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004972:	f7fd fb33 	bl	8001fdc <HAL_GetTick>
 8004976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004990:	d108      	bne.n	80049a4 <HAL_UART_Transmit+0x80>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d104      	bne.n	80049a4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	e003      	b.n	80049ac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80049b4:	e02d      	b.n	8004a12 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fc0c 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e039      	b.n	8004a44 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10b      	bne.n	80049ee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	881a      	ldrh	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e2:	b292      	uxth	r2, r2
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	3302      	adds	r3, #2
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e008      	b.n	8004a00 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	b292      	uxth	r2, r2
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	3301      	adds	r3, #1
 80049fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1cb      	bne.n	80049b6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2200      	movs	r2, #0
 8004a26:	2140      	movs	r1, #64	; 0x40
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fbd8 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e005      	b.n	8004a44 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af02      	add	r7, sp, #8
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	f040 80bf 	bne.w	8004be4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_UART_Receive+0x26>
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0b7      	b.n	8004be6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_UART_Receive+0x38>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e0b0      	b.n	8004be6 <HAL_UART_Receive+0x19a>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2222      	movs	r2, #34	; 0x22
 8004a98:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004aa0:	f7fd fa9c 	bl	8001fdc <HAL_GetTick>
 8004aa4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	d10e      	bne.n	8004ade <HAL_UART_Receive+0x92>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_UART_Receive+0x88>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ace:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004ad2:	e02d      	b.n	8004b30 <HAL_UART_Receive+0xe4>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	22ff      	movs	r2, #255	; 0xff
 8004ad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004adc:	e028      	b.n	8004b30 <HAL_UART_Receive+0xe4>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <HAL_UART_Receive+0xb6>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d104      	bne.n	8004af8 <HAL_UART_Receive+0xac>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004af6:	e01b      	b.n	8004b30 <HAL_UART_Receive+0xe4>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	227f      	movs	r2, #127	; 0x7f
 8004afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b00:	e016      	b.n	8004b30 <HAL_UART_Receive+0xe4>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0a:	d10d      	bne.n	8004b28 <HAL_UART_Receive+0xdc>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <HAL_UART_Receive+0xd2>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	227f      	movs	r2, #127	; 0x7f
 8004b18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b1c:	e008      	b.n	8004b30 <HAL_UART_Receive+0xe4>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	223f      	movs	r2, #63	; 0x3f
 8004b22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b26:	e003      	b.n	8004b30 <HAL_UART_Receive+0xe4>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004b36:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b40:	d108      	bne.n	8004b54 <HAL_UART_Receive+0x108>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	e003      	b.n	8004b5c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004b64:	e033      	b.n	8004bce <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2120      	movs	r1, #32
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fb34 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e032      	b.n	8004be6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10c      	bne.n	8004ba0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	8a7b      	ldrh	r3, [r7, #18]
 8004b90:	4013      	ands	r3, r2
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	e00d      	b.n	8004bbc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	8a7b      	ldrh	r3, [r7, #18]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	4013      	ands	r3, r2
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1c5      	bne.n	8004b66 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	e000      	b.n	8004be6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8004be4:	2302      	movs	r3, #2
  }
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	b5b0      	push	{r4, r5, r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4baf      	ldr	r3, [pc, #700]	; (8004ed8 <UART_SetConfig+0x2e8>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	69f9      	ldr	r1, [r7, #28]
 8004c24:	430b      	orrs	r3, r1
 8004c26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4aa4      	ldr	r2, [pc, #656]	; (8004edc <UART_SetConfig+0x2ec>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a9b      	ldr	r2, [pc, #620]	; (8004ee0 <UART_SetConfig+0x2f0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d121      	bne.n	8004cba <UART_SetConfig+0xca>
 8004c76:	4b9b      	ldr	r3, [pc, #620]	; (8004ee4 <UART_SetConfig+0x2f4>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d817      	bhi.n	8004cb4 <UART_SetConfig+0xc4>
 8004c84:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <UART_SetConfig+0x9c>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004c9d 	.word	0x08004c9d
 8004c90:	08004ca9 	.word	0x08004ca9
 8004c94:	08004ca3 	.word	0x08004ca3
 8004c98:	08004caf 	.word	0x08004caf
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	76fb      	strb	r3, [r7, #27]
 8004ca0:	e070      	b.n	8004d84 <UART_SetConfig+0x194>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	76fb      	strb	r3, [r7, #27]
 8004ca6:	e06d      	b.n	8004d84 <UART_SetConfig+0x194>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	76fb      	strb	r3, [r7, #27]
 8004cac:	e06a      	b.n	8004d84 <UART_SetConfig+0x194>
 8004cae:	2308      	movs	r3, #8
 8004cb0:	76fb      	strb	r3, [r7, #27]
 8004cb2:	e067      	b.n	8004d84 <UART_SetConfig+0x194>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	76fb      	strb	r3, [r7, #27]
 8004cb8:	e064      	b.n	8004d84 <UART_SetConfig+0x194>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a8a      	ldr	r2, [pc, #552]	; (8004ee8 <UART_SetConfig+0x2f8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d132      	bne.n	8004d2a <UART_SetConfig+0x13a>
 8004cc4:	4b87      	ldr	r3, [pc, #540]	; (8004ee4 <UART_SetConfig+0x2f4>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d828      	bhi.n	8004d24 <UART_SetConfig+0x134>
 8004cd2:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <UART_SetConfig+0xe8>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004d0d 	.word	0x08004d0d
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004d25 	.word	0x08004d25
 8004ce4:	08004d25 	.word	0x08004d25
 8004ce8:	08004d19 	.word	0x08004d19
 8004cec:	08004d25 	.word	0x08004d25
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d25 	.word	0x08004d25
 8004cf8:	08004d13 	.word	0x08004d13
 8004cfc:	08004d25 	.word	0x08004d25
 8004d00:	08004d25 	.word	0x08004d25
 8004d04:	08004d25 	.word	0x08004d25
 8004d08:	08004d1f 	.word	0x08004d1f
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	76fb      	strb	r3, [r7, #27]
 8004d10:	e038      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d12:	2302      	movs	r3, #2
 8004d14:	76fb      	strb	r3, [r7, #27]
 8004d16:	e035      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	76fb      	strb	r3, [r7, #27]
 8004d1c:	e032      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d1e:	2308      	movs	r3, #8
 8004d20:	76fb      	strb	r3, [r7, #27]
 8004d22:	e02f      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d24:	2310      	movs	r3, #16
 8004d26:	76fb      	strb	r3, [r7, #27]
 8004d28:	e02c      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6b      	ldr	r2, [pc, #428]	; (8004edc <UART_SetConfig+0x2ec>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d125      	bne.n	8004d80 <UART_SetConfig+0x190>
 8004d34:	4b6b      	ldr	r3, [pc, #428]	; (8004ee4 <UART_SetConfig+0x2f4>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d42:	d017      	beq.n	8004d74 <UART_SetConfig+0x184>
 8004d44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d48:	d817      	bhi.n	8004d7a <UART_SetConfig+0x18a>
 8004d4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d4e:	d00b      	beq.n	8004d68 <UART_SetConfig+0x178>
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d54:	d811      	bhi.n	8004d7a <UART_SetConfig+0x18a>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <UART_SetConfig+0x172>
 8004d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5e:	d006      	beq.n	8004d6e <UART_SetConfig+0x17e>
 8004d60:	e00b      	b.n	8004d7a <UART_SetConfig+0x18a>
 8004d62:	2300      	movs	r3, #0
 8004d64:	76fb      	strb	r3, [r7, #27]
 8004d66:	e00d      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	76fb      	strb	r3, [r7, #27]
 8004d6c:	e00a      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d6e:	2304      	movs	r3, #4
 8004d70:	76fb      	strb	r3, [r7, #27]
 8004d72:	e007      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d74:	2308      	movs	r3, #8
 8004d76:	76fb      	strb	r3, [r7, #27]
 8004d78:	e004      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d7a:	2310      	movs	r3, #16
 8004d7c:	76fb      	strb	r3, [r7, #27]
 8004d7e:	e001      	b.n	8004d84 <UART_SetConfig+0x194>
 8004d80:	2310      	movs	r3, #16
 8004d82:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a54      	ldr	r2, [pc, #336]	; (8004edc <UART_SetConfig+0x2ec>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d173      	bne.n	8004e76 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d8e:	7efb      	ldrb	r3, [r7, #27]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d824      	bhi.n	8004dde <UART_SetConfig+0x1ee>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x1ac>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004ddf 	.word	0x08004ddf
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004dcf 	.word	0x08004dcf
 8004db0:	08004ddf 	.word	0x08004ddf
 8004db4:	08004ddf 	.word	0x08004ddf
 8004db8:	08004ddf 	.word	0x08004ddf
 8004dbc:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fe fefa 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	6178      	str	r0, [r7, #20]
        break;
 8004dc6:	e00f      	b.n	8004de8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b48      	ldr	r3, [pc, #288]	; (8004eec <UART_SetConfig+0x2fc>)
 8004dca:	617b      	str	r3, [r7, #20]
        break;
 8004dcc:	e00c      	b.n	8004de8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fe fe5b 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8004dd2:	6178      	str	r0, [r7, #20]
        break;
 8004dd4:	e008      	b.n	8004de8 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dda:	617b      	str	r3, [r7, #20]
        break;
 8004ddc:	e004      	b.n	8004de8 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	76bb      	strb	r3, [r7, #26]
        break;
 8004de6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80fe 	beq.w	8004fec <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d305      	bcc.n	8004e0c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d902      	bls.n	8004e12 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	76bb      	strb	r3, [r7, #26]
 8004e10:	e0ec      	b.n	8004fec <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	020b      	lsls	r3, r1, #8
 8004e24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e28:	0202      	lsls	r2, r0, #8
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	6849      	ldr	r1, [r1, #4]
 8004e2e:	0849      	lsrs	r1, r1, #1
 8004e30:	4608      	mov	r0, r1
 8004e32:	f04f 0100 	mov.w	r1, #0
 8004e36:	1814      	adds	r4, r2, r0
 8004e38:	eb43 0501 	adc.w	r5, r3, r1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	461a      	mov	r2, r3
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	4620      	mov	r0, r4
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f7fb feb7 	bl	8000bbc <__aeabi_uldivmod>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4613      	mov	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d308      	bcc.n	8004e70 <UART_SetConfig+0x280>
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e64:	d204      	bcs.n	8004e70 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	e0bd      	b.n	8004fec <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	76bb      	strb	r3, [r7, #26]
 8004e74:	e0ba      	b.n	8004fec <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7e:	d168      	bne.n	8004f52 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8004e80:	7efb      	ldrb	r3, [r7, #27]
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d834      	bhi.n	8004ef0 <UART_SetConfig+0x300>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <UART_SetConfig+0x29c>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb9 	.word	0x08004eb9
 8004e94:	08004ec1 	.word	0x08004ec1
 8004e98:	08004ef1 	.word	0x08004ef1
 8004e9c:	08004ec7 	.word	0x08004ec7
 8004ea0:	08004ef1 	.word	0x08004ef1
 8004ea4:	08004ef1 	.word	0x08004ef1
 8004ea8:	08004ef1 	.word	0x08004ef1
 8004eac:	08004ecf 	.word	0x08004ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7fe fe82 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8004eb4:	6178      	str	r0, [r7, #20]
        break;
 8004eb6:	e020      	b.n	8004efa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb8:	f7fe fe94 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8004ebc:	6178      	str	r0, [r7, #20]
        break;
 8004ebe:	e01c      	b.n	8004efa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <UART_SetConfig+0x2fc>)
 8004ec2:	617b      	str	r3, [r7, #20]
        break;
 8004ec4:	e019      	b.n	8004efa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec6:	f7fe fddf 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8004eca:	6178      	str	r0, [r7, #20]
        break;
 8004ecc:	e015      	b.n	8004efa <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ed2:	617b      	str	r3, [r7, #20]
        break;
 8004ed4:	e011      	b.n	8004efa <UART_SetConfig+0x30a>
 8004ed6:	bf00      	nop
 8004ed8:	efff69f3 	.word	0xefff69f3
 8004edc:	40008000 	.word	0x40008000
 8004ee0:	40013800 	.word	0x40013800
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40004400 	.word	0x40004400
 8004eec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	76bb      	strb	r3, [r7, #26]
        break;
 8004ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d075      	beq.n	8004fec <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	005a      	lsls	r2, r3, #1
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	441a      	add	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b0f      	cmp	r3, #15
 8004f1c:	d916      	bls.n	8004f4c <UART_SetConfig+0x35c>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f24:	d212      	bcs.n	8004f4c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f023 030f 	bic.w	r3, r3, #15
 8004f2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	89fb      	ldrh	r3, [r7, #14]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	89fa      	ldrh	r2, [r7, #14]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	e04f      	b.n	8004fec <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	76bb      	strb	r3, [r7, #26]
 8004f50:	e04c      	b.n	8004fec <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f52:	7efb      	ldrb	r3, [r7, #27]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d828      	bhi.n	8004faa <UART_SetConfig+0x3ba>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <UART_SetConfig+0x370>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004fab 	.word	0x08004fab
 8004f78:	08004fab 	.word	0x08004fab
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fe fe18 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8004f88:	6178      	str	r0, [r7, #20]
        break;
 8004f8a:	e013      	b.n	8004fb4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7fe fe2a 	bl	8003be4 <HAL_RCC_GetPCLK2Freq>
 8004f90:	6178      	str	r0, [r7, #20]
        break;
 8004f92:	e00f      	b.n	8004fb4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b1b      	ldr	r3, [pc, #108]	; (8005004 <UART_SetConfig+0x414>)
 8004f96:	617b      	str	r3, [r7, #20]
        break;
 8004f98:	e00c      	b.n	8004fb4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7fe fd75 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8004f9e:	6178      	str	r0, [r7, #20]
        break;
 8004fa0:	e008      	b.n	8004fb4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa6:	617b      	str	r3, [r7, #20]
        break;
 8004fa8:	e004      	b.n	8004fb4 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	76bb      	strb	r3, [r7, #26]
        break;
 8004fb2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d018      	beq.n	8004fec <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	085a      	lsrs	r2, r3, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d908      	bls.n	8004fe8 <UART_SetConfig+0x3f8>
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d204      	bcs.n	8004fe8 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e001      	b.n	8004fec <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ff8:	7ebb      	ldrb	r3, [r7, #26]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bdb0      	pop	{r4, r5, r7, pc}
 8005002:	bf00      	nop
 8005004:	00f42400 	.word	0x00f42400

08005008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005106:	d10a      	bne.n	800511e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800515c:	f7fc ff3e 	bl	8001fdc <HAL_GetTick>
 8005160:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d10e      	bne.n	800518e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f82d 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e023      	b.n	80051d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b04      	cmp	r3, #4
 800519a:	d10e      	bne.n	80051ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f817 	bl	80051de <UART_WaitOnFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e00d      	b.n	80051d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	603b      	str	r3, [r7, #0]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ee:	e05e      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f6:	d05a      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f8:	f7fc fef0 	bl	8001fdc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	429a      	cmp	r2, r3
 8005206:	d302      	bcc.n	800520e <UART_WaitOnFlagUntilTimeout+0x30>
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d11b      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800521c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e043      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d02c      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005262:	d124      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800527c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e00f      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d091      	beq.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <__errno>:
 80052d8:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <__errno+0x8>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	200000d4 	.word	0x200000d4

080052e4 <getchar>:
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <getchar+0x20>)
 80052e6:	b510      	push	{r4, lr}
 80052e8:	681c      	ldr	r4, [r3, #0]
 80052ea:	b124      	cbz	r4, 80052f6 <getchar+0x12>
 80052ec:	69a3      	ldr	r3, [r4, #24]
 80052ee:	b913      	cbnz	r3, 80052f6 <getchar+0x12>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 facf 	bl	8005894 <__sinit>
 80052f6:	6861      	ldr	r1, [r4, #4]
 80052f8:	4620      	mov	r0, r4
 80052fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052fe:	f000 bb83 	b.w	8005a08 <_getc_r>
 8005302:	bf00      	nop
 8005304:	200000d4 	.word	0x200000d4

08005308 <__libc_init_array>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	4d0d      	ldr	r5, [pc, #52]	; (8005340 <__libc_init_array+0x38>)
 800530c:	4c0d      	ldr	r4, [pc, #52]	; (8005344 <__libc_init_array+0x3c>)
 800530e:	1b64      	subs	r4, r4, r5
 8005310:	10a4      	asrs	r4, r4, #2
 8005312:	2600      	movs	r6, #0
 8005314:	42a6      	cmp	r6, r4
 8005316:	d109      	bne.n	800532c <__libc_init_array+0x24>
 8005318:	4d0b      	ldr	r5, [pc, #44]	; (8005348 <__libc_init_array+0x40>)
 800531a:	4c0c      	ldr	r4, [pc, #48]	; (800534c <__libc_init_array+0x44>)
 800531c:	f002 fb26 	bl	800796c <_init>
 8005320:	1b64      	subs	r4, r4, r5
 8005322:	10a4      	asrs	r4, r4, #2
 8005324:	2600      	movs	r6, #0
 8005326:	42a6      	cmp	r6, r4
 8005328:	d105      	bne.n	8005336 <__libc_init_array+0x2e>
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005330:	4798      	blx	r3
 8005332:	3601      	adds	r6, #1
 8005334:	e7ee      	b.n	8005314 <__libc_init_array+0xc>
 8005336:	f855 3b04 	ldr.w	r3, [r5], #4
 800533a:	4798      	blx	r3
 800533c:	3601      	adds	r6, #1
 800533e:	e7f2      	b.n	8005326 <__libc_init_array+0x1e>
 8005340:	08007de0 	.word	0x08007de0
 8005344:	08007de0 	.word	0x08007de0
 8005348:	08007de0 	.word	0x08007de0
 800534c:	08007de4 	.word	0x08007de4

08005350 <memset>:
 8005350:	4402      	add	r2, r0
 8005352:	4603      	mov	r3, r0
 8005354:	4293      	cmp	r3, r2
 8005356:	d100      	bne.n	800535a <memset+0xa>
 8005358:	4770      	bx	lr
 800535a:	f803 1b01 	strb.w	r1, [r3], #1
 800535e:	e7f9      	b.n	8005354 <memset+0x4>

08005360 <iprintf>:
 8005360:	b40f      	push	{r0, r1, r2, r3}
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <iprintf+0x2c>)
 8005364:	b513      	push	{r0, r1, r4, lr}
 8005366:	681c      	ldr	r4, [r3, #0]
 8005368:	b124      	cbz	r4, 8005374 <iprintf+0x14>
 800536a:	69a3      	ldr	r3, [r4, #24]
 800536c:	b913      	cbnz	r3, 8005374 <iprintf+0x14>
 800536e:	4620      	mov	r0, r4
 8005370:	f000 fa90 	bl	8005894 <__sinit>
 8005374:	ab05      	add	r3, sp, #20
 8005376:	9a04      	ldr	r2, [sp, #16]
 8005378:	68a1      	ldr	r1, [r4, #8]
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	4620      	mov	r0, r4
 800537e:	f000 fe1b 	bl	8005fb8 <_vfiprintf_r>
 8005382:	b002      	add	sp, #8
 8005384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005388:	b004      	add	sp, #16
 800538a:	4770      	bx	lr
 800538c:	200000d4 	.word	0x200000d4

08005390 <_puts_r>:
 8005390:	b570      	push	{r4, r5, r6, lr}
 8005392:	460e      	mov	r6, r1
 8005394:	4605      	mov	r5, r0
 8005396:	b118      	cbz	r0, 80053a0 <_puts_r+0x10>
 8005398:	6983      	ldr	r3, [r0, #24]
 800539a:	b90b      	cbnz	r3, 80053a0 <_puts_r+0x10>
 800539c:	f000 fa7a 	bl	8005894 <__sinit>
 80053a0:	69ab      	ldr	r3, [r5, #24]
 80053a2:	68ac      	ldr	r4, [r5, #8]
 80053a4:	b913      	cbnz	r3, 80053ac <_puts_r+0x1c>
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 fa74 	bl	8005894 <__sinit>
 80053ac:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <_puts_r+0xd0>)
 80053ae:	429c      	cmp	r4, r3
 80053b0:	d120      	bne.n	80053f4 <_puts_r+0x64>
 80053b2:	686c      	ldr	r4, [r5, #4]
 80053b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053b6:	07db      	lsls	r3, r3, #31
 80053b8:	d405      	bmi.n	80053c6 <_puts_r+0x36>
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	0598      	lsls	r0, r3, #22
 80053be:	d402      	bmi.n	80053c6 <_puts_r+0x36>
 80053c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053c2:	f000 fb62 	bl	8005a8a <__retarget_lock_acquire_recursive>
 80053c6:	89a3      	ldrh	r3, [r4, #12]
 80053c8:	0719      	lsls	r1, r3, #28
 80053ca:	d51d      	bpl.n	8005408 <_puts_r+0x78>
 80053cc:	6923      	ldr	r3, [r4, #16]
 80053ce:	b1db      	cbz	r3, 8005408 <_puts_r+0x78>
 80053d0:	3e01      	subs	r6, #1
 80053d2:	68a3      	ldr	r3, [r4, #8]
 80053d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053d8:	3b01      	subs	r3, #1
 80053da:	60a3      	str	r3, [r4, #8]
 80053dc:	bb39      	cbnz	r1, 800542e <_puts_r+0x9e>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	da38      	bge.n	8005454 <_puts_r+0xc4>
 80053e2:	4622      	mov	r2, r4
 80053e4:	210a      	movs	r1, #10
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f868 	bl	80054bc <__swbuf_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d011      	beq.n	8005414 <_puts_r+0x84>
 80053f0:	250a      	movs	r5, #10
 80053f2:	e011      	b.n	8005418 <_puts_r+0x88>
 80053f4:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <_puts_r+0xd4>)
 80053f6:	429c      	cmp	r4, r3
 80053f8:	d101      	bne.n	80053fe <_puts_r+0x6e>
 80053fa:	68ac      	ldr	r4, [r5, #8]
 80053fc:	e7da      	b.n	80053b4 <_puts_r+0x24>
 80053fe:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <_puts_r+0xd8>)
 8005400:	429c      	cmp	r4, r3
 8005402:	bf08      	it	eq
 8005404:	68ec      	ldreq	r4, [r5, #12]
 8005406:	e7d5      	b.n	80053b4 <_puts_r+0x24>
 8005408:	4621      	mov	r1, r4
 800540a:	4628      	mov	r0, r5
 800540c:	f000 f8a8 	bl	8005560 <__swsetup_r>
 8005410:	2800      	cmp	r0, #0
 8005412:	d0dd      	beq.n	80053d0 <_puts_r+0x40>
 8005414:	f04f 35ff 	mov.w	r5, #4294967295
 8005418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800541a:	07da      	lsls	r2, r3, #31
 800541c:	d405      	bmi.n	800542a <_puts_r+0x9a>
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	059b      	lsls	r3, r3, #22
 8005422:	d402      	bmi.n	800542a <_puts_r+0x9a>
 8005424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005426:	f000 fb31 	bl	8005a8c <__retarget_lock_release_recursive>
 800542a:	4628      	mov	r0, r5
 800542c:	bd70      	pop	{r4, r5, r6, pc}
 800542e:	2b00      	cmp	r3, #0
 8005430:	da04      	bge.n	800543c <_puts_r+0xac>
 8005432:	69a2      	ldr	r2, [r4, #24]
 8005434:	429a      	cmp	r2, r3
 8005436:	dc06      	bgt.n	8005446 <_puts_r+0xb6>
 8005438:	290a      	cmp	r1, #10
 800543a:	d004      	beq.n	8005446 <_puts_r+0xb6>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	6022      	str	r2, [r4, #0]
 8005442:	7019      	strb	r1, [r3, #0]
 8005444:	e7c5      	b.n	80053d2 <_puts_r+0x42>
 8005446:	4622      	mov	r2, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f000 f837 	bl	80054bc <__swbuf_r>
 800544e:	3001      	adds	r0, #1
 8005450:	d1bf      	bne.n	80053d2 <_puts_r+0x42>
 8005452:	e7df      	b.n	8005414 <_puts_r+0x84>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	250a      	movs	r5, #10
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	6022      	str	r2, [r4, #0]
 800545c:	701d      	strb	r5, [r3, #0]
 800545e:	e7db      	b.n	8005418 <_puts_r+0x88>
 8005460:	08007b8c 	.word	0x08007b8c
 8005464:	08007bac 	.word	0x08007bac
 8005468:	08007b6c 	.word	0x08007b6c

0800546c <puts>:
 800546c:	4b02      	ldr	r3, [pc, #8]	; (8005478 <puts+0xc>)
 800546e:	4601      	mov	r1, r0
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	f7ff bf8d 	b.w	8005390 <_puts_r>
 8005476:	bf00      	nop
 8005478:	200000d4 	.word	0x200000d4

0800547c <siprintf>:
 800547c:	b40e      	push	{r1, r2, r3}
 800547e:	b500      	push	{lr}
 8005480:	b09c      	sub	sp, #112	; 0x70
 8005482:	ab1d      	add	r3, sp, #116	; 0x74
 8005484:	9002      	str	r0, [sp, #8]
 8005486:	9006      	str	r0, [sp, #24]
 8005488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800548c:	4809      	ldr	r0, [pc, #36]	; (80054b4 <siprintf+0x38>)
 800548e:	9107      	str	r1, [sp, #28]
 8005490:	9104      	str	r1, [sp, #16]
 8005492:	4909      	ldr	r1, [pc, #36]	; (80054b8 <siprintf+0x3c>)
 8005494:	f853 2b04 	ldr.w	r2, [r3], #4
 8005498:	9105      	str	r1, [sp, #20]
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	a902      	add	r1, sp, #8
 80054a0:	f000 fc60 	bl	8005d64 <_svfiprintf_r>
 80054a4:	9b02      	ldr	r3, [sp, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	b01c      	add	sp, #112	; 0x70
 80054ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80054b0:	b003      	add	sp, #12
 80054b2:	4770      	bx	lr
 80054b4:	200000d4 	.word	0x200000d4
 80054b8:	ffff0208 	.word	0xffff0208

080054bc <__swbuf_r>:
 80054bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054be:	460e      	mov	r6, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	4605      	mov	r5, r0
 80054c4:	b118      	cbz	r0, 80054ce <__swbuf_r+0x12>
 80054c6:	6983      	ldr	r3, [r0, #24]
 80054c8:	b90b      	cbnz	r3, 80054ce <__swbuf_r+0x12>
 80054ca:	f000 f9e3 	bl	8005894 <__sinit>
 80054ce:	4b21      	ldr	r3, [pc, #132]	; (8005554 <__swbuf_r+0x98>)
 80054d0:	429c      	cmp	r4, r3
 80054d2:	d12b      	bne.n	800552c <__swbuf_r+0x70>
 80054d4:	686c      	ldr	r4, [r5, #4]
 80054d6:	69a3      	ldr	r3, [r4, #24]
 80054d8:	60a3      	str	r3, [r4, #8]
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	071a      	lsls	r2, r3, #28
 80054de:	d52f      	bpl.n	8005540 <__swbuf_r+0x84>
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	b36b      	cbz	r3, 8005540 <__swbuf_r+0x84>
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	6820      	ldr	r0, [r4, #0]
 80054e8:	1ac0      	subs	r0, r0, r3
 80054ea:	6963      	ldr	r3, [r4, #20]
 80054ec:	b2f6      	uxtb	r6, r6
 80054ee:	4283      	cmp	r3, r0
 80054f0:	4637      	mov	r7, r6
 80054f2:	dc04      	bgt.n	80054fe <__swbuf_r+0x42>
 80054f4:	4621      	mov	r1, r4
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 f926 	bl	8005748 <_fflush_r>
 80054fc:	bb30      	cbnz	r0, 800554c <__swbuf_r+0x90>
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	3b01      	subs	r3, #1
 8005502:	60a3      	str	r3, [r4, #8]
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	6022      	str	r2, [r4, #0]
 800550a:	701e      	strb	r6, [r3, #0]
 800550c:	6963      	ldr	r3, [r4, #20]
 800550e:	3001      	adds	r0, #1
 8005510:	4283      	cmp	r3, r0
 8005512:	d004      	beq.n	800551e <__swbuf_r+0x62>
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	07db      	lsls	r3, r3, #31
 8005518:	d506      	bpl.n	8005528 <__swbuf_r+0x6c>
 800551a:	2e0a      	cmp	r6, #10
 800551c:	d104      	bne.n	8005528 <__swbuf_r+0x6c>
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 f911 	bl	8005748 <_fflush_r>
 8005526:	b988      	cbnz	r0, 800554c <__swbuf_r+0x90>
 8005528:	4638      	mov	r0, r7
 800552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800552c:	4b0a      	ldr	r3, [pc, #40]	; (8005558 <__swbuf_r+0x9c>)
 800552e:	429c      	cmp	r4, r3
 8005530:	d101      	bne.n	8005536 <__swbuf_r+0x7a>
 8005532:	68ac      	ldr	r4, [r5, #8]
 8005534:	e7cf      	b.n	80054d6 <__swbuf_r+0x1a>
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <__swbuf_r+0xa0>)
 8005538:	429c      	cmp	r4, r3
 800553a:	bf08      	it	eq
 800553c:	68ec      	ldreq	r4, [r5, #12]
 800553e:	e7ca      	b.n	80054d6 <__swbuf_r+0x1a>
 8005540:	4621      	mov	r1, r4
 8005542:	4628      	mov	r0, r5
 8005544:	f000 f80c 	bl	8005560 <__swsetup_r>
 8005548:	2800      	cmp	r0, #0
 800554a:	d0cb      	beq.n	80054e4 <__swbuf_r+0x28>
 800554c:	f04f 37ff 	mov.w	r7, #4294967295
 8005550:	e7ea      	b.n	8005528 <__swbuf_r+0x6c>
 8005552:	bf00      	nop
 8005554:	08007b8c 	.word	0x08007b8c
 8005558:	08007bac 	.word	0x08007bac
 800555c:	08007b6c 	.word	0x08007b6c

08005560 <__swsetup_r>:
 8005560:	4b32      	ldr	r3, [pc, #200]	; (800562c <__swsetup_r+0xcc>)
 8005562:	b570      	push	{r4, r5, r6, lr}
 8005564:	681d      	ldr	r5, [r3, #0]
 8005566:	4606      	mov	r6, r0
 8005568:	460c      	mov	r4, r1
 800556a:	b125      	cbz	r5, 8005576 <__swsetup_r+0x16>
 800556c:	69ab      	ldr	r3, [r5, #24]
 800556e:	b913      	cbnz	r3, 8005576 <__swsetup_r+0x16>
 8005570:	4628      	mov	r0, r5
 8005572:	f000 f98f 	bl	8005894 <__sinit>
 8005576:	4b2e      	ldr	r3, [pc, #184]	; (8005630 <__swsetup_r+0xd0>)
 8005578:	429c      	cmp	r4, r3
 800557a:	d10f      	bne.n	800559c <__swsetup_r+0x3c>
 800557c:	686c      	ldr	r4, [r5, #4]
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005584:	0719      	lsls	r1, r3, #28
 8005586:	d42c      	bmi.n	80055e2 <__swsetup_r+0x82>
 8005588:	06dd      	lsls	r5, r3, #27
 800558a:	d411      	bmi.n	80055b0 <__swsetup_r+0x50>
 800558c:	2309      	movs	r3, #9
 800558e:	6033      	str	r3, [r6, #0]
 8005590:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	f04f 30ff 	mov.w	r0, #4294967295
 800559a:	e03e      	b.n	800561a <__swsetup_r+0xba>
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <__swsetup_r+0xd4>)
 800559e:	429c      	cmp	r4, r3
 80055a0:	d101      	bne.n	80055a6 <__swsetup_r+0x46>
 80055a2:	68ac      	ldr	r4, [r5, #8]
 80055a4:	e7eb      	b.n	800557e <__swsetup_r+0x1e>
 80055a6:	4b24      	ldr	r3, [pc, #144]	; (8005638 <__swsetup_r+0xd8>)
 80055a8:	429c      	cmp	r4, r3
 80055aa:	bf08      	it	eq
 80055ac:	68ec      	ldreq	r4, [r5, #12]
 80055ae:	e7e6      	b.n	800557e <__swsetup_r+0x1e>
 80055b0:	0758      	lsls	r0, r3, #29
 80055b2:	d512      	bpl.n	80055da <__swsetup_r+0x7a>
 80055b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055b6:	b141      	cbz	r1, 80055ca <__swsetup_r+0x6a>
 80055b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055bc:	4299      	cmp	r1, r3
 80055be:	d002      	beq.n	80055c6 <__swsetup_r+0x66>
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 fac9 	bl	8005b58 <_free_r>
 80055c6:	2300      	movs	r3, #0
 80055c8:	6363      	str	r3, [r4, #52]	; 0x34
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	2300      	movs	r3, #0
 80055d4:	6063      	str	r3, [r4, #4]
 80055d6:	6923      	ldr	r3, [r4, #16]
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	89a3      	ldrh	r3, [r4, #12]
 80055dc:	f043 0308 	orr.w	r3, r3, #8
 80055e0:	81a3      	strh	r3, [r4, #12]
 80055e2:	6923      	ldr	r3, [r4, #16]
 80055e4:	b94b      	cbnz	r3, 80055fa <__swsetup_r+0x9a>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f0:	d003      	beq.n	80055fa <__swsetup_r+0x9a>
 80055f2:	4621      	mov	r1, r4
 80055f4:	4630      	mov	r0, r6
 80055f6:	f000 fa6f 	bl	8005ad8 <__smakebuf_r>
 80055fa:	89a0      	ldrh	r0, [r4, #12]
 80055fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005600:	f010 0301 	ands.w	r3, r0, #1
 8005604:	d00a      	beq.n	800561c <__swsetup_r+0xbc>
 8005606:	2300      	movs	r3, #0
 8005608:	60a3      	str	r3, [r4, #8]
 800560a:	6963      	ldr	r3, [r4, #20]
 800560c:	425b      	negs	r3, r3
 800560e:	61a3      	str	r3, [r4, #24]
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	b943      	cbnz	r3, 8005626 <__swsetup_r+0xc6>
 8005614:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005618:	d1ba      	bne.n	8005590 <__swsetup_r+0x30>
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	0781      	lsls	r1, r0, #30
 800561e:	bf58      	it	pl
 8005620:	6963      	ldrpl	r3, [r4, #20]
 8005622:	60a3      	str	r3, [r4, #8]
 8005624:	e7f4      	b.n	8005610 <__swsetup_r+0xb0>
 8005626:	2000      	movs	r0, #0
 8005628:	e7f7      	b.n	800561a <__swsetup_r+0xba>
 800562a:	bf00      	nop
 800562c:	200000d4 	.word	0x200000d4
 8005630:	08007b8c 	.word	0x08007b8c
 8005634:	08007bac 	.word	0x08007bac
 8005638:	08007b6c 	.word	0x08007b6c

0800563c <__sflush_r>:
 800563c:	898a      	ldrh	r2, [r1, #12]
 800563e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005642:	4605      	mov	r5, r0
 8005644:	0710      	lsls	r0, r2, #28
 8005646:	460c      	mov	r4, r1
 8005648:	d458      	bmi.n	80056fc <__sflush_r+0xc0>
 800564a:	684b      	ldr	r3, [r1, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dc05      	bgt.n	800565c <__sflush_r+0x20>
 8005650:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005652:	2b00      	cmp	r3, #0
 8005654:	dc02      	bgt.n	800565c <__sflush_r+0x20>
 8005656:	2000      	movs	r0, #0
 8005658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800565e:	2e00      	cmp	r6, #0
 8005660:	d0f9      	beq.n	8005656 <__sflush_r+0x1a>
 8005662:	2300      	movs	r3, #0
 8005664:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005668:	682f      	ldr	r7, [r5, #0]
 800566a:	602b      	str	r3, [r5, #0]
 800566c:	d032      	beq.n	80056d4 <__sflush_r+0x98>
 800566e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005670:	89a3      	ldrh	r3, [r4, #12]
 8005672:	075a      	lsls	r2, r3, #29
 8005674:	d505      	bpl.n	8005682 <__sflush_r+0x46>
 8005676:	6863      	ldr	r3, [r4, #4]
 8005678:	1ac0      	subs	r0, r0, r3
 800567a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800567c:	b10b      	cbz	r3, 8005682 <__sflush_r+0x46>
 800567e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005680:	1ac0      	subs	r0, r0, r3
 8005682:	2300      	movs	r3, #0
 8005684:	4602      	mov	r2, r0
 8005686:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005688:	6a21      	ldr	r1, [r4, #32]
 800568a:	4628      	mov	r0, r5
 800568c:	47b0      	blx	r6
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	d106      	bne.n	80056a2 <__sflush_r+0x66>
 8005694:	6829      	ldr	r1, [r5, #0]
 8005696:	291d      	cmp	r1, #29
 8005698:	d82c      	bhi.n	80056f4 <__sflush_r+0xb8>
 800569a:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <__sflush_r+0x108>)
 800569c:	40ca      	lsrs	r2, r1
 800569e:	07d6      	lsls	r6, r2, #31
 80056a0:	d528      	bpl.n	80056f4 <__sflush_r+0xb8>
 80056a2:	2200      	movs	r2, #0
 80056a4:	6062      	str	r2, [r4, #4]
 80056a6:	04d9      	lsls	r1, r3, #19
 80056a8:	6922      	ldr	r2, [r4, #16]
 80056aa:	6022      	str	r2, [r4, #0]
 80056ac:	d504      	bpl.n	80056b8 <__sflush_r+0x7c>
 80056ae:	1c42      	adds	r2, r0, #1
 80056b0:	d101      	bne.n	80056b6 <__sflush_r+0x7a>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	b903      	cbnz	r3, 80056b8 <__sflush_r+0x7c>
 80056b6:	6560      	str	r0, [r4, #84]	; 0x54
 80056b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ba:	602f      	str	r7, [r5, #0]
 80056bc:	2900      	cmp	r1, #0
 80056be:	d0ca      	beq.n	8005656 <__sflush_r+0x1a>
 80056c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056c4:	4299      	cmp	r1, r3
 80056c6:	d002      	beq.n	80056ce <__sflush_r+0x92>
 80056c8:	4628      	mov	r0, r5
 80056ca:	f000 fa45 	bl	8005b58 <_free_r>
 80056ce:	2000      	movs	r0, #0
 80056d0:	6360      	str	r0, [r4, #52]	; 0x34
 80056d2:	e7c1      	b.n	8005658 <__sflush_r+0x1c>
 80056d4:	6a21      	ldr	r1, [r4, #32]
 80056d6:	2301      	movs	r3, #1
 80056d8:	4628      	mov	r0, r5
 80056da:	47b0      	blx	r6
 80056dc:	1c41      	adds	r1, r0, #1
 80056de:	d1c7      	bne.n	8005670 <__sflush_r+0x34>
 80056e0:	682b      	ldr	r3, [r5, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0c4      	beq.n	8005670 <__sflush_r+0x34>
 80056e6:	2b1d      	cmp	r3, #29
 80056e8:	d001      	beq.n	80056ee <__sflush_r+0xb2>
 80056ea:	2b16      	cmp	r3, #22
 80056ec:	d101      	bne.n	80056f2 <__sflush_r+0xb6>
 80056ee:	602f      	str	r7, [r5, #0]
 80056f0:	e7b1      	b.n	8005656 <__sflush_r+0x1a>
 80056f2:	89a3      	ldrh	r3, [r4, #12]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f8:	81a3      	strh	r3, [r4, #12]
 80056fa:	e7ad      	b.n	8005658 <__sflush_r+0x1c>
 80056fc:	690f      	ldr	r7, [r1, #16]
 80056fe:	2f00      	cmp	r7, #0
 8005700:	d0a9      	beq.n	8005656 <__sflush_r+0x1a>
 8005702:	0793      	lsls	r3, r2, #30
 8005704:	680e      	ldr	r6, [r1, #0]
 8005706:	bf08      	it	eq
 8005708:	694b      	ldreq	r3, [r1, #20]
 800570a:	600f      	str	r7, [r1, #0]
 800570c:	bf18      	it	ne
 800570e:	2300      	movne	r3, #0
 8005710:	eba6 0807 	sub.w	r8, r6, r7
 8005714:	608b      	str	r3, [r1, #8]
 8005716:	f1b8 0f00 	cmp.w	r8, #0
 800571a:	dd9c      	ble.n	8005656 <__sflush_r+0x1a>
 800571c:	6a21      	ldr	r1, [r4, #32]
 800571e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005720:	4643      	mov	r3, r8
 8005722:	463a      	mov	r2, r7
 8005724:	4628      	mov	r0, r5
 8005726:	47b0      	blx	r6
 8005728:	2800      	cmp	r0, #0
 800572a:	dc06      	bgt.n	800573a <__sflush_r+0xfe>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e78e      	b.n	8005658 <__sflush_r+0x1c>
 800573a:	4407      	add	r7, r0
 800573c:	eba8 0800 	sub.w	r8, r8, r0
 8005740:	e7e9      	b.n	8005716 <__sflush_r+0xda>
 8005742:	bf00      	nop
 8005744:	20400001 	.word	0x20400001

08005748 <_fflush_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	4605      	mov	r5, r0
 800574e:	460c      	mov	r4, r1
 8005750:	b913      	cbnz	r3, 8005758 <_fflush_r+0x10>
 8005752:	2500      	movs	r5, #0
 8005754:	4628      	mov	r0, r5
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	b118      	cbz	r0, 8005762 <_fflush_r+0x1a>
 800575a:	6983      	ldr	r3, [r0, #24]
 800575c:	b90b      	cbnz	r3, 8005762 <_fflush_r+0x1a>
 800575e:	f000 f899 	bl	8005894 <__sinit>
 8005762:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <_fflush_r+0x6c>)
 8005764:	429c      	cmp	r4, r3
 8005766:	d11b      	bne.n	80057a0 <_fflush_r+0x58>
 8005768:	686c      	ldr	r4, [r5, #4]
 800576a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0ef      	beq.n	8005752 <_fflush_r+0xa>
 8005772:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005774:	07d0      	lsls	r0, r2, #31
 8005776:	d404      	bmi.n	8005782 <_fflush_r+0x3a>
 8005778:	0599      	lsls	r1, r3, #22
 800577a:	d402      	bmi.n	8005782 <_fflush_r+0x3a>
 800577c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800577e:	f000 f984 	bl	8005a8a <__retarget_lock_acquire_recursive>
 8005782:	4628      	mov	r0, r5
 8005784:	4621      	mov	r1, r4
 8005786:	f7ff ff59 	bl	800563c <__sflush_r>
 800578a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800578c:	07da      	lsls	r2, r3, #31
 800578e:	4605      	mov	r5, r0
 8005790:	d4e0      	bmi.n	8005754 <_fflush_r+0xc>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	059b      	lsls	r3, r3, #22
 8005796:	d4dd      	bmi.n	8005754 <_fflush_r+0xc>
 8005798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800579a:	f000 f977 	bl	8005a8c <__retarget_lock_release_recursive>
 800579e:	e7d9      	b.n	8005754 <_fflush_r+0xc>
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <_fflush_r+0x70>)
 80057a2:	429c      	cmp	r4, r3
 80057a4:	d101      	bne.n	80057aa <_fflush_r+0x62>
 80057a6:	68ac      	ldr	r4, [r5, #8]
 80057a8:	e7df      	b.n	800576a <_fflush_r+0x22>
 80057aa:	4b04      	ldr	r3, [pc, #16]	; (80057bc <_fflush_r+0x74>)
 80057ac:	429c      	cmp	r4, r3
 80057ae:	bf08      	it	eq
 80057b0:	68ec      	ldreq	r4, [r5, #12]
 80057b2:	e7da      	b.n	800576a <_fflush_r+0x22>
 80057b4:	08007b8c 	.word	0x08007b8c
 80057b8:	08007bac 	.word	0x08007bac
 80057bc:	08007b6c 	.word	0x08007b6c

080057c0 <fflush>:
 80057c0:	4601      	mov	r1, r0
 80057c2:	b920      	cbnz	r0, 80057ce <fflush+0xe>
 80057c4:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <fflush+0x18>)
 80057c6:	4905      	ldr	r1, [pc, #20]	; (80057dc <fflush+0x1c>)
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	f000 b8fe 	b.w	80059ca <_fwalk_reent>
 80057ce:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <fflush+0x20>)
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	f7ff bfb9 	b.w	8005748 <_fflush_r>
 80057d6:	bf00      	nop
 80057d8:	08007b68 	.word	0x08007b68
 80057dc:	08005749 	.word	0x08005749
 80057e0:	200000d4 	.word	0x200000d4

080057e4 <std>:
 80057e4:	2300      	movs	r3, #0
 80057e6:	b510      	push	{r4, lr}
 80057e8:	4604      	mov	r4, r0
 80057ea:	e9c0 3300 	strd	r3, r3, [r0]
 80057ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057f2:	6083      	str	r3, [r0, #8]
 80057f4:	8181      	strh	r1, [r0, #12]
 80057f6:	6643      	str	r3, [r0, #100]	; 0x64
 80057f8:	81c2      	strh	r2, [r0, #14]
 80057fa:	6183      	str	r3, [r0, #24]
 80057fc:	4619      	mov	r1, r3
 80057fe:	2208      	movs	r2, #8
 8005800:	305c      	adds	r0, #92	; 0x5c
 8005802:	f7ff fda5 	bl	8005350 <memset>
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <std+0x38>)
 8005808:	6263      	str	r3, [r4, #36]	; 0x24
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <std+0x3c>)
 800580c:	62a3      	str	r3, [r4, #40]	; 0x28
 800580e:	4b05      	ldr	r3, [pc, #20]	; (8005824 <std+0x40>)
 8005810:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005812:	4b05      	ldr	r3, [pc, #20]	; (8005828 <std+0x44>)
 8005814:	6224      	str	r4, [r4, #32]
 8005816:	6323      	str	r3, [r4, #48]	; 0x30
 8005818:	bd10      	pop	{r4, pc}
 800581a:	bf00      	nop
 800581c:	080065b9 	.word	0x080065b9
 8005820:	080065db 	.word	0x080065db
 8005824:	08006613 	.word	0x08006613
 8005828:	08006637 	.word	0x08006637

0800582c <_cleanup_r>:
 800582c:	4901      	ldr	r1, [pc, #4]	; (8005834 <_cleanup_r+0x8>)
 800582e:	f000 b8cc 	b.w	80059ca <_fwalk_reent>
 8005832:	bf00      	nop
 8005834:	08005749 	.word	0x08005749

08005838 <__sfmoreglue>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	1e4a      	subs	r2, r1, #1
 800583c:	2568      	movs	r5, #104	; 0x68
 800583e:	4355      	muls	r5, r2
 8005840:	460e      	mov	r6, r1
 8005842:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005846:	f000 f9d7 	bl	8005bf8 <_malloc_r>
 800584a:	4604      	mov	r4, r0
 800584c:	b140      	cbz	r0, 8005860 <__sfmoreglue+0x28>
 800584e:	2100      	movs	r1, #0
 8005850:	e9c0 1600 	strd	r1, r6, [r0]
 8005854:	300c      	adds	r0, #12
 8005856:	60a0      	str	r0, [r4, #8]
 8005858:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800585c:	f7ff fd78 	bl	8005350 <memset>
 8005860:	4620      	mov	r0, r4
 8005862:	bd70      	pop	{r4, r5, r6, pc}

08005864 <__sfp_lock_acquire>:
 8005864:	4801      	ldr	r0, [pc, #4]	; (800586c <__sfp_lock_acquire+0x8>)
 8005866:	f000 b910 	b.w	8005a8a <__retarget_lock_acquire_recursive>
 800586a:	bf00      	nop
 800586c:	20000398 	.word	0x20000398

08005870 <__sfp_lock_release>:
 8005870:	4801      	ldr	r0, [pc, #4]	; (8005878 <__sfp_lock_release+0x8>)
 8005872:	f000 b90b 	b.w	8005a8c <__retarget_lock_release_recursive>
 8005876:	bf00      	nop
 8005878:	20000398 	.word	0x20000398

0800587c <__sinit_lock_acquire>:
 800587c:	4801      	ldr	r0, [pc, #4]	; (8005884 <__sinit_lock_acquire+0x8>)
 800587e:	f000 b904 	b.w	8005a8a <__retarget_lock_acquire_recursive>
 8005882:	bf00      	nop
 8005884:	20000393 	.word	0x20000393

08005888 <__sinit_lock_release>:
 8005888:	4801      	ldr	r0, [pc, #4]	; (8005890 <__sinit_lock_release+0x8>)
 800588a:	f000 b8ff 	b.w	8005a8c <__retarget_lock_release_recursive>
 800588e:	bf00      	nop
 8005890:	20000393 	.word	0x20000393

08005894 <__sinit>:
 8005894:	b510      	push	{r4, lr}
 8005896:	4604      	mov	r4, r0
 8005898:	f7ff fff0 	bl	800587c <__sinit_lock_acquire>
 800589c:	69a3      	ldr	r3, [r4, #24]
 800589e:	b11b      	cbz	r3, 80058a8 <__sinit+0x14>
 80058a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058a4:	f7ff bff0 	b.w	8005888 <__sinit_lock_release>
 80058a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058ac:	6523      	str	r3, [r4, #80]	; 0x50
 80058ae:	4b13      	ldr	r3, [pc, #76]	; (80058fc <__sinit+0x68>)
 80058b0:	4a13      	ldr	r2, [pc, #76]	; (8005900 <__sinit+0x6c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	bf04      	itt	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	61a3      	streq	r3, [r4, #24]
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 f820 	bl	8005904 <__sfp>
 80058c4:	6060      	str	r0, [r4, #4]
 80058c6:	4620      	mov	r0, r4
 80058c8:	f000 f81c 	bl	8005904 <__sfp>
 80058cc:	60a0      	str	r0, [r4, #8]
 80058ce:	4620      	mov	r0, r4
 80058d0:	f000 f818 	bl	8005904 <__sfp>
 80058d4:	2200      	movs	r2, #0
 80058d6:	60e0      	str	r0, [r4, #12]
 80058d8:	2104      	movs	r1, #4
 80058da:	6860      	ldr	r0, [r4, #4]
 80058dc:	f7ff ff82 	bl	80057e4 <std>
 80058e0:	68a0      	ldr	r0, [r4, #8]
 80058e2:	2201      	movs	r2, #1
 80058e4:	2109      	movs	r1, #9
 80058e6:	f7ff ff7d 	bl	80057e4 <std>
 80058ea:	68e0      	ldr	r0, [r4, #12]
 80058ec:	2202      	movs	r2, #2
 80058ee:	2112      	movs	r1, #18
 80058f0:	f7ff ff78 	bl	80057e4 <std>
 80058f4:	2301      	movs	r3, #1
 80058f6:	61a3      	str	r3, [r4, #24]
 80058f8:	e7d2      	b.n	80058a0 <__sinit+0xc>
 80058fa:	bf00      	nop
 80058fc:	08007b68 	.word	0x08007b68
 8005900:	0800582d 	.word	0x0800582d

08005904 <__sfp>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	4607      	mov	r7, r0
 8005908:	f7ff ffac 	bl	8005864 <__sfp_lock_acquire>
 800590c:	4b1e      	ldr	r3, [pc, #120]	; (8005988 <__sfp+0x84>)
 800590e:	681e      	ldr	r6, [r3, #0]
 8005910:	69b3      	ldr	r3, [r6, #24]
 8005912:	b913      	cbnz	r3, 800591a <__sfp+0x16>
 8005914:	4630      	mov	r0, r6
 8005916:	f7ff ffbd 	bl	8005894 <__sinit>
 800591a:	3648      	adds	r6, #72	; 0x48
 800591c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005920:	3b01      	subs	r3, #1
 8005922:	d503      	bpl.n	800592c <__sfp+0x28>
 8005924:	6833      	ldr	r3, [r6, #0]
 8005926:	b30b      	cbz	r3, 800596c <__sfp+0x68>
 8005928:	6836      	ldr	r6, [r6, #0]
 800592a:	e7f7      	b.n	800591c <__sfp+0x18>
 800592c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005930:	b9d5      	cbnz	r5, 8005968 <__sfp+0x64>
 8005932:	4b16      	ldr	r3, [pc, #88]	; (800598c <__sfp+0x88>)
 8005934:	60e3      	str	r3, [r4, #12]
 8005936:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800593a:	6665      	str	r5, [r4, #100]	; 0x64
 800593c:	f000 f8a4 	bl	8005a88 <__retarget_lock_init_recursive>
 8005940:	f7ff ff96 	bl	8005870 <__sfp_lock_release>
 8005944:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005948:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800594c:	6025      	str	r5, [r4, #0]
 800594e:	61a5      	str	r5, [r4, #24]
 8005950:	2208      	movs	r2, #8
 8005952:	4629      	mov	r1, r5
 8005954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005958:	f7ff fcfa 	bl	8005350 <memset>
 800595c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005964:	4620      	mov	r0, r4
 8005966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005968:	3468      	adds	r4, #104	; 0x68
 800596a:	e7d9      	b.n	8005920 <__sfp+0x1c>
 800596c:	2104      	movs	r1, #4
 800596e:	4638      	mov	r0, r7
 8005970:	f7ff ff62 	bl	8005838 <__sfmoreglue>
 8005974:	4604      	mov	r4, r0
 8005976:	6030      	str	r0, [r6, #0]
 8005978:	2800      	cmp	r0, #0
 800597a:	d1d5      	bne.n	8005928 <__sfp+0x24>
 800597c:	f7ff ff78 	bl	8005870 <__sfp_lock_release>
 8005980:	230c      	movs	r3, #12
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	e7ee      	b.n	8005964 <__sfp+0x60>
 8005986:	bf00      	nop
 8005988:	08007b68 	.word	0x08007b68
 800598c:	ffff0001 	.word	0xffff0001

08005990 <_fwalk>:
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	460f      	mov	r7, r1
 8005996:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800599a:	2600      	movs	r6, #0
 800599c:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80059a0:	f1b8 0801 	subs.w	r8, r8, #1
 80059a4:	d505      	bpl.n	80059b2 <_fwalk+0x22>
 80059a6:	6824      	ldr	r4, [r4, #0]
 80059a8:	2c00      	cmp	r4, #0
 80059aa:	d1f7      	bne.n	800599c <_fwalk+0xc>
 80059ac:	4630      	mov	r0, r6
 80059ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d906      	bls.n	80059c6 <_fwalk+0x36>
 80059b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059bc:	3301      	adds	r3, #1
 80059be:	d002      	beq.n	80059c6 <_fwalk+0x36>
 80059c0:	4628      	mov	r0, r5
 80059c2:	47b8      	blx	r7
 80059c4:	4306      	orrs	r6, r0
 80059c6:	3568      	adds	r5, #104	; 0x68
 80059c8:	e7ea      	b.n	80059a0 <_fwalk+0x10>

080059ca <_fwalk_reent>:
 80059ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ce:	4606      	mov	r6, r0
 80059d0:	4688      	mov	r8, r1
 80059d2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059d6:	2700      	movs	r7, #0
 80059d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059dc:	f1b9 0901 	subs.w	r9, r9, #1
 80059e0:	d505      	bpl.n	80059ee <_fwalk_reent+0x24>
 80059e2:	6824      	ldr	r4, [r4, #0]
 80059e4:	2c00      	cmp	r4, #0
 80059e6:	d1f7      	bne.n	80059d8 <_fwalk_reent+0xe>
 80059e8:	4638      	mov	r0, r7
 80059ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ee:	89ab      	ldrh	r3, [r5, #12]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d907      	bls.n	8005a04 <_fwalk_reent+0x3a>
 80059f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059f8:	3301      	adds	r3, #1
 80059fa:	d003      	beq.n	8005a04 <_fwalk_reent+0x3a>
 80059fc:	4629      	mov	r1, r5
 80059fe:	4630      	mov	r0, r6
 8005a00:	47c0      	blx	r8
 8005a02:	4307      	orrs	r7, r0
 8005a04:	3568      	adds	r5, #104	; 0x68
 8005a06:	e7e9      	b.n	80059dc <_fwalk_reent+0x12>

08005a08 <_getc_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	b118      	cbz	r0, 8005a18 <_getc_r+0x10>
 8005a10:	6983      	ldr	r3, [r0, #24]
 8005a12:	b90b      	cbnz	r3, 8005a18 <_getc_r+0x10>
 8005a14:	f7ff ff3e 	bl	8005894 <__sinit>
 8005a18:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <_getc_r+0x74>)
 8005a1a:	429c      	cmp	r4, r3
 8005a1c:	d11e      	bne.n	8005a5c <_getc_r+0x54>
 8005a1e:	686c      	ldr	r4, [r5, #4]
 8005a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a22:	07d8      	lsls	r0, r3, #31
 8005a24:	d405      	bmi.n	8005a32 <_getc_r+0x2a>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	0599      	lsls	r1, r3, #22
 8005a2a:	d402      	bmi.n	8005a32 <_getc_r+0x2a>
 8005a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a2e:	f000 f82c 	bl	8005a8a <__retarget_lock_acquire_recursive>
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	da19      	bge.n	8005a70 <_getc_r+0x68>
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	4621      	mov	r1, r4
 8005a40:	f000 fd7e 	bl	8006540 <__srget_r>
 8005a44:	4605      	mov	r5, r0
 8005a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a48:	07da      	lsls	r2, r3, #31
 8005a4a:	d405      	bmi.n	8005a58 <_getc_r+0x50>
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	059b      	lsls	r3, r3, #22
 8005a50:	d402      	bmi.n	8005a58 <_getc_r+0x50>
 8005a52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a54:	f000 f81a 	bl	8005a8c <__retarget_lock_release_recursive>
 8005a58:	4628      	mov	r0, r5
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <_getc_r+0x78>)
 8005a5e:	429c      	cmp	r4, r3
 8005a60:	d101      	bne.n	8005a66 <_getc_r+0x5e>
 8005a62:	68ac      	ldr	r4, [r5, #8]
 8005a64:	e7dc      	b.n	8005a20 <_getc_r+0x18>
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <_getc_r+0x7c>)
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	bf08      	it	eq
 8005a6c:	68ec      	ldreq	r4, [r5, #12]
 8005a6e:	e7d7      	b.n	8005a20 <_getc_r+0x18>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	6022      	str	r2, [r4, #0]
 8005a76:	781d      	ldrb	r5, [r3, #0]
 8005a78:	e7e5      	b.n	8005a46 <_getc_r+0x3e>
 8005a7a:	bf00      	nop
 8005a7c:	08007b8c 	.word	0x08007b8c
 8005a80:	08007bac 	.word	0x08007bac
 8005a84:	08007b6c 	.word	0x08007b6c

08005a88 <__retarget_lock_init_recursive>:
 8005a88:	4770      	bx	lr

08005a8a <__retarget_lock_acquire_recursive>:
 8005a8a:	4770      	bx	lr

08005a8c <__retarget_lock_release_recursive>:
 8005a8c:	4770      	bx	lr

08005a8e <__swhatbuf_r>:
 8005a8e:	b570      	push	{r4, r5, r6, lr}
 8005a90:	460e      	mov	r6, r1
 8005a92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a96:	2900      	cmp	r1, #0
 8005a98:	b096      	sub	sp, #88	; 0x58
 8005a9a:	4614      	mov	r4, r2
 8005a9c:	461d      	mov	r5, r3
 8005a9e:	da07      	bge.n	8005ab0 <__swhatbuf_r+0x22>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	89b3      	ldrh	r3, [r6, #12]
 8005aa6:	061a      	lsls	r2, r3, #24
 8005aa8:	d410      	bmi.n	8005acc <__swhatbuf_r+0x3e>
 8005aaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aae:	e00e      	b.n	8005ace <__swhatbuf_r+0x40>
 8005ab0:	466a      	mov	r2, sp
 8005ab2:	f000 fde7 	bl	8006684 <_fstat_r>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	dbf2      	blt.n	8005aa0 <__swhatbuf_r+0x12>
 8005aba:	9a01      	ldr	r2, [sp, #4]
 8005abc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ac0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ac4:	425a      	negs	r2, r3
 8005ac6:	415a      	adcs	r2, r3
 8005ac8:	602a      	str	r2, [r5, #0]
 8005aca:	e7ee      	b.n	8005aaa <__swhatbuf_r+0x1c>
 8005acc:	2340      	movs	r3, #64	; 0x40
 8005ace:	2000      	movs	r0, #0
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	b016      	add	sp, #88	; 0x58
 8005ad4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ad8 <__smakebuf_r>:
 8005ad8:	898b      	ldrh	r3, [r1, #12]
 8005ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005adc:	079d      	lsls	r5, r3, #30
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	d507      	bpl.n	8005af4 <__smakebuf_r+0x1c>
 8005ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	2301      	movs	r3, #1
 8005aee:	6163      	str	r3, [r4, #20]
 8005af0:	b002      	add	sp, #8
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	ab01      	add	r3, sp, #4
 8005af6:	466a      	mov	r2, sp
 8005af8:	f7ff ffc9 	bl	8005a8e <__swhatbuf_r>
 8005afc:	9900      	ldr	r1, [sp, #0]
 8005afe:	4605      	mov	r5, r0
 8005b00:	4630      	mov	r0, r6
 8005b02:	f000 f879 	bl	8005bf8 <_malloc_r>
 8005b06:	b948      	cbnz	r0, 8005b1c <__smakebuf_r+0x44>
 8005b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b0c:	059a      	lsls	r2, r3, #22
 8005b0e:	d4ef      	bmi.n	8005af0 <__smakebuf_r+0x18>
 8005b10:	f023 0303 	bic.w	r3, r3, #3
 8005b14:	f043 0302 	orr.w	r3, r3, #2
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	e7e3      	b.n	8005ae4 <__smakebuf_r+0xc>
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <__smakebuf_r+0x7c>)
 8005b1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	6020      	str	r0, [r4, #0]
 8005b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	9b00      	ldr	r3, [sp, #0]
 8005b2c:	6163      	str	r3, [r4, #20]
 8005b2e:	9b01      	ldr	r3, [sp, #4]
 8005b30:	6120      	str	r0, [r4, #16]
 8005b32:	b15b      	cbz	r3, 8005b4c <__smakebuf_r+0x74>
 8005b34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 fdb5 	bl	80066a8 <_isatty_r>
 8005b3e:	b128      	cbz	r0, 8005b4c <__smakebuf_r+0x74>
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	81a3      	strh	r3, [r4, #12]
 8005b4c:	89a0      	ldrh	r0, [r4, #12]
 8005b4e:	4305      	orrs	r5, r0
 8005b50:	81a5      	strh	r5, [r4, #12]
 8005b52:	e7cd      	b.n	8005af0 <__smakebuf_r+0x18>
 8005b54:	0800582d 	.word	0x0800582d

08005b58 <_free_r>:
 8005b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b5a:	2900      	cmp	r1, #0
 8005b5c:	d048      	beq.n	8005bf0 <_free_r+0x98>
 8005b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b62:	9001      	str	r0, [sp, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f1a1 0404 	sub.w	r4, r1, #4
 8005b6a:	bfb8      	it	lt
 8005b6c:	18e4      	addlt	r4, r4, r3
 8005b6e:	f000 fde5 	bl	800673c <__malloc_lock>
 8005b72:	4a20      	ldr	r2, [pc, #128]	; (8005bf4 <_free_r+0x9c>)
 8005b74:	9801      	ldr	r0, [sp, #4]
 8005b76:	6813      	ldr	r3, [r2, #0]
 8005b78:	4615      	mov	r5, r2
 8005b7a:	b933      	cbnz	r3, 8005b8a <_free_r+0x32>
 8005b7c:	6063      	str	r3, [r4, #4]
 8005b7e:	6014      	str	r4, [r2, #0]
 8005b80:	b003      	add	sp, #12
 8005b82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b86:	f000 bddf 	b.w	8006748 <__malloc_unlock>
 8005b8a:	42a3      	cmp	r3, r4
 8005b8c:	d90b      	bls.n	8005ba6 <_free_r+0x4e>
 8005b8e:	6821      	ldr	r1, [r4, #0]
 8005b90:	1862      	adds	r2, r4, r1
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bf04      	itt	eq
 8005b96:	681a      	ldreq	r2, [r3, #0]
 8005b98:	685b      	ldreq	r3, [r3, #4]
 8005b9a:	6063      	str	r3, [r4, #4]
 8005b9c:	bf04      	itt	eq
 8005b9e:	1852      	addeq	r2, r2, r1
 8005ba0:	6022      	streq	r2, [r4, #0]
 8005ba2:	602c      	str	r4, [r5, #0]
 8005ba4:	e7ec      	b.n	8005b80 <_free_r+0x28>
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b10b      	cbz	r3, 8005bb0 <_free_r+0x58>
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d9fa      	bls.n	8005ba6 <_free_r+0x4e>
 8005bb0:	6811      	ldr	r1, [r2, #0]
 8005bb2:	1855      	adds	r5, r2, r1
 8005bb4:	42a5      	cmp	r5, r4
 8005bb6:	d10b      	bne.n	8005bd0 <_free_r+0x78>
 8005bb8:	6824      	ldr	r4, [r4, #0]
 8005bba:	4421      	add	r1, r4
 8005bbc:	1854      	adds	r4, r2, r1
 8005bbe:	42a3      	cmp	r3, r4
 8005bc0:	6011      	str	r1, [r2, #0]
 8005bc2:	d1dd      	bne.n	8005b80 <_free_r+0x28>
 8005bc4:	681c      	ldr	r4, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	6053      	str	r3, [r2, #4]
 8005bca:	4421      	add	r1, r4
 8005bcc:	6011      	str	r1, [r2, #0]
 8005bce:	e7d7      	b.n	8005b80 <_free_r+0x28>
 8005bd0:	d902      	bls.n	8005bd8 <_free_r+0x80>
 8005bd2:	230c      	movs	r3, #12
 8005bd4:	6003      	str	r3, [r0, #0]
 8005bd6:	e7d3      	b.n	8005b80 <_free_r+0x28>
 8005bd8:	6825      	ldr	r5, [r4, #0]
 8005bda:	1961      	adds	r1, r4, r5
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	bf04      	itt	eq
 8005be0:	6819      	ldreq	r1, [r3, #0]
 8005be2:	685b      	ldreq	r3, [r3, #4]
 8005be4:	6063      	str	r3, [r4, #4]
 8005be6:	bf04      	itt	eq
 8005be8:	1949      	addeq	r1, r1, r5
 8005bea:	6021      	streq	r1, [r4, #0]
 8005bec:	6054      	str	r4, [r2, #4]
 8005bee:	e7c7      	b.n	8005b80 <_free_r+0x28>
 8005bf0:	b003      	add	sp, #12
 8005bf2:	bd30      	pop	{r4, r5, pc}
 8005bf4:	20000158 	.word	0x20000158

08005bf8 <_malloc_r>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	1ccd      	adds	r5, r1, #3
 8005bfc:	f025 0503 	bic.w	r5, r5, #3
 8005c00:	3508      	adds	r5, #8
 8005c02:	2d0c      	cmp	r5, #12
 8005c04:	bf38      	it	cc
 8005c06:	250c      	movcc	r5, #12
 8005c08:	2d00      	cmp	r5, #0
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	db01      	blt.n	8005c12 <_malloc_r+0x1a>
 8005c0e:	42a9      	cmp	r1, r5
 8005c10:	d903      	bls.n	8005c1a <_malloc_r+0x22>
 8005c12:	230c      	movs	r3, #12
 8005c14:	6033      	str	r3, [r6, #0]
 8005c16:	2000      	movs	r0, #0
 8005c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c1a:	f000 fd8f 	bl	800673c <__malloc_lock>
 8005c1e:	4921      	ldr	r1, [pc, #132]	; (8005ca4 <_malloc_r+0xac>)
 8005c20:	680a      	ldr	r2, [r1, #0]
 8005c22:	4614      	mov	r4, r2
 8005c24:	b99c      	cbnz	r4, 8005c4e <_malloc_r+0x56>
 8005c26:	4f20      	ldr	r7, [pc, #128]	; (8005ca8 <_malloc_r+0xb0>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b923      	cbnz	r3, 8005c36 <_malloc_r+0x3e>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f000 fcb2 	bl	8006598 <_sbrk_r>
 8005c34:	6038      	str	r0, [r7, #0]
 8005c36:	4629      	mov	r1, r5
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 fcad 	bl	8006598 <_sbrk_r>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d123      	bne.n	8005c8a <_malloc_r+0x92>
 8005c42:	230c      	movs	r3, #12
 8005c44:	6033      	str	r3, [r6, #0]
 8005c46:	4630      	mov	r0, r6
 8005c48:	f000 fd7e 	bl	8006748 <__malloc_unlock>
 8005c4c:	e7e3      	b.n	8005c16 <_malloc_r+0x1e>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	1b5b      	subs	r3, r3, r5
 8005c52:	d417      	bmi.n	8005c84 <_malloc_r+0x8c>
 8005c54:	2b0b      	cmp	r3, #11
 8005c56:	d903      	bls.n	8005c60 <_malloc_r+0x68>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	441c      	add	r4, r3
 8005c5c:	6025      	str	r5, [r4, #0]
 8005c5e:	e004      	b.n	8005c6a <_malloc_r+0x72>
 8005c60:	6863      	ldr	r3, [r4, #4]
 8005c62:	42a2      	cmp	r2, r4
 8005c64:	bf0c      	ite	eq
 8005c66:	600b      	streq	r3, [r1, #0]
 8005c68:	6053      	strne	r3, [r2, #4]
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f000 fd6c 	bl	8006748 <__malloc_unlock>
 8005c70:	f104 000b 	add.w	r0, r4, #11
 8005c74:	1d23      	adds	r3, r4, #4
 8005c76:	f020 0007 	bic.w	r0, r0, #7
 8005c7a:	1ac2      	subs	r2, r0, r3
 8005c7c:	d0cc      	beq.n	8005c18 <_malloc_r+0x20>
 8005c7e:	1a1b      	subs	r3, r3, r0
 8005c80:	50a3      	str	r3, [r4, r2]
 8005c82:	e7c9      	b.n	8005c18 <_malloc_r+0x20>
 8005c84:	4622      	mov	r2, r4
 8005c86:	6864      	ldr	r4, [r4, #4]
 8005c88:	e7cc      	b.n	8005c24 <_malloc_r+0x2c>
 8005c8a:	1cc4      	adds	r4, r0, #3
 8005c8c:	f024 0403 	bic.w	r4, r4, #3
 8005c90:	42a0      	cmp	r0, r4
 8005c92:	d0e3      	beq.n	8005c5c <_malloc_r+0x64>
 8005c94:	1a21      	subs	r1, r4, r0
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 fc7e 	bl	8006598 <_sbrk_r>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d1dd      	bne.n	8005c5c <_malloc_r+0x64>
 8005ca0:	e7cf      	b.n	8005c42 <_malloc_r+0x4a>
 8005ca2:	bf00      	nop
 8005ca4:	20000158 	.word	0x20000158
 8005ca8:	2000015c 	.word	0x2000015c

08005cac <__ssputs_r>:
 8005cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	688e      	ldr	r6, [r1, #8]
 8005cb2:	429e      	cmp	r6, r3
 8005cb4:	4682      	mov	sl, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	4690      	mov	r8, r2
 8005cba:	461f      	mov	r7, r3
 8005cbc:	d838      	bhi.n	8005d30 <__ssputs_r+0x84>
 8005cbe:	898a      	ldrh	r2, [r1, #12]
 8005cc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cc4:	d032      	beq.n	8005d2c <__ssputs_r+0x80>
 8005cc6:	6825      	ldr	r5, [r4, #0]
 8005cc8:	6909      	ldr	r1, [r1, #16]
 8005cca:	eba5 0901 	sub.w	r9, r5, r1
 8005cce:	6965      	ldr	r5, [r4, #20]
 8005cd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cd8:	3301      	adds	r3, #1
 8005cda:	444b      	add	r3, r9
 8005cdc:	106d      	asrs	r5, r5, #1
 8005cde:	429d      	cmp	r5, r3
 8005ce0:	bf38      	it	cc
 8005ce2:	461d      	movcc	r5, r3
 8005ce4:	0553      	lsls	r3, r2, #21
 8005ce6:	d531      	bpl.n	8005d4c <__ssputs_r+0xa0>
 8005ce8:	4629      	mov	r1, r5
 8005cea:	f7ff ff85 	bl	8005bf8 <_malloc_r>
 8005cee:	4606      	mov	r6, r0
 8005cf0:	b950      	cbnz	r0, 8005d08 <__ssputs_r+0x5c>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	f8ca 3000 	str.w	r3, [sl]
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295
 8005d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d08:	6921      	ldr	r1, [r4, #16]
 8005d0a:	464a      	mov	r2, r9
 8005d0c:	f000 fcee 	bl	80066ec <memcpy>
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d1a:	81a3      	strh	r3, [r4, #12]
 8005d1c:	6126      	str	r6, [r4, #16]
 8005d1e:	6165      	str	r5, [r4, #20]
 8005d20:	444e      	add	r6, r9
 8005d22:	eba5 0509 	sub.w	r5, r5, r9
 8005d26:	6026      	str	r6, [r4, #0]
 8005d28:	60a5      	str	r5, [r4, #8]
 8005d2a:	463e      	mov	r6, r7
 8005d2c:	42be      	cmp	r6, r7
 8005d2e:	d900      	bls.n	8005d32 <__ssputs_r+0x86>
 8005d30:	463e      	mov	r6, r7
 8005d32:	4632      	mov	r2, r6
 8005d34:	6820      	ldr	r0, [r4, #0]
 8005d36:	4641      	mov	r1, r8
 8005d38:	f000 fce6 	bl	8006708 <memmove>
 8005d3c:	68a3      	ldr	r3, [r4, #8]
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	1b9b      	subs	r3, r3, r6
 8005d42:	4432      	add	r2, r6
 8005d44:	60a3      	str	r3, [r4, #8]
 8005d46:	6022      	str	r2, [r4, #0]
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e7db      	b.n	8005d04 <__ssputs_r+0x58>
 8005d4c:	462a      	mov	r2, r5
 8005d4e:	f000 fd01 	bl	8006754 <_realloc_r>
 8005d52:	4606      	mov	r6, r0
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d1e1      	bne.n	8005d1c <__ssputs_r+0x70>
 8005d58:	6921      	ldr	r1, [r4, #16]
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f7ff fefc 	bl	8005b58 <_free_r>
 8005d60:	e7c7      	b.n	8005cf2 <__ssputs_r+0x46>
	...

08005d64 <_svfiprintf_r>:
 8005d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d68:	4698      	mov	r8, r3
 8005d6a:	898b      	ldrh	r3, [r1, #12]
 8005d6c:	061b      	lsls	r3, r3, #24
 8005d6e:	b09d      	sub	sp, #116	; 0x74
 8005d70:	4607      	mov	r7, r0
 8005d72:	460d      	mov	r5, r1
 8005d74:	4614      	mov	r4, r2
 8005d76:	d50e      	bpl.n	8005d96 <_svfiprintf_r+0x32>
 8005d78:	690b      	ldr	r3, [r1, #16]
 8005d7a:	b963      	cbnz	r3, 8005d96 <_svfiprintf_r+0x32>
 8005d7c:	2140      	movs	r1, #64	; 0x40
 8005d7e:	f7ff ff3b 	bl	8005bf8 <_malloc_r>
 8005d82:	6028      	str	r0, [r5, #0]
 8005d84:	6128      	str	r0, [r5, #16]
 8005d86:	b920      	cbnz	r0, 8005d92 <_svfiprintf_r+0x2e>
 8005d88:	230c      	movs	r3, #12
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d90:	e0d1      	b.n	8005f36 <_svfiprintf_r+0x1d2>
 8005d92:	2340      	movs	r3, #64	; 0x40
 8005d94:	616b      	str	r3, [r5, #20]
 8005d96:	2300      	movs	r3, #0
 8005d98:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005da4:	2330      	movs	r3, #48	; 0x30
 8005da6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f50 <_svfiprintf_r+0x1ec>
 8005daa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dae:	f04f 0901 	mov.w	r9, #1
 8005db2:	4623      	mov	r3, r4
 8005db4:	469a      	mov	sl, r3
 8005db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dba:	b10a      	cbz	r2, 8005dc0 <_svfiprintf_r+0x5c>
 8005dbc:	2a25      	cmp	r2, #37	; 0x25
 8005dbe:	d1f9      	bne.n	8005db4 <_svfiprintf_r+0x50>
 8005dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8005dc4:	d00b      	beq.n	8005dde <_svfiprintf_r+0x7a>
 8005dc6:	465b      	mov	r3, fp
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	4638      	mov	r0, r7
 8005dce:	f7ff ff6d 	bl	8005cac <__ssputs_r>
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f000 80aa 	beq.w	8005f2c <_svfiprintf_r+0x1c8>
 8005dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dda:	445a      	add	r2, fp
 8005ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8005dde:	f89a 3000 	ldrb.w	r3, [sl]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80a2 	beq.w	8005f2c <_svfiprintf_r+0x1c8>
 8005de8:	2300      	movs	r3, #0
 8005dea:	f04f 32ff 	mov.w	r2, #4294967295
 8005dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005df2:	f10a 0a01 	add.w	sl, sl, #1
 8005df6:	9304      	str	r3, [sp, #16]
 8005df8:	9307      	str	r3, [sp, #28]
 8005dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8005e00:	4654      	mov	r4, sl
 8005e02:	2205      	movs	r2, #5
 8005e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e08:	4851      	ldr	r0, [pc, #324]	; (8005f50 <_svfiprintf_r+0x1ec>)
 8005e0a:	f7fa f9e9 	bl	80001e0 <memchr>
 8005e0e:	9a04      	ldr	r2, [sp, #16]
 8005e10:	b9d8      	cbnz	r0, 8005e4a <_svfiprintf_r+0xe6>
 8005e12:	06d0      	lsls	r0, r2, #27
 8005e14:	bf44      	itt	mi
 8005e16:	2320      	movmi	r3, #32
 8005e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e1c:	0711      	lsls	r1, r2, #28
 8005e1e:	bf44      	itt	mi
 8005e20:	232b      	movmi	r3, #43	; 0x2b
 8005e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e26:	f89a 3000 	ldrb.w	r3, [sl]
 8005e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e2c:	d015      	beq.n	8005e5a <_svfiprintf_r+0xf6>
 8005e2e:	9a07      	ldr	r2, [sp, #28]
 8005e30:	4654      	mov	r4, sl
 8005e32:	2000      	movs	r0, #0
 8005e34:	f04f 0c0a 	mov.w	ip, #10
 8005e38:	4621      	mov	r1, r4
 8005e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e3e:	3b30      	subs	r3, #48	; 0x30
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d94e      	bls.n	8005ee2 <_svfiprintf_r+0x17e>
 8005e44:	b1b0      	cbz	r0, 8005e74 <_svfiprintf_r+0x110>
 8005e46:	9207      	str	r2, [sp, #28]
 8005e48:	e014      	b.n	8005e74 <_svfiprintf_r+0x110>
 8005e4a:	eba0 0308 	sub.w	r3, r0, r8
 8005e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e52:	4313      	orrs	r3, r2
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	46a2      	mov	sl, r4
 8005e58:	e7d2      	b.n	8005e00 <_svfiprintf_r+0x9c>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	1d19      	adds	r1, r3, #4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	9103      	str	r1, [sp, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bfbb      	ittet	lt
 8005e66:	425b      	neglt	r3, r3
 8005e68:	f042 0202 	orrlt.w	r2, r2, #2
 8005e6c:	9307      	strge	r3, [sp, #28]
 8005e6e:	9307      	strlt	r3, [sp, #28]
 8005e70:	bfb8      	it	lt
 8005e72:	9204      	strlt	r2, [sp, #16]
 8005e74:	7823      	ldrb	r3, [r4, #0]
 8005e76:	2b2e      	cmp	r3, #46	; 0x2e
 8005e78:	d10c      	bne.n	8005e94 <_svfiprintf_r+0x130>
 8005e7a:	7863      	ldrb	r3, [r4, #1]
 8005e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e7e:	d135      	bne.n	8005eec <_svfiprintf_r+0x188>
 8005e80:	9b03      	ldr	r3, [sp, #12]
 8005e82:	1d1a      	adds	r2, r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	9203      	str	r2, [sp, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bfb8      	it	lt
 8005e8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e90:	3402      	adds	r4, #2
 8005e92:	9305      	str	r3, [sp, #20]
 8005e94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f60 <_svfiprintf_r+0x1fc>
 8005e98:	7821      	ldrb	r1, [r4, #0]
 8005e9a:	2203      	movs	r2, #3
 8005e9c:	4650      	mov	r0, sl
 8005e9e:	f7fa f99f 	bl	80001e0 <memchr>
 8005ea2:	b140      	cbz	r0, 8005eb6 <_svfiprintf_r+0x152>
 8005ea4:	2340      	movs	r3, #64	; 0x40
 8005ea6:	eba0 000a 	sub.w	r0, r0, sl
 8005eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8005eae:	9b04      	ldr	r3, [sp, #16]
 8005eb0:	4303      	orrs	r3, r0
 8005eb2:	3401      	adds	r4, #1
 8005eb4:	9304      	str	r3, [sp, #16]
 8005eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eba:	4826      	ldr	r0, [pc, #152]	; (8005f54 <_svfiprintf_r+0x1f0>)
 8005ebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ec0:	2206      	movs	r2, #6
 8005ec2:	f7fa f98d 	bl	80001e0 <memchr>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d038      	beq.n	8005f3c <_svfiprintf_r+0x1d8>
 8005eca:	4b23      	ldr	r3, [pc, #140]	; (8005f58 <_svfiprintf_r+0x1f4>)
 8005ecc:	bb1b      	cbnz	r3, 8005f16 <_svfiprintf_r+0x1b2>
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	3307      	adds	r3, #7
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	3308      	adds	r3, #8
 8005ed8:	9303      	str	r3, [sp, #12]
 8005eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005edc:	4433      	add	r3, r6
 8005ede:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee0:	e767      	b.n	8005db2 <_svfiprintf_r+0x4e>
 8005ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	2001      	movs	r0, #1
 8005eea:	e7a5      	b.n	8005e38 <_svfiprintf_r+0xd4>
 8005eec:	2300      	movs	r3, #0
 8005eee:	3401      	adds	r4, #1
 8005ef0:	9305      	str	r3, [sp, #20]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	f04f 0c0a 	mov.w	ip, #10
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005efe:	3a30      	subs	r2, #48	; 0x30
 8005f00:	2a09      	cmp	r2, #9
 8005f02:	d903      	bls.n	8005f0c <_svfiprintf_r+0x1a8>
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0c5      	beq.n	8005e94 <_svfiprintf_r+0x130>
 8005f08:	9105      	str	r1, [sp, #20]
 8005f0a:	e7c3      	b.n	8005e94 <_svfiprintf_r+0x130>
 8005f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f10:	4604      	mov	r4, r0
 8005f12:	2301      	movs	r3, #1
 8005f14:	e7f0      	b.n	8005ef8 <_svfiprintf_r+0x194>
 8005f16:	ab03      	add	r3, sp, #12
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	462a      	mov	r2, r5
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <_svfiprintf_r+0x1f8>)
 8005f1e:	a904      	add	r1, sp, #16
 8005f20:	4638      	mov	r0, r7
 8005f22:	f3af 8000 	nop.w
 8005f26:	1c42      	adds	r2, r0, #1
 8005f28:	4606      	mov	r6, r0
 8005f2a:	d1d6      	bne.n	8005eda <_svfiprintf_r+0x176>
 8005f2c:	89ab      	ldrh	r3, [r5, #12]
 8005f2e:	065b      	lsls	r3, r3, #25
 8005f30:	f53f af2c 	bmi.w	8005d8c <_svfiprintf_r+0x28>
 8005f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f36:	b01d      	add	sp, #116	; 0x74
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	ab03      	add	r3, sp, #12
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	462a      	mov	r2, r5
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <_svfiprintf_r+0x1f8>)
 8005f44:	a904      	add	r1, sp, #16
 8005f46:	4638      	mov	r0, r7
 8005f48:	f000 f9d4 	bl	80062f4 <_printf_i>
 8005f4c:	e7eb      	b.n	8005f26 <_svfiprintf_r+0x1c2>
 8005f4e:	bf00      	nop
 8005f50:	08007bcc 	.word	0x08007bcc
 8005f54:	08007bd6 	.word	0x08007bd6
 8005f58:	00000000 	.word	0x00000000
 8005f5c:	08005cad 	.word	0x08005cad
 8005f60:	08007bd2 	.word	0x08007bd2

08005f64 <__sfputc_r>:
 8005f64:	6893      	ldr	r3, [r2, #8]
 8005f66:	3b01      	subs	r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	b410      	push	{r4}
 8005f6c:	6093      	str	r3, [r2, #8]
 8005f6e:	da08      	bge.n	8005f82 <__sfputc_r+0x1e>
 8005f70:	6994      	ldr	r4, [r2, #24]
 8005f72:	42a3      	cmp	r3, r4
 8005f74:	db01      	blt.n	8005f7a <__sfputc_r+0x16>
 8005f76:	290a      	cmp	r1, #10
 8005f78:	d103      	bne.n	8005f82 <__sfputc_r+0x1e>
 8005f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f7e:	f7ff ba9d 	b.w	80054bc <__swbuf_r>
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	1c58      	adds	r0, r3, #1
 8005f86:	6010      	str	r0, [r2, #0]
 8005f88:	7019      	strb	r1, [r3, #0]
 8005f8a:	4608      	mov	r0, r1
 8005f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <__sfputs_r>:
 8005f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f94:	4606      	mov	r6, r0
 8005f96:	460f      	mov	r7, r1
 8005f98:	4614      	mov	r4, r2
 8005f9a:	18d5      	adds	r5, r2, r3
 8005f9c:	42ac      	cmp	r4, r5
 8005f9e:	d101      	bne.n	8005fa4 <__sfputs_r+0x12>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e007      	b.n	8005fb4 <__sfputs_r+0x22>
 8005fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fa8:	463a      	mov	r2, r7
 8005faa:	4630      	mov	r0, r6
 8005fac:	f7ff ffda 	bl	8005f64 <__sfputc_r>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d1f3      	bne.n	8005f9c <__sfputs_r+0xa>
 8005fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fb8 <_vfiprintf_r>:
 8005fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	b09d      	sub	sp, #116	; 0x74
 8005fc0:	4614      	mov	r4, r2
 8005fc2:	4698      	mov	r8, r3
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	b118      	cbz	r0, 8005fd0 <_vfiprintf_r+0x18>
 8005fc8:	6983      	ldr	r3, [r0, #24]
 8005fca:	b90b      	cbnz	r3, 8005fd0 <_vfiprintf_r+0x18>
 8005fcc:	f7ff fc62 	bl	8005894 <__sinit>
 8005fd0:	4b89      	ldr	r3, [pc, #548]	; (80061f8 <_vfiprintf_r+0x240>)
 8005fd2:	429d      	cmp	r5, r3
 8005fd4:	d11b      	bne.n	800600e <_vfiprintf_r+0x56>
 8005fd6:	6875      	ldr	r5, [r6, #4]
 8005fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fda:	07d9      	lsls	r1, r3, #31
 8005fdc:	d405      	bmi.n	8005fea <_vfiprintf_r+0x32>
 8005fde:	89ab      	ldrh	r3, [r5, #12]
 8005fe0:	059a      	lsls	r2, r3, #22
 8005fe2:	d402      	bmi.n	8005fea <_vfiprintf_r+0x32>
 8005fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fe6:	f7ff fd50 	bl	8005a8a <__retarget_lock_acquire_recursive>
 8005fea:	89ab      	ldrh	r3, [r5, #12]
 8005fec:	071b      	lsls	r3, r3, #28
 8005fee:	d501      	bpl.n	8005ff4 <_vfiprintf_r+0x3c>
 8005ff0:	692b      	ldr	r3, [r5, #16]
 8005ff2:	b9eb      	cbnz	r3, 8006030 <_vfiprintf_r+0x78>
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	f7ff fab2 	bl	8005560 <__swsetup_r>
 8005ffc:	b1c0      	cbz	r0, 8006030 <_vfiprintf_r+0x78>
 8005ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006000:	07dc      	lsls	r4, r3, #31
 8006002:	d50e      	bpl.n	8006022 <_vfiprintf_r+0x6a>
 8006004:	f04f 30ff 	mov.w	r0, #4294967295
 8006008:	b01d      	add	sp, #116	; 0x74
 800600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600e:	4b7b      	ldr	r3, [pc, #492]	; (80061fc <_vfiprintf_r+0x244>)
 8006010:	429d      	cmp	r5, r3
 8006012:	d101      	bne.n	8006018 <_vfiprintf_r+0x60>
 8006014:	68b5      	ldr	r5, [r6, #8]
 8006016:	e7df      	b.n	8005fd8 <_vfiprintf_r+0x20>
 8006018:	4b79      	ldr	r3, [pc, #484]	; (8006200 <_vfiprintf_r+0x248>)
 800601a:	429d      	cmp	r5, r3
 800601c:	bf08      	it	eq
 800601e:	68f5      	ldreq	r5, [r6, #12]
 8006020:	e7da      	b.n	8005fd8 <_vfiprintf_r+0x20>
 8006022:	89ab      	ldrh	r3, [r5, #12]
 8006024:	0598      	lsls	r0, r3, #22
 8006026:	d4ed      	bmi.n	8006004 <_vfiprintf_r+0x4c>
 8006028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800602a:	f7ff fd2f 	bl	8005a8c <__retarget_lock_release_recursive>
 800602e:	e7e9      	b.n	8006004 <_vfiprintf_r+0x4c>
 8006030:	2300      	movs	r3, #0
 8006032:	9309      	str	r3, [sp, #36]	; 0x24
 8006034:	2320      	movs	r3, #32
 8006036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800603a:	f8cd 800c 	str.w	r8, [sp, #12]
 800603e:	2330      	movs	r3, #48	; 0x30
 8006040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006204 <_vfiprintf_r+0x24c>
 8006044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006048:	f04f 0901 	mov.w	r9, #1
 800604c:	4623      	mov	r3, r4
 800604e:	469a      	mov	sl, r3
 8006050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006054:	b10a      	cbz	r2, 800605a <_vfiprintf_r+0xa2>
 8006056:	2a25      	cmp	r2, #37	; 0x25
 8006058:	d1f9      	bne.n	800604e <_vfiprintf_r+0x96>
 800605a:	ebba 0b04 	subs.w	fp, sl, r4
 800605e:	d00b      	beq.n	8006078 <_vfiprintf_r+0xc0>
 8006060:	465b      	mov	r3, fp
 8006062:	4622      	mov	r2, r4
 8006064:	4629      	mov	r1, r5
 8006066:	4630      	mov	r0, r6
 8006068:	f7ff ff93 	bl	8005f92 <__sfputs_r>
 800606c:	3001      	adds	r0, #1
 800606e:	f000 80aa 	beq.w	80061c6 <_vfiprintf_r+0x20e>
 8006072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006074:	445a      	add	r2, fp
 8006076:	9209      	str	r2, [sp, #36]	; 0x24
 8006078:	f89a 3000 	ldrb.w	r3, [sl]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80a2 	beq.w	80061c6 <_vfiprintf_r+0x20e>
 8006082:	2300      	movs	r3, #0
 8006084:	f04f 32ff 	mov.w	r2, #4294967295
 8006088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800608c:	f10a 0a01 	add.w	sl, sl, #1
 8006090:	9304      	str	r3, [sp, #16]
 8006092:	9307      	str	r3, [sp, #28]
 8006094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006098:	931a      	str	r3, [sp, #104]	; 0x68
 800609a:	4654      	mov	r4, sl
 800609c:	2205      	movs	r2, #5
 800609e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a2:	4858      	ldr	r0, [pc, #352]	; (8006204 <_vfiprintf_r+0x24c>)
 80060a4:	f7fa f89c 	bl	80001e0 <memchr>
 80060a8:	9a04      	ldr	r2, [sp, #16]
 80060aa:	b9d8      	cbnz	r0, 80060e4 <_vfiprintf_r+0x12c>
 80060ac:	06d1      	lsls	r1, r2, #27
 80060ae:	bf44      	itt	mi
 80060b0:	2320      	movmi	r3, #32
 80060b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b6:	0713      	lsls	r3, r2, #28
 80060b8:	bf44      	itt	mi
 80060ba:	232b      	movmi	r3, #43	; 0x2b
 80060bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060c0:	f89a 3000 	ldrb.w	r3, [sl]
 80060c4:	2b2a      	cmp	r3, #42	; 0x2a
 80060c6:	d015      	beq.n	80060f4 <_vfiprintf_r+0x13c>
 80060c8:	9a07      	ldr	r2, [sp, #28]
 80060ca:	4654      	mov	r4, sl
 80060cc:	2000      	movs	r0, #0
 80060ce:	f04f 0c0a 	mov.w	ip, #10
 80060d2:	4621      	mov	r1, r4
 80060d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d8:	3b30      	subs	r3, #48	; 0x30
 80060da:	2b09      	cmp	r3, #9
 80060dc:	d94e      	bls.n	800617c <_vfiprintf_r+0x1c4>
 80060de:	b1b0      	cbz	r0, 800610e <_vfiprintf_r+0x156>
 80060e0:	9207      	str	r2, [sp, #28]
 80060e2:	e014      	b.n	800610e <_vfiprintf_r+0x156>
 80060e4:	eba0 0308 	sub.w	r3, r0, r8
 80060e8:	fa09 f303 	lsl.w	r3, r9, r3
 80060ec:	4313      	orrs	r3, r2
 80060ee:	9304      	str	r3, [sp, #16]
 80060f0:	46a2      	mov	sl, r4
 80060f2:	e7d2      	b.n	800609a <_vfiprintf_r+0xe2>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	1d19      	adds	r1, r3, #4
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	9103      	str	r1, [sp, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	bfbb      	ittet	lt
 8006100:	425b      	neglt	r3, r3
 8006102:	f042 0202 	orrlt.w	r2, r2, #2
 8006106:	9307      	strge	r3, [sp, #28]
 8006108:	9307      	strlt	r3, [sp, #28]
 800610a:	bfb8      	it	lt
 800610c:	9204      	strlt	r2, [sp, #16]
 800610e:	7823      	ldrb	r3, [r4, #0]
 8006110:	2b2e      	cmp	r3, #46	; 0x2e
 8006112:	d10c      	bne.n	800612e <_vfiprintf_r+0x176>
 8006114:	7863      	ldrb	r3, [r4, #1]
 8006116:	2b2a      	cmp	r3, #42	; 0x2a
 8006118:	d135      	bne.n	8006186 <_vfiprintf_r+0x1ce>
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	1d1a      	adds	r2, r3, #4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	9203      	str	r2, [sp, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	bfb8      	it	lt
 8006126:	f04f 33ff 	movlt.w	r3, #4294967295
 800612a:	3402      	adds	r4, #2
 800612c:	9305      	str	r3, [sp, #20]
 800612e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006214 <_vfiprintf_r+0x25c>
 8006132:	7821      	ldrb	r1, [r4, #0]
 8006134:	2203      	movs	r2, #3
 8006136:	4650      	mov	r0, sl
 8006138:	f7fa f852 	bl	80001e0 <memchr>
 800613c:	b140      	cbz	r0, 8006150 <_vfiprintf_r+0x198>
 800613e:	2340      	movs	r3, #64	; 0x40
 8006140:	eba0 000a 	sub.w	r0, r0, sl
 8006144:	fa03 f000 	lsl.w	r0, r3, r0
 8006148:	9b04      	ldr	r3, [sp, #16]
 800614a:	4303      	orrs	r3, r0
 800614c:	3401      	adds	r4, #1
 800614e:	9304      	str	r3, [sp, #16]
 8006150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006154:	482c      	ldr	r0, [pc, #176]	; (8006208 <_vfiprintf_r+0x250>)
 8006156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800615a:	2206      	movs	r2, #6
 800615c:	f7fa f840 	bl	80001e0 <memchr>
 8006160:	2800      	cmp	r0, #0
 8006162:	d03f      	beq.n	80061e4 <_vfiprintf_r+0x22c>
 8006164:	4b29      	ldr	r3, [pc, #164]	; (800620c <_vfiprintf_r+0x254>)
 8006166:	bb1b      	cbnz	r3, 80061b0 <_vfiprintf_r+0x1f8>
 8006168:	9b03      	ldr	r3, [sp, #12]
 800616a:	3307      	adds	r3, #7
 800616c:	f023 0307 	bic.w	r3, r3, #7
 8006170:	3308      	adds	r3, #8
 8006172:	9303      	str	r3, [sp, #12]
 8006174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006176:	443b      	add	r3, r7
 8006178:	9309      	str	r3, [sp, #36]	; 0x24
 800617a:	e767      	b.n	800604c <_vfiprintf_r+0x94>
 800617c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006180:	460c      	mov	r4, r1
 8006182:	2001      	movs	r0, #1
 8006184:	e7a5      	b.n	80060d2 <_vfiprintf_r+0x11a>
 8006186:	2300      	movs	r3, #0
 8006188:	3401      	adds	r4, #1
 800618a:	9305      	str	r3, [sp, #20]
 800618c:	4619      	mov	r1, r3
 800618e:	f04f 0c0a 	mov.w	ip, #10
 8006192:	4620      	mov	r0, r4
 8006194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006198:	3a30      	subs	r2, #48	; 0x30
 800619a:	2a09      	cmp	r2, #9
 800619c:	d903      	bls.n	80061a6 <_vfiprintf_r+0x1ee>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0c5      	beq.n	800612e <_vfiprintf_r+0x176>
 80061a2:	9105      	str	r1, [sp, #20]
 80061a4:	e7c3      	b.n	800612e <_vfiprintf_r+0x176>
 80061a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80061aa:	4604      	mov	r4, r0
 80061ac:	2301      	movs	r3, #1
 80061ae:	e7f0      	b.n	8006192 <_vfiprintf_r+0x1da>
 80061b0:	ab03      	add	r3, sp, #12
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	462a      	mov	r2, r5
 80061b6:	4b16      	ldr	r3, [pc, #88]	; (8006210 <_vfiprintf_r+0x258>)
 80061b8:	a904      	add	r1, sp, #16
 80061ba:	4630      	mov	r0, r6
 80061bc:	f3af 8000 	nop.w
 80061c0:	4607      	mov	r7, r0
 80061c2:	1c78      	adds	r0, r7, #1
 80061c4:	d1d6      	bne.n	8006174 <_vfiprintf_r+0x1bc>
 80061c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061c8:	07d9      	lsls	r1, r3, #31
 80061ca:	d405      	bmi.n	80061d8 <_vfiprintf_r+0x220>
 80061cc:	89ab      	ldrh	r3, [r5, #12]
 80061ce:	059a      	lsls	r2, r3, #22
 80061d0:	d402      	bmi.n	80061d8 <_vfiprintf_r+0x220>
 80061d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80061d4:	f7ff fc5a 	bl	8005a8c <__retarget_lock_release_recursive>
 80061d8:	89ab      	ldrh	r3, [r5, #12]
 80061da:	065b      	lsls	r3, r3, #25
 80061dc:	f53f af12 	bmi.w	8006004 <_vfiprintf_r+0x4c>
 80061e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061e2:	e711      	b.n	8006008 <_vfiprintf_r+0x50>
 80061e4:	ab03      	add	r3, sp, #12
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	462a      	mov	r2, r5
 80061ea:	4b09      	ldr	r3, [pc, #36]	; (8006210 <_vfiprintf_r+0x258>)
 80061ec:	a904      	add	r1, sp, #16
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 f880 	bl	80062f4 <_printf_i>
 80061f4:	e7e4      	b.n	80061c0 <_vfiprintf_r+0x208>
 80061f6:	bf00      	nop
 80061f8:	08007b8c 	.word	0x08007b8c
 80061fc:	08007bac 	.word	0x08007bac
 8006200:	08007b6c 	.word	0x08007b6c
 8006204:	08007bcc 	.word	0x08007bcc
 8006208:	08007bd6 	.word	0x08007bd6
 800620c:	00000000 	.word	0x00000000
 8006210:	08005f93 	.word	0x08005f93
 8006214:	08007bd2 	.word	0x08007bd2

08006218 <_printf_common>:
 8006218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	4616      	mov	r6, r2
 800621e:	4699      	mov	r9, r3
 8006220:	688a      	ldr	r2, [r1, #8]
 8006222:	690b      	ldr	r3, [r1, #16]
 8006224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006228:	4293      	cmp	r3, r2
 800622a:	bfb8      	it	lt
 800622c:	4613      	movlt	r3, r2
 800622e:	6033      	str	r3, [r6, #0]
 8006230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006234:	4607      	mov	r7, r0
 8006236:	460c      	mov	r4, r1
 8006238:	b10a      	cbz	r2, 800623e <_printf_common+0x26>
 800623a:	3301      	adds	r3, #1
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	0699      	lsls	r1, r3, #26
 8006242:	bf42      	ittt	mi
 8006244:	6833      	ldrmi	r3, [r6, #0]
 8006246:	3302      	addmi	r3, #2
 8006248:	6033      	strmi	r3, [r6, #0]
 800624a:	6825      	ldr	r5, [r4, #0]
 800624c:	f015 0506 	ands.w	r5, r5, #6
 8006250:	d106      	bne.n	8006260 <_printf_common+0x48>
 8006252:	f104 0a19 	add.w	sl, r4, #25
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	6832      	ldr	r2, [r6, #0]
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	42ab      	cmp	r3, r5
 800625e:	dc26      	bgt.n	80062ae <_printf_common+0x96>
 8006260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006264:	1e13      	subs	r3, r2, #0
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	bf18      	it	ne
 800626a:	2301      	movne	r3, #1
 800626c:	0692      	lsls	r2, r2, #26
 800626e:	d42b      	bmi.n	80062c8 <_printf_common+0xb0>
 8006270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006274:	4649      	mov	r1, r9
 8006276:	4638      	mov	r0, r7
 8006278:	47c0      	blx	r8
 800627a:	3001      	adds	r0, #1
 800627c:	d01e      	beq.n	80062bc <_printf_common+0xa4>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	68e5      	ldr	r5, [r4, #12]
 8006282:	6832      	ldr	r2, [r6, #0]
 8006284:	f003 0306 	and.w	r3, r3, #6
 8006288:	2b04      	cmp	r3, #4
 800628a:	bf08      	it	eq
 800628c:	1aad      	subeq	r5, r5, r2
 800628e:	68a3      	ldr	r3, [r4, #8]
 8006290:	6922      	ldr	r2, [r4, #16]
 8006292:	bf0c      	ite	eq
 8006294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006298:	2500      	movne	r5, #0
 800629a:	4293      	cmp	r3, r2
 800629c:	bfc4      	itt	gt
 800629e:	1a9b      	subgt	r3, r3, r2
 80062a0:	18ed      	addgt	r5, r5, r3
 80062a2:	2600      	movs	r6, #0
 80062a4:	341a      	adds	r4, #26
 80062a6:	42b5      	cmp	r5, r6
 80062a8:	d11a      	bne.n	80062e0 <_printf_common+0xc8>
 80062aa:	2000      	movs	r0, #0
 80062ac:	e008      	b.n	80062c0 <_printf_common+0xa8>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4652      	mov	r2, sl
 80062b2:	4649      	mov	r1, r9
 80062b4:	4638      	mov	r0, r7
 80062b6:	47c0      	blx	r8
 80062b8:	3001      	adds	r0, #1
 80062ba:	d103      	bne.n	80062c4 <_printf_common+0xac>
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c4:	3501      	adds	r5, #1
 80062c6:	e7c6      	b.n	8006256 <_printf_common+0x3e>
 80062c8:	18e1      	adds	r1, r4, r3
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	2030      	movs	r0, #48	; 0x30
 80062ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062d2:	4422      	add	r2, r4
 80062d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062dc:	3302      	adds	r3, #2
 80062de:	e7c7      	b.n	8006270 <_printf_common+0x58>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4622      	mov	r2, r4
 80062e4:	4649      	mov	r1, r9
 80062e6:	4638      	mov	r0, r7
 80062e8:	47c0      	blx	r8
 80062ea:	3001      	adds	r0, #1
 80062ec:	d0e6      	beq.n	80062bc <_printf_common+0xa4>
 80062ee:	3601      	adds	r6, #1
 80062f0:	e7d9      	b.n	80062a6 <_printf_common+0x8e>
	...

080062f4 <_printf_i>:
 80062f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062f8:	460c      	mov	r4, r1
 80062fa:	4691      	mov	r9, r2
 80062fc:	7e27      	ldrb	r7, [r4, #24]
 80062fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006300:	2f78      	cmp	r7, #120	; 0x78
 8006302:	4680      	mov	r8, r0
 8006304:	469a      	mov	sl, r3
 8006306:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800630a:	d807      	bhi.n	800631c <_printf_i+0x28>
 800630c:	2f62      	cmp	r7, #98	; 0x62
 800630e:	d80a      	bhi.n	8006326 <_printf_i+0x32>
 8006310:	2f00      	cmp	r7, #0
 8006312:	f000 80d8 	beq.w	80064c6 <_printf_i+0x1d2>
 8006316:	2f58      	cmp	r7, #88	; 0x58
 8006318:	f000 80a3 	beq.w	8006462 <_printf_i+0x16e>
 800631c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006324:	e03a      	b.n	800639c <_printf_i+0xa8>
 8006326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800632a:	2b15      	cmp	r3, #21
 800632c:	d8f6      	bhi.n	800631c <_printf_i+0x28>
 800632e:	a001      	add	r0, pc, #4	; (adr r0, 8006334 <_printf_i+0x40>)
 8006330:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006334:	0800638d 	.word	0x0800638d
 8006338:	080063a1 	.word	0x080063a1
 800633c:	0800631d 	.word	0x0800631d
 8006340:	0800631d 	.word	0x0800631d
 8006344:	0800631d 	.word	0x0800631d
 8006348:	0800631d 	.word	0x0800631d
 800634c:	080063a1 	.word	0x080063a1
 8006350:	0800631d 	.word	0x0800631d
 8006354:	0800631d 	.word	0x0800631d
 8006358:	0800631d 	.word	0x0800631d
 800635c:	0800631d 	.word	0x0800631d
 8006360:	080064ad 	.word	0x080064ad
 8006364:	080063d1 	.word	0x080063d1
 8006368:	0800648f 	.word	0x0800648f
 800636c:	0800631d 	.word	0x0800631d
 8006370:	0800631d 	.word	0x0800631d
 8006374:	080064cf 	.word	0x080064cf
 8006378:	0800631d 	.word	0x0800631d
 800637c:	080063d1 	.word	0x080063d1
 8006380:	0800631d 	.word	0x0800631d
 8006384:	0800631d 	.word	0x0800631d
 8006388:	08006497 	.word	0x08006497
 800638c:	680b      	ldr	r3, [r1, #0]
 800638e:	1d1a      	adds	r2, r3, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	600a      	str	r2, [r1, #0]
 8006394:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800639c:	2301      	movs	r3, #1
 800639e:	e0a3      	b.n	80064e8 <_printf_i+0x1f4>
 80063a0:	6825      	ldr	r5, [r4, #0]
 80063a2:	6808      	ldr	r0, [r1, #0]
 80063a4:	062e      	lsls	r6, r5, #24
 80063a6:	f100 0304 	add.w	r3, r0, #4
 80063aa:	d50a      	bpl.n	80063c2 <_printf_i+0xce>
 80063ac:	6805      	ldr	r5, [r0, #0]
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	2d00      	cmp	r5, #0
 80063b2:	da03      	bge.n	80063bc <_printf_i+0xc8>
 80063b4:	232d      	movs	r3, #45	; 0x2d
 80063b6:	426d      	negs	r5, r5
 80063b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063bc:	485e      	ldr	r0, [pc, #376]	; (8006538 <_printf_i+0x244>)
 80063be:	230a      	movs	r3, #10
 80063c0:	e019      	b.n	80063f6 <_printf_i+0x102>
 80063c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80063c6:	6805      	ldr	r5, [r0, #0]
 80063c8:	600b      	str	r3, [r1, #0]
 80063ca:	bf18      	it	ne
 80063cc:	b22d      	sxthne	r5, r5
 80063ce:	e7ef      	b.n	80063b0 <_printf_i+0xbc>
 80063d0:	680b      	ldr	r3, [r1, #0]
 80063d2:	6825      	ldr	r5, [r4, #0]
 80063d4:	1d18      	adds	r0, r3, #4
 80063d6:	6008      	str	r0, [r1, #0]
 80063d8:	0628      	lsls	r0, r5, #24
 80063da:	d501      	bpl.n	80063e0 <_printf_i+0xec>
 80063dc:	681d      	ldr	r5, [r3, #0]
 80063de:	e002      	b.n	80063e6 <_printf_i+0xf2>
 80063e0:	0669      	lsls	r1, r5, #25
 80063e2:	d5fb      	bpl.n	80063dc <_printf_i+0xe8>
 80063e4:	881d      	ldrh	r5, [r3, #0]
 80063e6:	4854      	ldr	r0, [pc, #336]	; (8006538 <_printf_i+0x244>)
 80063e8:	2f6f      	cmp	r7, #111	; 0x6f
 80063ea:	bf0c      	ite	eq
 80063ec:	2308      	moveq	r3, #8
 80063ee:	230a      	movne	r3, #10
 80063f0:	2100      	movs	r1, #0
 80063f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063f6:	6866      	ldr	r6, [r4, #4]
 80063f8:	60a6      	str	r6, [r4, #8]
 80063fa:	2e00      	cmp	r6, #0
 80063fc:	bfa2      	ittt	ge
 80063fe:	6821      	ldrge	r1, [r4, #0]
 8006400:	f021 0104 	bicge.w	r1, r1, #4
 8006404:	6021      	strge	r1, [r4, #0]
 8006406:	b90d      	cbnz	r5, 800640c <_printf_i+0x118>
 8006408:	2e00      	cmp	r6, #0
 800640a:	d04d      	beq.n	80064a8 <_printf_i+0x1b4>
 800640c:	4616      	mov	r6, r2
 800640e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006412:	fb03 5711 	mls	r7, r3, r1, r5
 8006416:	5dc7      	ldrb	r7, [r0, r7]
 8006418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800641c:	462f      	mov	r7, r5
 800641e:	42bb      	cmp	r3, r7
 8006420:	460d      	mov	r5, r1
 8006422:	d9f4      	bls.n	800640e <_printf_i+0x11a>
 8006424:	2b08      	cmp	r3, #8
 8006426:	d10b      	bne.n	8006440 <_printf_i+0x14c>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	07df      	lsls	r7, r3, #31
 800642c:	d508      	bpl.n	8006440 <_printf_i+0x14c>
 800642e:	6923      	ldr	r3, [r4, #16]
 8006430:	6861      	ldr	r1, [r4, #4]
 8006432:	4299      	cmp	r1, r3
 8006434:	bfde      	ittt	le
 8006436:	2330      	movle	r3, #48	; 0x30
 8006438:	f806 3c01 	strble.w	r3, [r6, #-1]
 800643c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006440:	1b92      	subs	r2, r2, r6
 8006442:	6122      	str	r2, [r4, #16]
 8006444:	f8cd a000 	str.w	sl, [sp]
 8006448:	464b      	mov	r3, r9
 800644a:	aa03      	add	r2, sp, #12
 800644c:	4621      	mov	r1, r4
 800644e:	4640      	mov	r0, r8
 8006450:	f7ff fee2 	bl	8006218 <_printf_common>
 8006454:	3001      	adds	r0, #1
 8006456:	d14c      	bne.n	80064f2 <_printf_i+0x1fe>
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	b004      	add	sp, #16
 800645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006462:	4835      	ldr	r0, [pc, #212]	; (8006538 <_printf_i+0x244>)
 8006464:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	680e      	ldr	r6, [r1, #0]
 800646c:	061f      	lsls	r7, r3, #24
 800646e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006472:	600e      	str	r6, [r1, #0]
 8006474:	d514      	bpl.n	80064a0 <_printf_i+0x1ac>
 8006476:	07d9      	lsls	r1, r3, #31
 8006478:	bf44      	itt	mi
 800647a:	f043 0320 	orrmi.w	r3, r3, #32
 800647e:	6023      	strmi	r3, [r4, #0]
 8006480:	b91d      	cbnz	r5, 800648a <_printf_i+0x196>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	f023 0320 	bic.w	r3, r3, #32
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	2310      	movs	r3, #16
 800648c:	e7b0      	b.n	80063f0 <_printf_i+0xfc>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	f043 0320 	orr.w	r3, r3, #32
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	2378      	movs	r3, #120	; 0x78
 8006498:	4828      	ldr	r0, [pc, #160]	; (800653c <_printf_i+0x248>)
 800649a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800649e:	e7e3      	b.n	8006468 <_printf_i+0x174>
 80064a0:	065e      	lsls	r6, r3, #25
 80064a2:	bf48      	it	mi
 80064a4:	b2ad      	uxthmi	r5, r5
 80064a6:	e7e6      	b.n	8006476 <_printf_i+0x182>
 80064a8:	4616      	mov	r6, r2
 80064aa:	e7bb      	b.n	8006424 <_printf_i+0x130>
 80064ac:	680b      	ldr	r3, [r1, #0]
 80064ae:	6826      	ldr	r6, [r4, #0]
 80064b0:	6960      	ldr	r0, [r4, #20]
 80064b2:	1d1d      	adds	r5, r3, #4
 80064b4:	600d      	str	r5, [r1, #0]
 80064b6:	0635      	lsls	r5, r6, #24
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	d501      	bpl.n	80064c0 <_printf_i+0x1cc>
 80064bc:	6018      	str	r0, [r3, #0]
 80064be:	e002      	b.n	80064c6 <_printf_i+0x1d2>
 80064c0:	0671      	lsls	r1, r6, #25
 80064c2:	d5fb      	bpl.n	80064bc <_printf_i+0x1c8>
 80064c4:	8018      	strh	r0, [r3, #0]
 80064c6:	2300      	movs	r3, #0
 80064c8:	6123      	str	r3, [r4, #16]
 80064ca:	4616      	mov	r6, r2
 80064cc:	e7ba      	b.n	8006444 <_printf_i+0x150>
 80064ce:	680b      	ldr	r3, [r1, #0]
 80064d0:	1d1a      	adds	r2, r3, #4
 80064d2:	600a      	str	r2, [r1, #0]
 80064d4:	681e      	ldr	r6, [r3, #0]
 80064d6:	6862      	ldr	r2, [r4, #4]
 80064d8:	2100      	movs	r1, #0
 80064da:	4630      	mov	r0, r6
 80064dc:	f7f9 fe80 	bl	80001e0 <memchr>
 80064e0:	b108      	cbz	r0, 80064e6 <_printf_i+0x1f2>
 80064e2:	1b80      	subs	r0, r0, r6
 80064e4:	6060      	str	r0, [r4, #4]
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	6123      	str	r3, [r4, #16]
 80064ea:	2300      	movs	r3, #0
 80064ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f0:	e7a8      	b.n	8006444 <_printf_i+0x150>
 80064f2:	6923      	ldr	r3, [r4, #16]
 80064f4:	4632      	mov	r2, r6
 80064f6:	4649      	mov	r1, r9
 80064f8:	4640      	mov	r0, r8
 80064fa:	47d0      	blx	sl
 80064fc:	3001      	adds	r0, #1
 80064fe:	d0ab      	beq.n	8006458 <_printf_i+0x164>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	079b      	lsls	r3, r3, #30
 8006504:	d413      	bmi.n	800652e <_printf_i+0x23a>
 8006506:	68e0      	ldr	r0, [r4, #12]
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	4298      	cmp	r0, r3
 800650c:	bfb8      	it	lt
 800650e:	4618      	movlt	r0, r3
 8006510:	e7a4      	b.n	800645c <_printf_i+0x168>
 8006512:	2301      	movs	r3, #1
 8006514:	4632      	mov	r2, r6
 8006516:	4649      	mov	r1, r9
 8006518:	4640      	mov	r0, r8
 800651a:	47d0      	blx	sl
 800651c:	3001      	adds	r0, #1
 800651e:	d09b      	beq.n	8006458 <_printf_i+0x164>
 8006520:	3501      	adds	r5, #1
 8006522:	68e3      	ldr	r3, [r4, #12]
 8006524:	9903      	ldr	r1, [sp, #12]
 8006526:	1a5b      	subs	r3, r3, r1
 8006528:	42ab      	cmp	r3, r5
 800652a:	dcf2      	bgt.n	8006512 <_printf_i+0x21e>
 800652c:	e7eb      	b.n	8006506 <_printf_i+0x212>
 800652e:	2500      	movs	r5, #0
 8006530:	f104 0619 	add.w	r6, r4, #25
 8006534:	e7f5      	b.n	8006522 <_printf_i+0x22e>
 8006536:	bf00      	nop
 8006538:	08007bdd 	.word	0x08007bdd
 800653c:	08007bee 	.word	0x08007bee

08006540 <__srget_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	460c      	mov	r4, r1
 8006544:	4605      	mov	r5, r0
 8006546:	b118      	cbz	r0, 8006550 <__srget_r+0x10>
 8006548:	6983      	ldr	r3, [r0, #24]
 800654a:	b90b      	cbnz	r3, 8006550 <__srget_r+0x10>
 800654c:	f7ff f9a2 	bl	8005894 <__sinit>
 8006550:	4b0e      	ldr	r3, [pc, #56]	; (800658c <__srget_r+0x4c>)
 8006552:	429c      	cmp	r4, r3
 8006554:	d10d      	bne.n	8006572 <__srget_r+0x32>
 8006556:	686c      	ldr	r4, [r5, #4]
 8006558:	4621      	mov	r1, r4
 800655a:	4628      	mov	r0, r5
 800655c:	f000 f93c 	bl	80067d8 <__srefill_r>
 8006560:	b988      	cbnz	r0, 8006586 <__srget_r+0x46>
 8006562:	6863      	ldr	r3, [r4, #4]
 8006564:	3b01      	subs	r3, #1
 8006566:	6063      	str	r3, [r4, #4]
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	6022      	str	r2, [r4, #0]
 800656e:	7818      	ldrb	r0, [r3, #0]
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <__srget_r+0x50>)
 8006574:	429c      	cmp	r4, r3
 8006576:	d101      	bne.n	800657c <__srget_r+0x3c>
 8006578:	68ac      	ldr	r4, [r5, #8]
 800657a:	e7ed      	b.n	8006558 <__srget_r+0x18>
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <__srget_r+0x54>)
 800657e:	429c      	cmp	r4, r3
 8006580:	bf08      	it	eq
 8006582:	68ec      	ldreq	r4, [r5, #12]
 8006584:	e7e8      	b.n	8006558 <__srget_r+0x18>
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	e7f1      	b.n	8006570 <__srget_r+0x30>
 800658c:	08007b8c 	.word	0x08007b8c
 8006590:	08007bac 	.word	0x08007bac
 8006594:	08007b6c 	.word	0x08007b6c

08006598 <_sbrk_r>:
 8006598:	b538      	push	{r3, r4, r5, lr}
 800659a:	4d06      	ldr	r5, [pc, #24]	; (80065b4 <_sbrk_r+0x1c>)
 800659c:	2300      	movs	r3, #0
 800659e:	4604      	mov	r4, r0
 80065a0:	4608      	mov	r0, r1
 80065a2:	602b      	str	r3, [r5, #0]
 80065a4:	f7fb fc20 	bl	8001de8 <_sbrk>
 80065a8:	1c43      	adds	r3, r0, #1
 80065aa:	d102      	bne.n	80065b2 <_sbrk_r+0x1a>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	b103      	cbz	r3, 80065b2 <_sbrk_r+0x1a>
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	bd38      	pop	{r3, r4, r5, pc}
 80065b4:	2000039c 	.word	0x2000039c

080065b8 <__sread>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	460c      	mov	r4, r1
 80065bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c0:	f000 f8ee 	bl	80067a0 <_read_r>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	bfab      	itete	ge
 80065c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065ca:	89a3      	ldrhlt	r3, [r4, #12]
 80065cc:	181b      	addge	r3, r3, r0
 80065ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065d2:	bfac      	ite	ge
 80065d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065d6:	81a3      	strhlt	r3, [r4, #12]
 80065d8:	bd10      	pop	{r4, pc}

080065da <__swrite>:
 80065da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065de:	461f      	mov	r7, r3
 80065e0:	898b      	ldrh	r3, [r1, #12]
 80065e2:	05db      	lsls	r3, r3, #23
 80065e4:	4605      	mov	r5, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	4616      	mov	r6, r2
 80065ea:	d505      	bpl.n	80065f8 <__swrite+0x1e>
 80065ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f0:	2302      	movs	r3, #2
 80065f2:	2200      	movs	r2, #0
 80065f4:	f000 f868 	bl	80066c8 <_lseek_r>
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	4632      	mov	r2, r6
 8006606:	463b      	mov	r3, r7
 8006608:	4628      	mov	r0, r5
 800660a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800660e:	f000 b817 	b.w	8006640 <_write_r>

08006612 <__sseek>:
 8006612:	b510      	push	{r4, lr}
 8006614:	460c      	mov	r4, r1
 8006616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661a:	f000 f855 	bl	80066c8 <_lseek_r>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	bf15      	itete	ne
 8006624:	6560      	strne	r0, [r4, #84]	; 0x54
 8006626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800662a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800662e:	81a3      	strheq	r3, [r4, #12]
 8006630:	bf18      	it	ne
 8006632:	81a3      	strhne	r3, [r4, #12]
 8006634:	bd10      	pop	{r4, pc}

08006636 <__sclose>:
 8006636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663a:	f000 b813 	b.w	8006664 <_close_r>
	...

08006640 <_write_r>:
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4d07      	ldr	r5, [pc, #28]	; (8006660 <_write_r+0x20>)
 8006644:	4604      	mov	r4, r0
 8006646:	4608      	mov	r0, r1
 8006648:	4611      	mov	r1, r2
 800664a:	2200      	movs	r2, #0
 800664c:	602a      	str	r2, [r5, #0]
 800664e:	461a      	mov	r2, r3
 8006650:	f7fb fb74 	bl	8001d3c <_write>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <_write_r+0x1e>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	b103      	cbz	r3, 800665e <_write_r+0x1e>
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	2000039c 	.word	0x2000039c

08006664 <_close_r>:
 8006664:	b538      	push	{r3, r4, r5, lr}
 8006666:	4d06      	ldr	r5, [pc, #24]	; (8006680 <_close_r+0x1c>)
 8006668:	2300      	movs	r3, #0
 800666a:	4604      	mov	r4, r0
 800666c:	4608      	mov	r0, r1
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	f7fb fb86 	bl	8001d80 <_close>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_close_r+0x1a>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_close_r+0x1a>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	2000039c 	.word	0x2000039c

08006684 <_fstat_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d07      	ldr	r5, [pc, #28]	; (80066a4 <_fstat_r+0x20>)
 8006688:	2300      	movs	r3, #0
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	4611      	mov	r1, r2
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	f7fb fb81 	bl	8001d98 <_fstat>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d102      	bne.n	80066a0 <_fstat_r+0x1c>
 800669a:	682b      	ldr	r3, [r5, #0]
 800669c:	b103      	cbz	r3, 80066a0 <_fstat_r+0x1c>
 800669e:	6023      	str	r3, [r4, #0]
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
 80066a2:	bf00      	nop
 80066a4:	2000039c 	.word	0x2000039c

080066a8 <_isatty_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d06      	ldr	r5, [pc, #24]	; (80066c4 <_isatty_r+0x1c>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fb fb80 	bl	8001db8 <_isatty>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_isatty_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_isatty_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	2000039c 	.word	0x2000039c

080066c8 <_lseek_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4d07      	ldr	r5, [pc, #28]	; (80066e8 <_lseek_r+0x20>)
 80066cc:	4604      	mov	r4, r0
 80066ce:	4608      	mov	r0, r1
 80066d0:	4611      	mov	r1, r2
 80066d2:	2200      	movs	r2, #0
 80066d4:	602a      	str	r2, [r5, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	f7fb fb79 	bl	8001dce <_lseek>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_lseek_r+0x1e>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_lseek_r+0x1e>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	2000039c 	.word	0x2000039c

080066ec <memcpy>:
 80066ec:	440a      	add	r2, r1
 80066ee:	4291      	cmp	r1, r2
 80066f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f4:	d100      	bne.n	80066f8 <memcpy+0xc>
 80066f6:	4770      	bx	lr
 80066f8:	b510      	push	{r4, lr}
 80066fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006702:	4291      	cmp	r1, r2
 8006704:	d1f9      	bne.n	80066fa <memcpy+0xe>
 8006706:	bd10      	pop	{r4, pc}

08006708 <memmove>:
 8006708:	4288      	cmp	r0, r1
 800670a:	b510      	push	{r4, lr}
 800670c:	eb01 0402 	add.w	r4, r1, r2
 8006710:	d902      	bls.n	8006718 <memmove+0x10>
 8006712:	4284      	cmp	r4, r0
 8006714:	4623      	mov	r3, r4
 8006716:	d807      	bhi.n	8006728 <memmove+0x20>
 8006718:	1e43      	subs	r3, r0, #1
 800671a:	42a1      	cmp	r1, r4
 800671c:	d008      	beq.n	8006730 <memmove+0x28>
 800671e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006722:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006726:	e7f8      	b.n	800671a <memmove+0x12>
 8006728:	4402      	add	r2, r0
 800672a:	4601      	mov	r1, r0
 800672c:	428a      	cmp	r2, r1
 800672e:	d100      	bne.n	8006732 <memmove+0x2a>
 8006730:	bd10      	pop	{r4, pc}
 8006732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800673a:	e7f7      	b.n	800672c <memmove+0x24>

0800673c <__malloc_lock>:
 800673c:	4801      	ldr	r0, [pc, #4]	; (8006744 <__malloc_lock+0x8>)
 800673e:	f7ff b9a4 	b.w	8005a8a <__retarget_lock_acquire_recursive>
 8006742:	bf00      	nop
 8006744:	20000394 	.word	0x20000394

08006748 <__malloc_unlock>:
 8006748:	4801      	ldr	r0, [pc, #4]	; (8006750 <__malloc_unlock+0x8>)
 800674a:	f7ff b99f 	b.w	8005a8c <__retarget_lock_release_recursive>
 800674e:	bf00      	nop
 8006750:	20000394 	.word	0x20000394

08006754 <_realloc_r>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	4607      	mov	r7, r0
 8006758:	4614      	mov	r4, r2
 800675a:	460e      	mov	r6, r1
 800675c:	b921      	cbnz	r1, 8006768 <_realloc_r+0x14>
 800675e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006762:	4611      	mov	r1, r2
 8006764:	f7ff ba48 	b.w	8005bf8 <_malloc_r>
 8006768:	b922      	cbnz	r2, 8006774 <_realloc_r+0x20>
 800676a:	f7ff f9f5 	bl	8005b58 <_free_r>
 800676e:	4625      	mov	r5, r4
 8006770:	4628      	mov	r0, r5
 8006772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006774:	f000 f8ba 	bl	80068ec <_malloc_usable_size_r>
 8006778:	42a0      	cmp	r0, r4
 800677a:	d20f      	bcs.n	800679c <_realloc_r+0x48>
 800677c:	4621      	mov	r1, r4
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff fa3a 	bl	8005bf8 <_malloc_r>
 8006784:	4605      	mov	r5, r0
 8006786:	2800      	cmp	r0, #0
 8006788:	d0f2      	beq.n	8006770 <_realloc_r+0x1c>
 800678a:	4631      	mov	r1, r6
 800678c:	4622      	mov	r2, r4
 800678e:	f7ff ffad 	bl	80066ec <memcpy>
 8006792:	4631      	mov	r1, r6
 8006794:	4638      	mov	r0, r7
 8006796:	f7ff f9df 	bl	8005b58 <_free_r>
 800679a:	e7e9      	b.n	8006770 <_realloc_r+0x1c>
 800679c:	4635      	mov	r5, r6
 800679e:	e7e7      	b.n	8006770 <_realloc_r+0x1c>

080067a0 <_read_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4d07      	ldr	r5, [pc, #28]	; (80067c0 <_read_r+0x20>)
 80067a4:	4604      	mov	r4, r0
 80067a6:	4608      	mov	r0, r1
 80067a8:	4611      	mov	r1, r2
 80067aa:	2200      	movs	r2, #0
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	461a      	mov	r2, r3
 80067b0:	f7fb faa6 	bl	8001d00 <_read>
 80067b4:	1c43      	adds	r3, r0, #1
 80067b6:	d102      	bne.n	80067be <_read_r+0x1e>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	b103      	cbz	r3, 80067be <_read_r+0x1e>
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	bd38      	pop	{r3, r4, r5, pc}
 80067c0:	2000039c 	.word	0x2000039c

080067c4 <lflush>:
 80067c4:	8983      	ldrh	r3, [r0, #12]
 80067c6:	f003 0309 	and.w	r3, r3, #9
 80067ca:	2b09      	cmp	r3, #9
 80067cc:	d101      	bne.n	80067d2 <lflush+0xe>
 80067ce:	f7fe bff7 	b.w	80057c0 <fflush>
 80067d2:	2000      	movs	r0, #0
 80067d4:	4770      	bx	lr
	...

080067d8 <__srefill_r>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	460c      	mov	r4, r1
 80067dc:	4605      	mov	r5, r0
 80067de:	b118      	cbz	r0, 80067e8 <__srefill_r+0x10>
 80067e0:	6983      	ldr	r3, [r0, #24]
 80067e2:	b90b      	cbnz	r3, 80067e8 <__srefill_r+0x10>
 80067e4:	f7ff f856 	bl	8005894 <__sinit>
 80067e8:	4b3b      	ldr	r3, [pc, #236]	; (80068d8 <__srefill_r+0x100>)
 80067ea:	429c      	cmp	r4, r3
 80067ec:	d10a      	bne.n	8006804 <__srefill_r+0x2c>
 80067ee:	686c      	ldr	r4, [r5, #4]
 80067f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067f4:	2300      	movs	r3, #0
 80067f6:	6063      	str	r3, [r4, #4]
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	069e      	lsls	r6, r3, #26
 80067fc:	d50c      	bpl.n	8006818 <__srefill_r+0x40>
 80067fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006802:	e066      	b.n	80068d2 <__srefill_r+0xfa>
 8006804:	4b35      	ldr	r3, [pc, #212]	; (80068dc <__srefill_r+0x104>)
 8006806:	429c      	cmp	r4, r3
 8006808:	d101      	bne.n	800680e <__srefill_r+0x36>
 800680a:	68ac      	ldr	r4, [r5, #8]
 800680c:	e7f0      	b.n	80067f0 <__srefill_r+0x18>
 800680e:	4b34      	ldr	r3, [pc, #208]	; (80068e0 <__srefill_r+0x108>)
 8006810:	429c      	cmp	r4, r3
 8006812:	bf08      	it	eq
 8006814:	68ec      	ldreq	r4, [r5, #12]
 8006816:	e7eb      	b.n	80067f0 <__srefill_r+0x18>
 8006818:	0758      	lsls	r0, r3, #29
 800681a:	d448      	bmi.n	80068ae <__srefill_r+0xd6>
 800681c:	06d9      	lsls	r1, r3, #27
 800681e:	d405      	bmi.n	800682c <__srefill_r+0x54>
 8006820:	2309      	movs	r3, #9
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	e7e8      	b.n	80067fe <__srefill_r+0x26>
 800682c:	071a      	lsls	r2, r3, #28
 800682e:	d50b      	bpl.n	8006848 <__srefill_r+0x70>
 8006830:	4621      	mov	r1, r4
 8006832:	4628      	mov	r0, r5
 8006834:	f7fe ff88 	bl	8005748 <_fflush_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	d1e0      	bne.n	80067fe <__srefill_r+0x26>
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	60a0      	str	r0, [r4, #8]
 8006840:	f023 0308 	bic.w	r3, r3, #8
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	61a0      	str	r0, [r4, #24]
 8006848:	89a3      	ldrh	r3, [r4, #12]
 800684a:	f043 0304 	orr.w	r3, r3, #4
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	b91b      	cbnz	r3, 800685c <__srefill_r+0x84>
 8006854:	4621      	mov	r1, r4
 8006856:	4628      	mov	r0, r5
 8006858:	f7ff f93e 	bl	8005ad8 <__smakebuf_r>
 800685c:	89a6      	ldrh	r6, [r4, #12]
 800685e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006862:	07b3      	lsls	r3, r6, #30
 8006864:	d00f      	beq.n	8006886 <__srefill_r+0xae>
 8006866:	2301      	movs	r3, #1
 8006868:	81a3      	strh	r3, [r4, #12]
 800686a:	4b1e      	ldr	r3, [pc, #120]	; (80068e4 <__srefill_r+0x10c>)
 800686c:	491e      	ldr	r1, [pc, #120]	; (80068e8 <__srefill_r+0x110>)
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	f006 0609 	and.w	r6, r6, #9
 8006874:	f7ff f88c 	bl	8005990 <_fwalk>
 8006878:	2e09      	cmp	r6, #9
 800687a:	81a7      	strh	r7, [r4, #12]
 800687c:	d103      	bne.n	8006886 <__srefill_r+0xae>
 800687e:	4621      	mov	r1, r4
 8006880:	4628      	mov	r0, r5
 8006882:	f7fe fedb 	bl	800563c <__sflush_r>
 8006886:	6922      	ldr	r2, [r4, #16]
 8006888:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800688a:	6963      	ldr	r3, [r4, #20]
 800688c:	6a21      	ldr	r1, [r4, #32]
 800688e:	6022      	str	r2, [r4, #0]
 8006890:	4628      	mov	r0, r5
 8006892:	47b0      	blx	r6
 8006894:	2800      	cmp	r0, #0
 8006896:	6060      	str	r0, [r4, #4]
 8006898:	dc1c      	bgt.n	80068d4 <__srefill_r+0xfc>
 800689a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800689e:	bf17      	itett	ne
 80068a0:	2200      	movne	r2, #0
 80068a2:	f043 0320 	orreq.w	r3, r3, #32
 80068a6:	6062      	strne	r2, [r4, #4]
 80068a8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80068ac:	e7bc      	b.n	8006828 <__srefill_r+0x50>
 80068ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068b0:	2900      	cmp	r1, #0
 80068b2:	d0cd      	beq.n	8006850 <__srefill_r+0x78>
 80068b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068b8:	4299      	cmp	r1, r3
 80068ba:	d002      	beq.n	80068c2 <__srefill_r+0xea>
 80068bc:	4628      	mov	r0, r5
 80068be:	f7ff f94b 	bl	8005b58 <_free_r>
 80068c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068c4:	6063      	str	r3, [r4, #4]
 80068c6:	2000      	movs	r0, #0
 80068c8:	6360      	str	r0, [r4, #52]	; 0x34
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0c0      	beq.n	8006850 <__srefill_r+0x78>
 80068ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068d4:	2000      	movs	r0, #0
 80068d6:	e7fc      	b.n	80068d2 <__srefill_r+0xfa>
 80068d8:	08007b8c 	.word	0x08007b8c
 80068dc:	08007bac 	.word	0x08007bac
 80068e0:	08007b6c 	.word	0x08007b6c
 80068e4:	08007b68 	.word	0x08007b68
 80068e8:	080067c5 	.word	0x080067c5

080068ec <_malloc_usable_size_r>:
 80068ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f0:	1f18      	subs	r0, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bfbc      	itt	lt
 80068f6:	580b      	ldrlt	r3, [r1, r0]
 80068f8:	18c0      	addlt	r0, r0, r3
 80068fa:	4770      	bx	lr
 80068fc:	0000      	movs	r0, r0
	...

08006900 <sin>:
 8006900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006902:	ec53 2b10 	vmov	r2, r3, d0
 8006906:	4826      	ldr	r0, [pc, #152]	; (80069a0 <sin+0xa0>)
 8006908:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800690c:	4281      	cmp	r1, r0
 800690e:	dc07      	bgt.n	8006920 <sin+0x20>
 8006910:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006998 <sin+0x98>
 8006914:	2000      	movs	r0, #0
 8006916:	f000 fe5b 	bl	80075d0 <__kernel_sin>
 800691a:	ec51 0b10 	vmov	r0, r1, d0
 800691e:	e007      	b.n	8006930 <sin+0x30>
 8006920:	4820      	ldr	r0, [pc, #128]	; (80069a4 <sin+0xa4>)
 8006922:	4281      	cmp	r1, r0
 8006924:	dd09      	ble.n	800693a <sin+0x3a>
 8006926:	ee10 0a10 	vmov	r0, s0
 800692a:	4619      	mov	r1, r3
 800692c:	f7f9 fcac 	bl	8000288 <__aeabi_dsub>
 8006930:	ec41 0b10 	vmov	d0, r0, r1
 8006934:	b005      	add	sp, #20
 8006936:	f85d fb04 	ldr.w	pc, [sp], #4
 800693a:	4668      	mov	r0, sp
 800693c:	f000 f834 	bl	80069a8 <__ieee754_rem_pio2>
 8006940:	f000 0003 	and.w	r0, r0, #3
 8006944:	2801      	cmp	r0, #1
 8006946:	d008      	beq.n	800695a <sin+0x5a>
 8006948:	2802      	cmp	r0, #2
 800694a:	d00d      	beq.n	8006968 <sin+0x68>
 800694c:	b9d0      	cbnz	r0, 8006984 <sin+0x84>
 800694e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006952:	ed9d 0b00 	vldr	d0, [sp]
 8006956:	2001      	movs	r0, #1
 8006958:	e7dd      	b.n	8006916 <sin+0x16>
 800695a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800695e:	ed9d 0b00 	vldr	d0, [sp]
 8006962:	f000 fa2d 	bl	8006dc0 <__kernel_cos>
 8006966:	e7d8      	b.n	800691a <sin+0x1a>
 8006968:	ed9d 1b02 	vldr	d1, [sp, #8]
 800696c:	ed9d 0b00 	vldr	d0, [sp]
 8006970:	2001      	movs	r0, #1
 8006972:	f000 fe2d 	bl	80075d0 <__kernel_sin>
 8006976:	ec53 2b10 	vmov	r2, r3, d0
 800697a:	ee10 0a10 	vmov	r0, s0
 800697e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006982:	e7d5      	b.n	8006930 <sin+0x30>
 8006984:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006988:	ed9d 0b00 	vldr	d0, [sp]
 800698c:	f000 fa18 	bl	8006dc0 <__kernel_cos>
 8006990:	e7f1      	b.n	8006976 <sin+0x76>
 8006992:	bf00      	nop
 8006994:	f3af 8000 	nop.w
	...
 80069a0:	3fe921fb 	.word	0x3fe921fb
 80069a4:	7fefffff 	.word	0x7fefffff

080069a8 <__ieee754_rem_pio2>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	ed2d 8b02 	vpush	{d8}
 80069b0:	ec55 4b10 	vmov	r4, r5, d0
 80069b4:	4bca      	ldr	r3, [pc, #808]	; (8006ce0 <__ieee754_rem_pio2+0x338>)
 80069b6:	b08b      	sub	sp, #44	; 0x2c
 80069b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80069bc:	4598      	cmp	r8, r3
 80069be:	4682      	mov	sl, r0
 80069c0:	9502      	str	r5, [sp, #8]
 80069c2:	dc08      	bgt.n	80069d6 <__ieee754_rem_pio2+0x2e>
 80069c4:	2200      	movs	r2, #0
 80069c6:	2300      	movs	r3, #0
 80069c8:	ed80 0b00 	vstr	d0, [r0]
 80069cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80069d0:	f04f 0b00 	mov.w	fp, #0
 80069d4:	e028      	b.n	8006a28 <__ieee754_rem_pio2+0x80>
 80069d6:	4bc3      	ldr	r3, [pc, #780]	; (8006ce4 <__ieee754_rem_pio2+0x33c>)
 80069d8:	4598      	cmp	r8, r3
 80069da:	dc78      	bgt.n	8006ace <__ieee754_rem_pio2+0x126>
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	4ec2      	ldr	r6, [pc, #776]	; (8006ce8 <__ieee754_rem_pio2+0x340>)
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	ee10 0a10 	vmov	r0, s0
 80069e6:	a3b0      	add	r3, pc, #704	; (adr r3, 8006ca8 <__ieee754_rem_pio2+0x300>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	4629      	mov	r1, r5
 80069ee:	dd39      	ble.n	8006a64 <__ieee754_rem_pio2+0xbc>
 80069f0:	f7f9 fc4a 	bl	8000288 <__aeabi_dsub>
 80069f4:	45b0      	cmp	r8, r6
 80069f6:	4604      	mov	r4, r0
 80069f8:	460d      	mov	r5, r1
 80069fa:	d01b      	beq.n	8006a34 <__ieee754_rem_pio2+0x8c>
 80069fc:	a3ac      	add	r3, pc, #688	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x308>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f7f9 fc41 	bl	8000288 <__aeabi_dsub>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	e9ca 2300 	strd	r2, r3, [sl]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7f9 fc39 	bl	8000288 <__aeabi_dsub>
 8006a16:	a3a6      	add	r3, pc, #664	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x308>)
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f7f9 fc34 	bl	8000288 <__aeabi_dsub>
 8006a20:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a24:	f04f 0b01 	mov.w	fp, #1
 8006a28:	4658      	mov	r0, fp
 8006a2a:	b00b      	add	sp, #44	; 0x2c
 8006a2c:	ecbd 8b02 	vpop	{d8}
 8006a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a34:	a3a0      	add	r3, pc, #640	; (adr r3, 8006cb8 <__ieee754_rem_pio2+0x310>)
 8006a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3a:	f7f9 fc25 	bl	8000288 <__aeabi_dsub>
 8006a3e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006cc0 <__ieee754_rem_pio2+0x318>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	4604      	mov	r4, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	f7f9 fc1e 	bl	8000288 <__aeabi_dsub>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	e9ca 2300 	strd	r2, r3, [sl]
 8006a54:	4620      	mov	r0, r4
 8006a56:	4629      	mov	r1, r5
 8006a58:	f7f9 fc16 	bl	8000288 <__aeabi_dsub>
 8006a5c:	a398      	add	r3, pc, #608	; (adr r3, 8006cc0 <__ieee754_rem_pio2+0x318>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	e7db      	b.n	8006a1c <__ieee754_rem_pio2+0x74>
 8006a64:	f7f9 fc12 	bl	800028c <__adddf3>
 8006a68:	45b0      	cmp	r8, r6
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	460d      	mov	r5, r1
 8006a6e:	d016      	beq.n	8006a9e <__ieee754_rem_pio2+0xf6>
 8006a70:	a38f      	add	r3, pc, #572	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x308>)
 8006a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a76:	f7f9 fc09 	bl	800028c <__adddf3>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	e9ca 2300 	strd	r2, r3, [sl]
 8006a82:	4620      	mov	r0, r4
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7f9 fbff 	bl	8000288 <__aeabi_dsub>
 8006a8a:	a389      	add	r3, pc, #548	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x308>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fbfc 	bl	800028c <__adddf3>
 8006a94:	f04f 3bff 	mov.w	fp, #4294967295
 8006a98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a9c:	e7c4      	b.n	8006a28 <__ieee754_rem_pio2+0x80>
 8006a9e:	a386      	add	r3, pc, #536	; (adr r3, 8006cb8 <__ieee754_rem_pio2+0x310>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fbf2 	bl	800028c <__adddf3>
 8006aa8:	a385      	add	r3, pc, #532	; (adr r3, 8006cc0 <__ieee754_rem_pio2+0x318>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	4604      	mov	r4, r0
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	f7f9 fbeb 	bl	800028c <__adddf3>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	e9ca 2300 	strd	r2, r3, [sl]
 8006abe:	4620      	mov	r0, r4
 8006ac0:	4629      	mov	r1, r5
 8006ac2:	f7f9 fbe1 	bl	8000288 <__aeabi_dsub>
 8006ac6:	a37e      	add	r3, pc, #504	; (adr r3, 8006cc0 <__ieee754_rem_pio2+0x318>)
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	e7e0      	b.n	8006a90 <__ieee754_rem_pio2+0xe8>
 8006ace:	4b87      	ldr	r3, [pc, #540]	; (8006cec <__ieee754_rem_pio2+0x344>)
 8006ad0:	4598      	cmp	r8, r3
 8006ad2:	f300 80d9 	bgt.w	8006c88 <__ieee754_rem_pio2+0x2e0>
 8006ad6:	f000 fe39 	bl	800774c <fabs>
 8006ada:	ec55 4b10 	vmov	r4, r5, d0
 8006ade:	ee10 0a10 	vmov	r0, s0
 8006ae2:	a379      	add	r3, pc, #484	; (adr r3, 8006cc8 <__ieee754_rem_pio2+0x320>)
 8006ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7f9 fd85 	bl	80005f8 <__aeabi_dmul>
 8006aee:	4b80      	ldr	r3, [pc, #512]	; (8006cf0 <__ieee754_rem_pio2+0x348>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	f7f9 fbcb 	bl	800028c <__adddf3>
 8006af6:	f7fa f819 	bl	8000b2c <__aeabi_d2iz>
 8006afa:	4683      	mov	fp, r0
 8006afc:	f7f9 fd12 	bl	8000524 <__aeabi_i2d>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	ec43 2b18 	vmov	d8, r2, r3
 8006b08:	a367      	add	r3, pc, #412	; (adr r3, 8006ca8 <__ieee754_rem_pio2+0x300>)
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f7f9 fd73 	bl	80005f8 <__aeabi_dmul>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 fbb5 	bl	8000288 <__aeabi_dsub>
 8006b1e:	a364      	add	r3, pc, #400	; (adr r3, 8006cb0 <__ieee754_rem_pio2+0x308>)
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	4606      	mov	r6, r0
 8006b26:	460f      	mov	r7, r1
 8006b28:	ec51 0b18 	vmov	r0, r1, d8
 8006b2c:	f7f9 fd64 	bl	80005f8 <__aeabi_dmul>
 8006b30:	f1bb 0f1f 	cmp.w	fp, #31
 8006b34:	4604      	mov	r4, r0
 8006b36:	460d      	mov	r5, r1
 8006b38:	dc0d      	bgt.n	8006b56 <__ieee754_rem_pio2+0x1ae>
 8006b3a:	4b6e      	ldr	r3, [pc, #440]	; (8006cf4 <__ieee754_rem_pio2+0x34c>)
 8006b3c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b44:	4543      	cmp	r3, r8
 8006b46:	d006      	beq.n	8006b56 <__ieee754_rem_pio2+0x1ae>
 8006b48:	4622      	mov	r2, r4
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 fb9a 	bl	8000288 <__aeabi_dsub>
 8006b54:	e00f      	b.n	8006b76 <__ieee754_rem_pio2+0x1ce>
 8006b56:	462b      	mov	r3, r5
 8006b58:	4622      	mov	r2, r4
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	f7f9 fb93 	bl	8000288 <__aeabi_dsub>
 8006b62:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006b66:	9303      	str	r3, [sp, #12]
 8006b68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b6c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006b70:	f1b8 0f10 	cmp.w	r8, #16
 8006b74:	dc02      	bgt.n	8006b7c <__ieee754_rem_pio2+0x1d4>
 8006b76:	e9ca 0100 	strd	r0, r1, [sl]
 8006b7a:	e039      	b.n	8006bf0 <__ieee754_rem_pio2+0x248>
 8006b7c:	a34e      	add	r3, pc, #312	; (adr r3, 8006cb8 <__ieee754_rem_pio2+0x310>)
 8006b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b82:	ec51 0b18 	vmov	r0, r1, d8
 8006b86:	f7f9 fd37 	bl	80005f8 <__aeabi_dmul>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	460d      	mov	r5, r1
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4630      	mov	r0, r6
 8006b94:	4639      	mov	r1, r7
 8006b96:	f7f9 fb77 	bl	8000288 <__aeabi_dsub>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	4689      	mov	r9, r1
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	f7f9 fb6f 	bl	8000288 <__aeabi_dsub>
 8006baa:	4622      	mov	r2, r4
 8006bac:	462b      	mov	r3, r5
 8006bae:	f7f9 fb6b 	bl	8000288 <__aeabi_dsub>
 8006bb2:	a343      	add	r3, pc, #268	; (adr r3, 8006cc0 <__ieee754_rem_pio2+0x318>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	4604      	mov	r4, r0
 8006bba:	460d      	mov	r5, r1
 8006bbc:	ec51 0b18 	vmov	r0, r1, d8
 8006bc0:	f7f9 fd1a 	bl	80005f8 <__aeabi_dmul>
 8006bc4:	4622      	mov	r2, r4
 8006bc6:	462b      	mov	r3, r5
 8006bc8:	f7f9 fb5e 	bl	8000288 <__aeabi_dsub>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	460d      	mov	r5, r1
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	f7f9 fb56 	bl	8000288 <__aeabi_dsub>
 8006bdc:	9a03      	ldr	r2, [sp, #12]
 8006bde:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b31      	cmp	r3, #49	; 0x31
 8006be6:	dc24      	bgt.n	8006c32 <__ieee754_rem_pio2+0x28a>
 8006be8:	e9ca 0100 	strd	r0, r1, [sl]
 8006bec:	4646      	mov	r6, r8
 8006bee:	464f      	mov	r7, r9
 8006bf0:	e9da 8900 	ldrd	r8, r9, [sl]
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	4642      	mov	r2, r8
 8006bf8:	464b      	mov	r3, r9
 8006bfa:	4639      	mov	r1, r7
 8006bfc:	f7f9 fb44 	bl	8000288 <__aeabi_dsub>
 8006c00:	462b      	mov	r3, r5
 8006c02:	4622      	mov	r2, r4
 8006c04:	f7f9 fb40 	bl	8000288 <__aeabi_dsub>
 8006c08:	9b02      	ldr	r3, [sp, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c10:	f6bf af0a 	bge.w	8006a28 <__ieee754_rem_pio2+0x80>
 8006c14:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c18:	f8ca 3004 	str.w	r3, [sl, #4]
 8006c1c:	f8ca 8000 	str.w	r8, [sl]
 8006c20:	f8ca 0008 	str.w	r0, [sl, #8]
 8006c24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c28:	f8ca 300c 	str.w	r3, [sl, #12]
 8006c2c:	f1cb 0b00 	rsb	fp, fp, #0
 8006c30:	e6fa      	b.n	8006a28 <__ieee754_rem_pio2+0x80>
 8006c32:	a327      	add	r3, pc, #156	; (adr r3, 8006cd0 <__ieee754_rem_pio2+0x328>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	ec51 0b18 	vmov	r0, r1, d8
 8006c3c:	f7f9 fcdc 	bl	80005f8 <__aeabi_dmul>
 8006c40:	4604      	mov	r4, r0
 8006c42:	460d      	mov	r5, r1
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 fb1c 	bl	8000288 <__aeabi_dsub>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4606      	mov	r6, r0
 8006c56:	460f      	mov	r7, r1
 8006c58:	4640      	mov	r0, r8
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	f7f9 fb14 	bl	8000288 <__aeabi_dsub>
 8006c60:	4622      	mov	r2, r4
 8006c62:	462b      	mov	r3, r5
 8006c64:	f7f9 fb10 	bl	8000288 <__aeabi_dsub>
 8006c68:	a31b      	add	r3, pc, #108	; (adr r3, 8006cd8 <__ieee754_rem_pio2+0x330>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	4604      	mov	r4, r0
 8006c70:	460d      	mov	r5, r1
 8006c72:	ec51 0b18 	vmov	r0, r1, d8
 8006c76:	f7f9 fcbf 	bl	80005f8 <__aeabi_dmul>
 8006c7a:	4622      	mov	r2, r4
 8006c7c:	462b      	mov	r3, r5
 8006c7e:	f7f9 fb03 	bl	8000288 <__aeabi_dsub>
 8006c82:	4604      	mov	r4, r0
 8006c84:	460d      	mov	r5, r1
 8006c86:	e75f      	b.n	8006b48 <__ieee754_rem_pio2+0x1a0>
 8006c88:	4b1b      	ldr	r3, [pc, #108]	; (8006cf8 <__ieee754_rem_pio2+0x350>)
 8006c8a:	4598      	cmp	r8, r3
 8006c8c:	dd36      	ble.n	8006cfc <__ieee754_rem_pio2+0x354>
 8006c8e:	ee10 2a10 	vmov	r2, s0
 8006c92:	462b      	mov	r3, r5
 8006c94:	4620      	mov	r0, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	f7f9 faf6 	bl	8000288 <__aeabi_dsub>
 8006c9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ca0:	e9ca 0100 	strd	r0, r1, [sl]
 8006ca4:	e694      	b.n	80069d0 <__ieee754_rem_pio2+0x28>
 8006ca6:	bf00      	nop
 8006ca8:	54400000 	.word	0x54400000
 8006cac:	3ff921fb 	.word	0x3ff921fb
 8006cb0:	1a626331 	.word	0x1a626331
 8006cb4:	3dd0b461 	.word	0x3dd0b461
 8006cb8:	1a600000 	.word	0x1a600000
 8006cbc:	3dd0b461 	.word	0x3dd0b461
 8006cc0:	2e037073 	.word	0x2e037073
 8006cc4:	3ba3198a 	.word	0x3ba3198a
 8006cc8:	6dc9c883 	.word	0x6dc9c883
 8006ccc:	3fe45f30 	.word	0x3fe45f30
 8006cd0:	2e000000 	.word	0x2e000000
 8006cd4:	3ba3198a 	.word	0x3ba3198a
 8006cd8:	252049c1 	.word	0x252049c1
 8006cdc:	397b839a 	.word	0x397b839a
 8006ce0:	3fe921fb 	.word	0x3fe921fb
 8006ce4:	4002d97b 	.word	0x4002d97b
 8006ce8:	3ff921fb 	.word	0x3ff921fb
 8006cec:	413921fb 	.word	0x413921fb
 8006cf0:	3fe00000 	.word	0x3fe00000
 8006cf4:	08007c00 	.word	0x08007c00
 8006cf8:	7fefffff 	.word	0x7fefffff
 8006cfc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8006d00:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8006d04:	ee10 0a10 	vmov	r0, s0
 8006d08:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8006d0c:	ee10 6a10 	vmov	r6, s0
 8006d10:	460f      	mov	r7, r1
 8006d12:	f7f9 ff0b 	bl	8000b2c <__aeabi_d2iz>
 8006d16:	f7f9 fc05 	bl	8000524 <__aeabi_i2d>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	4630      	mov	r0, r6
 8006d20:	4639      	mov	r1, r7
 8006d22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d26:	f7f9 faaf 	bl	8000288 <__aeabi_dsub>
 8006d2a:	4b22      	ldr	r3, [pc, #136]	; (8006db4 <__ieee754_rem_pio2+0x40c>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f7f9 fc63 	bl	80005f8 <__aeabi_dmul>
 8006d32:	460f      	mov	r7, r1
 8006d34:	4606      	mov	r6, r0
 8006d36:	f7f9 fef9 	bl	8000b2c <__aeabi_d2iz>
 8006d3a:	f7f9 fbf3 	bl	8000524 <__aeabi_i2d>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4630      	mov	r0, r6
 8006d44:	4639      	mov	r1, r7
 8006d46:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d4a:	f7f9 fa9d 	bl	8000288 <__aeabi_dsub>
 8006d4e:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <__ieee754_rem_pio2+0x40c>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	f7f9 fc51 	bl	80005f8 <__aeabi_dmul>
 8006d56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006d5a:	ad04      	add	r5, sp, #16
 8006d5c:	f04f 0803 	mov.w	r8, #3
 8006d60:	46a9      	mov	r9, r5
 8006d62:	2600      	movs	r6, #0
 8006d64:	2700      	movs	r7, #0
 8006d66:	4632      	mov	r2, r6
 8006d68:	463b      	mov	r3, r7
 8006d6a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8006d6e:	46c3      	mov	fp, r8
 8006d70:	3d08      	subs	r5, #8
 8006d72:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d76:	f7f9 fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d1f3      	bne.n	8006d66 <__ieee754_rem_pio2+0x3be>
 8006d7e:	4b0e      	ldr	r3, [pc, #56]	; (8006db8 <__ieee754_rem_pio2+0x410>)
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	2302      	movs	r3, #2
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	4622      	mov	r2, r4
 8006d88:	465b      	mov	r3, fp
 8006d8a:	4651      	mov	r1, sl
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	f000 f8df 	bl	8006f50 <__kernel_rem_pio2>
 8006d92:	9b02      	ldr	r3, [sp, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	4683      	mov	fp, r0
 8006d98:	f6bf ae46 	bge.w	8006a28 <__ieee754_rem_pio2+0x80>
 8006d9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006da0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006da4:	f8ca 3004 	str.w	r3, [sl, #4]
 8006da8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006dac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006db0:	e73a      	b.n	8006c28 <__ieee754_rem_pio2+0x280>
 8006db2:	bf00      	nop
 8006db4:	41700000 	.word	0x41700000
 8006db8:	08007c80 	.word	0x08007c80
 8006dbc:	00000000 	.word	0x00000000

08006dc0 <__kernel_cos>:
 8006dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	ec57 6b10 	vmov	r6, r7, d0
 8006dc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006dcc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006dd0:	ed8d 1b00 	vstr	d1, [sp]
 8006dd4:	da07      	bge.n	8006de6 <__kernel_cos+0x26>
 8006dd6:	ee10 0a10 	vmov	r0, s0
 8006dda:	4639      	mov	r1, r7
 8006ddc:	f7f9 fea6 	bl	8000b2c <__aeabi_d2iz>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	f000 8088 	beq.w	8006ef6 <__kernel_cos+0x136>
 8006de6:	4632      	mov	r2, r6
 8006de8:	463b      	mov	r3, r7
 8006dea:	4630      	mov	r0, r6
 8006dec:	4639      	mov	r1, r7
 8006dee:	f7f9 fc03 	bl	80005f8 <__aeabi_dmul>
 8006df2:	4b51      	ldr	r3, [pc, #324]	; (8006f38 <__kernel_cos+0x178>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	4604      	mov	r4, r0
 8006df8:	460d      	mov	r5, r1
 8006dfa:	f7f9 fbfd 	bl	80005f8 <__aeabi_dmul>
 8006dfe:	a340      	add	r3, pc, #256	; (adr r3, 8006f00 <__kernel_cos+0x140>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	4682      	mov	sl, r0
 8006e06:	468b      	mov	fp, r1
 8006e08:	4620      	mov	r0, r4
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	f7f9 fbf4 	bl	80005f8 <__aeabi_dmul>
 8006e10:	a33d      	add	r3, pc, #244	; (adr r3, 8006f08 <__kernel_cos+0x148>)
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f7f9 fa39 	bl	800028c <__adddf3>
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	f7f9 fbeb 	bl	80005f8 <__aeabi_dmul>
 8006e22:	a33b      	add	r3, pc, #236	; (adr r3, 8006f10 <__kernel_cos+0x150>)
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f7f9 fa2e 	bl	8000288 <__aeabi_dsub>
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	462b      	mov	r3, r5
 8006e30:	f7f9 fbe2 	bl	80005f8 <__aeabi_dmul>
 8006e34:	a338      	add	r3, pc, #224	; (adr r3, 8006f18 <__kernel_cos+0x158>)
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f7f9 fa27 	bl	800028c <__adddf3>
 8006e3e:	4622      	mov	r2, r4
 8006e40:	462b      	mov	r3, r5
 8006e42:	f7f9 fbd9 	bl	80005f8 <__aeabi_dmul>
 8006e46:	a336      	add	r3, pc, #216	; (adr r3, 8006f20 <__kernel_cos+0x160>)
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f7f9 fa1c 	bl	8000288 <__aeabi_dsub>
 8006e50:	4622      	mov	r2, r4
 8006e52:	462b      	mov	r3, r5
 8006e54:	f7f9 fbd0 	bl	80005f8 <__aeabi_dmul>
 8006e58:	a333      	add	r3, pc, #204	; (adr r3, 8006f28 <__kernel_cos+0x168>)
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f7f9 fa15 	bl	800028c <__adddf3>
 8006e62:	4622      	mov	r2, r4
 8006e64:	462b      	mov	r3, r5
 8006e66:	f7f9 fbc7 	bl	80005f8 <__aeabi_dmul>
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	f7f9 fbc3 	bl	80005f8 <__aeabi_dmul>
 8006e72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e76:	4604      	mov	r4, r0
 8006e78:	460d      	mov	r5, r1
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	f7f9 fbbb 	bl	80005f8 <__aeabi_dmul>
 8006e82:	460b      	mov	r3, r1
 8006e84:	4602      	mov	r2, r0
 8006e86:	4629      	mov	r1, r5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f7f9 f9fd 	bl	8000288 <__aeabi_dsub>
 8006e8e:	4b2b      	ldr	r3, [pc, #172]	; (8006f3c <__kernel_cos+0x17c>)
 8006e90:	4598      	cmp	r8, r3
 8006e92:	4606      	mov	r6, r0
 8006e94:	460f      	mov	r7, r1
 8006e96:	dc10      	bgt.n	8006eba <__kernel_cos+0xfa>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4650      	mov	r0, sl
 8006e9e:	4659      	mov	r1, fp
 8006ea0:	f7f9 f9f2 	bl	8000288 <__aeabi_dsub>
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	4926      	ldr	r1, [pc, #152]	; (8006f40 <__kernel_cos+0x180>)
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	2000      	movs	r0, #0
 8006eac:	f7f9 f9ec 	bl	8000288 <__aeabi_dsub>
 8006eb0:	ec41 0b10 	vmov	d0, r0, r1
 8006eb4:	b003      	add	sp, #12
 8006eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eba:	4b22      	ldr	r3, [pc, #136]	; (8006f44 <__kernel_cos+0x184>)
 8006ebc:	4920      	ldr	r1, [pc, #128]	; (8006f40 <__kernel_cos+0x180>)
 8006ebe:	4598      	cmp	r8, r3
 8006ec0:	bfcc      	ite	gt
 8006ec2:	4d21      	ldrgt	r5, [pc, #132]	; (8006f48 <__kernel_cos+0x188>)
 8006ec4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006ec8:	2400      	movs	r4, #0
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7f9 f9da 	bl	8000288 <__aeabi_dsub>
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	4689      	mov	r9, r1
 8006eda:	462b      	mov	r3, r5
 8006edc:	4650      	mov	r0, sl
 8006ede:	4659      	mov	r1, fp
 8006ee0:	f7f9 f9d2 	bl	8000288 <__aeabi_dsub>
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	f7f9 f9ce 	bl	8000288 <__aeabi_dsub>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	e7da      	b.n	8006eac <__kernel_cos+0xec>
 8006ef6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006f30 <__kernel_cos+0x170>
 8006efa:	e7db      	b.n	8006eb4 <__kernel_cos+0xf4>
 8006efc:	f3af 8000 	nop.w
 8006f00:	be8838d4 	.word	0xbe8838d4
 8006f04:	bda8fae9 	.word	0xbda8fae9
 8006f08:	bdb4b1c4 	.word	0xbdb4b1c4
 8006f0c:	3e21ee9e 	.word	0x3e21ee9e
 8006f10:	809c52ad 	.word	0x809c52ad
 8006f14:	3e927e4f 	.word	0x3e927e4f
 8006f18:	19cb1590 	.word	0x19cb1590
 8006f1c:	3efa01a0 	.word	0x3efa01a0
 8006f20:	16c15177 	.word	0x16c15177
 8006f24:	3f56c16c 	.word	0x3f56c16c
 8006f28:	5555554c 	.word	0x5555554c
 8006f2c:	3fa55555 	.word	0x3fa55555
 8006f30:	00000000 	.word	0x00000000
 8006f34:	3ff00000 	.word	0x3ff00000
 8006f38:	3fe00000 	.word	0x3fe00000
 8006f3c:	3fd33332 	.word	0x3fd33332
 8006f40:	3ff00000 	.word	0x3ff00000
 8006f44:	3fe90000 	.word	0x3fe90000
 8006f48:	3fd20000 	.word	0x3fd20000
 8006f4c:	00000000 	.word	0x00000000

08006f50 <__kernel_rem_pio2>:
 8006f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f54:	ed2d 8b02 	vpush	{d8}
 8006f58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006f5c:	f112 0f14 	cmn.w	r2, #20
 8006f60:	9308      	str	r3, [sp, #32]
 8006f62:	9101      	str	r1, [sp, #4]
 8006f64:	4bc6      	ldr	r3, [pc, #792]	; (8007280 <__kernel_rem_pio2+0x330>)
 8006f66:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006f68:	9009      	str	r0, [sp, #36]	; 0x24
 8006f6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f6e:	9304      	str	r3, [sp, #16]
 8006f70:	9b08      	ldr	r3, [sp, #32]
 8006f72:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f76:	bfa8      	it	ge
 8006f78:	1ed4      	subge	r4, r2, #3
 8006f7a:	9306      	str	r3, [sp, #24]
 8006f7c:	bfb2      	itee	lt
 8006f7e:	2400      	movlt	r4, #0
 8006f80:	2318      	movge	r3, #24
 8006f82:	fb94 f4f3 	sdivge	r4, r4, r3
 8006f86:	f06f 0317 	mvn.w	r3, #23
 8006f8a:	fb04 3303 	mla	r3, r4, r3, r3
 8006f8e:	eb03 0a02 	add.w	sl, r3, r2
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	9a06      	ldr	r2, [sp, #24]
 8006f96:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007270 <__kernel_rem_pio2+0x320>
 8006f9a:	eb03 0802 	add.w	r8, r3, r2
 8006f9e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006fa0:	1aa7      	subs	r7, r4, r2
 8006fa2:	ae20      	add	r6, sp, #128	; 0x80
 8006fa4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006fa8:	2500      	movs	r5, #0
 8006faa:	4545      	cmp	r5, r8
 8006fac:	dd18      	ble.n	8006fe0 <__kernel_rem_pio2+0x90>
 8006fae:	9b08      	ldr	r3, [sp, #32]
 8006fb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006fb4:	aa20      	add	r2, sp, #128	; 0x80
 8006fb6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007270 <__kernel_rem_pio2+0x320>
 8006fba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006fbe:	f1c3 0301 	rsb	r3, r3, #1
 8006fc2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006fc6:	9307      	str	r3, [sp, #28]
 8006fc8:	9b07      	ldr	r3, [sp, #28]
 8006fca:	9a04      	ldr	r2, [sp, #16]
 8006fcc:	4443      	add	r3, r8
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	db2f      	blt.n	8007032 <__kernel_rem_pio2+0xe2>
 8006fd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006fd6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006fda:	462f      	mov	r7, r5
 8006fdc:	2600      	movs	r6, #0
 8006fde:	e01b      	b.n	8007018 <__kernel_rem_pio2+0xc8>
 8006fe0:	42ef      	cmn	r7, r5
 8006fe2:	d407      	bmi.n	8006ff4 <__kernel_rem_pio2+0xa4>
 8006fe4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006fe8:	f7f9 fa9c 	bl	8000524 <__aeabi_i2d>
 8006fec:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	e7da      	b.n	8006faa <__kernel_rem_pio2+0x5a>
 8006ff4:	ec51 0b18 	vmov	r0, r1, d8
 8006ff8:	e7f8      	b.n	8006fec <__kernel_rem_pio2+0x9c>
 8006ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffe:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007002:	f7f9 faf9 	bl	80005f8 <__aeabi_dmul>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800700e:	f7f9 f93d 	bl	800028c <__adddf3>
 8007012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007016:	3601      	adds	r6, #1
 8007018:	9b06      	ldr	r3, [sp, #24]
 800701a:	429e      	cmp	r6, r3
 800701c:	f1a7 0708 	sub.w	r7, r7, #8
 8007020:	ddeb      	ble.n	8006ffa <__kernel_rem_pio2+0xaa>
 8007022:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007026:	3508      	adds	r5, #8
 8007028:	ecab 7b02 	vstmia	fp!, {d7}
 800702c:	f108 0801 	add.w	r8, r8, #1
 8007030:	e7ca      	b.n	8006fc8 <__kernel_rem_pio2+0x78>
 8007032:	9b04      	ldr	r3, [sp, #16]
 8007034:	aa0c      	add	r2, sp, #48	; 0x30
 8007036:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800703a:	930b      	str	r3, [sp, #44]	; 0x2c
 800703c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800703e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007042:	9c04      	ldr	r4, [sp, #16]
 8007044:	930a      	str	r3, [sp, #40]	; 0x28
 8007046:	ab98      	add	r3, sp, #608	; 0x260
 8007048:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800704c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007050:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8007054:	f8cd b008 	str.w	fp, [sp, #8]
 8007058:	4625      	mov	r5, r4
 800705a:	2d00      	cmp	r5, #0
 800705c:	dc78      	bgt.n	8007150 <__kernel_rem_pio2+0x200>
 800705e:	ec47 6b10 	vmov	d0, r6, r7
 8007062:	4650      	mov	r0, sl
 8007064:	f000 fbfc 	bl	8007860 <scalbn>
 8007068:	ec57 6b10 	vmov	r6, r7, d0
 800706c:	2200      	movs	r2, #0
 800706e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007072:	ee10 0a10 	vmov	r0, s0
 8007076:	4639      	mov	r1, r7
 8007078:	f7f9 fabe 	bl	80005f8 <__aeabi_dmul>
 800707c:	ec41 0b10 	vmov	d0, r0, r1
 8007080:	f000 fb6e 	bl	8007760 <floor>
 8007084:	4b7f      	ldr	r3, [pc, #508]	; (8007284 <__kernel_rem_pio2+0x334>)
 8007086:	ec51 0b10 	vmov	r0, r1, d0
 800708a:	2200      	movs	r2, #0
 800708c:	f7f9 fab4 	bl	80005f8 <__aeabi_dmul>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4630      	mov	r0, r6
 8007096:	4639      	mov	r1, r7
 8007098:	f7f9 f8f6 	bl	8000288 <__aeabi_dsub>
 800709c:	460f      	mov	r7, r1
 800709e:	4606      	mov	r6, r0
 80070a0:	f7f9 fd44 	bl	8000b2c <__aeabi_d2iz>
 80070a4:	9007      	str	r0, [sp, #28]
 80070a6:	f7f9 fa3d 	bl	8000524 <__aeabi_i2d>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	4630      	mov	r0, r6
 80070b0:	4639      	mov	r1, r7
 80070b2:	f7f9 f8e9 	bl	8000288 <__aeabi_dsub>
 80070b6:	f1ba 0f00 	cmp.w	sl, #0
 80070ba:	4606      	mov	r6, r0
 80070bc:	460f      	mov	r7, r1
 80070be:	dd70      	ble.n	80071a2 <__kernel_rem_pio2+0x252>
 80070c0:	1e62      	subs	r2, r4, #1
 80070c2:	ab0c      	add	r3, sp, #48	; 0x30
 80070c4:	9d07      	ldr	r5, [sp, #28]
 80070c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80070ca:	f1ca 0118 	rsb	r1, sl, #24
 80070ce:	fa40 f301 	asr.w	r3, r0, r1
 80070d2:	441d      	add	r5, r3
 80070d4:	408b      	lsls	r3, r1
 80070d6:	1ac0      	subs	r0, r0, r3
 80070d8:	ab0c      	add	r3, sp, #48	; 0x30
 80070da:	9507      	str	r5, [sp, #28]
 80070dc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80070e0:	f1ca 0317 	rsb	r3, sl, #23
 80070e4:	fa40 f303 	asr.w	r3, r0, r3
 80070e8:	9302      	str	r3, [sp, #8]
 80070ea:	9b02      	ldr	r3, [sp, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dd66      	ble.n	80071be <__kernel_rem_pio2+0x26e>
 80070f0:	9b07      	ldr	r3, [sp, #28]
 80070f2:	2200      	movs	r2, #0
 80070f4:	3301      	adds	r3, #1
 80070f6:	9307      	str	r3, [sp, #28]
 80070f8:	4615      	mov	r5, r2
 80070fa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80070fe:	4294      	cmp	r4, r2
 8007100:	f300 8099 	bgt.w	8007236 <__kernel_rem_pio2+0x2e6>
 8007104:	f1ba 0f00 	cmp.w	sl, #0
 8007108:	dd07      	ble.n	800711a <__kernel_rem_pio2+0x1ca>
 800710a:	f1ba 0f01 	cmp.w	sl, #1
 800710e:	f000 80a5 	beq.w	800725c <__kernel_rem_pio2+0x30c>
 8007112:	f1ba 0f02 	cmp.w	sl, #2
 8007116:	f000 80c1 	beq.w	800729c <__kernel_rem_pio2+0x34c>
 800711a:	9b02      	ldr	r3, [sp, #8]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d14e      	bne.n	80071be <__kernel_rem_pio2+0x26e>
 8007120:	4632      	mov	r2, r6
 8007122:	463b      	mov	r3, r7
 8007124:	4958      	ldr	r1, [pc, #352]	; (8007288 <__kernel_rem_pio2+0x338>)
 8007126:	2000      	movs	r0, #0
 8007128:	f7f9 f8ae 	bl	8000288 <__aeabi_dsub>
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	2d00      	cmp	r5, #0
 8007132:	d044      	beq.n	80071be <__kernel_rem_pio2+0x26e>
 8007134:	4650      	mov	r0, sl
 8007136:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007278 <__kernel_rem_pio2+0x328>
 800713a:	f000 fb91 	bl	8007860 <scalbn>
 800713e:	4630      	mov	r0, r6
 8007140:	4639      	mov	r1, r7
 8007142:	ec53 2b10 	vmov	r2, r3, d0
 8007146:	f7f9 f89f 	bl	8000288 <__aeabi_dsub>
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	e036      	b.n	80071be <__kernel_rem_pio2+0x26e>
 8007150:	4b4e      	ldr	r3, [pc, #312]	; (800728c <__kernel_rem_pio2+0x33c>)
 8007152:	2200      	movs	r2, #0
 8007154:	4630      	mov	r0, r6
 8007156:	4639      	mov	r1, r7
 8007158:	f7f9 fa4e 	bl	80005f8 <__aeabi_dmul>
 800715c:	f7f9 fce6 	bl	8000b2c <__aeabi_d2iz>
 8007160:	f7f9 f9e0 	bl	8000524 <__aeabi_i2d>
 8007164:	4b4a      	ldr	r3, [pc, #296]	; (8007290 <__kernel_rem_pio2+0x340>)
 8007166:	2200      	movs	r2, #0
 8007168:	4680      	mov	r8, r0
 800716a:	4689      	mov	r9, r1
 800716c:	f7f9 fa44 	bl	80005f8 <__aeabi_dmul>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4630      	mov	r0, r6
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 f886 	bl	8000288 <__aeabi_dsub>
 800717c:	f7f9 fcd6 	bl	8000b2c <__aeabi_d2iz>
 8007180:	9b02      	ldr	r3, [sp, #8]
 8007182:	f843 0b04 	str.w	r0, [r3], #4
 8007186:	3d01      	subs	r5, #1
 8007188:	9302      	str	r3, [sp, #8]
 800718a:	ab70      	add	r3, sp, #448	; 0x1c0
 800718c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	4640      	mov	r0, r8
 8007196:	4649      	mov	r1, r9
 8007198:	f7f9 f878 	bl	800028c <__adddf3>
 800719c:	4606      	mov	r6, r0
 800719e:	460f      	mov	r7, r1
 80071a0:	e75b      	b.n	800705a <__kernel_rem_pio2+0x10a>
 80071a2:	d105      	bne.n	80071b0 <__kernel_rem_pio2+0x260>
 80071a4:	1e63      	subs	r3, r4, #1
 80071a6:	aa0c      	add	r2, sp, #48	; 0x30
 80071a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80071ac:	15c3      	asrs	r3, r0, #23
 80071ae:	e79b      	b.n	80070e8 <__kernel_rem_pio2+0x198>
 80071b0:	4b38      	ldr	r3, [pc, #224]	; (8007294 <__kernel_rem_pio2+0x344>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	f7f9 fca6 	bl	8000b04 <__aeabi_dcmpge>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d139      	bne.n	8007230 <__kernel_rem_pio2+0x2e0>
 80071bc:	9002      	str	r0, [sp, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	2300      	movs	r3, #0
 80071c2:	4630      	mov	r0, r6
 80071c4:	4639      	mov	r1, r7
 80071c6:	f7f9 fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	f000 80b4 	beq.w	8007338 <__kernel_rem_pio2+0x3e8>
 80071d0:	f104 3bff 	add.w	fp, r4, #4294967295
 80071d4:	465b      	mov	r3, fp
 80071d6:	2200      	movs	r2, #0
 80071d8:	9904      	ldr	r1, [sp, #16]
 80071da:	428b      	cmp	r3, r1
 80071dc:	da65      	bge.n	80072aa <__kernel_rem_pio2+0x35a>
 80071de:	2a00      	cmp	r2, #0
 80071e0:	d07b      	beq.n	80072da <__kernel_rem_pio2+0x38a>
 80071e2:	ab0c      	add	r3, sp, #48	; 0x30
 80071e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80071e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80a0 	beq.w	8007332 <__kernel_rem_pio2+0x3e2>
 80071f2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8007278 <__kernel_rem_pio2+0x328>
 80071f6:	4650      	mov	r0, sl
 80071f8:	f000 fb32 	bl	8007860 <scalbn>
 80071fc:	4f23      	ldr	r7, [pc, #140]	; (800728c <__kernel_rem_pio2+0x33c>)
 80071fe:	ec55 4b10 	vmov	r4, r5, d0
 8007202:	46d8      	mov	r8, fp
 8007204:	2600      	movs	r6, #0
 8007206:	f1b8 0f00 	cmp.w	r8, #0
 800720a:	f280 80cf 	bge.w	80073ac <__kernel_rem_pio2+0x45c>
 800720e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8007270 <__kernel_rem_pio2+0x320>
 8007212:	465f      	mov	r7, fp
 8007214:	f04f 0800 	mov.w	r8, #0
 8007218:	2f00      	cmp	r7, #0
 800721a:	f2c0 80fd 	blt.w	8007418 <__kernel_rem_pio2+0x4c8>
 800721e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007220:	f8df a074 	ldr.w	sl, [pc, #116]	; 8007298 <__kernel_rem_pio2+0x348>
 8007224:	ec55 4b18 	vmov	r4, r5, d8
 8007228:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800722c:	2600      	movs	r6, #0
 800722e:	e0e5      	b.n	80073fc <__kernel_rem_pio2+0x4ac>
 8007230:	2302      	movs	r3, #2
 8007232:	9302      	str	r3, [sp, #8]
 8007234:	e75c      	b.n	80070f0 <__kernel_rem_pio2+0x1a0>
 8007236:	f8db 3000 	ldr.w	r3, [fp]
 800723a:	b955      	cbnz	r5, 8007252 <__kernel_rem_pio2+0x302>
 800723c:	b123      	cbz	r3, 8007248 <__kernel_rem_pio2+0x2f8>
 800723e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007242:	f8cb 3000 	str.w	r3, [fp]
 8007246:	2301      	movs	r3, #1
 8007248:	3201      	adds	r2, #1
 800724a:	f10b 0b04 	add.w	fp, fp, #4
 800724e:	461d      	mov	r5, r3
 8007250:	e755      	b.n	80070fe <__kernel_rem_pio2+0x1ae>
 8007252:	1acb      	subs	r3, r1, r3
 8007254:	f8cb 3000 	str.w	r3, [fp]
 8007258:	462b      	mov	r3, r5
 800725a:	e7f5      	b.n	8007248 <__kernel_rem_pio2+0x2f8>
 800725c:	1e62      	subs	r2, r4, #1
 800725e:	ab0c      	add	r3, sp, #48	; 0x30
 8007260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007264:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007268:	a90c      	add	r1, sp, #48	; 0x30
 800726a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800726e:	e754      	b.n	800711a <__kernel_rem_pio2+0x1ca>
	...
 800727c:	3ff00000 	.word	0x3ff00000
 8007280:	08007dc8 	.word	0x08007dc8
 8007284:	40200000 	.word	0x40200000
 8007288:	3ff00000 	.word	0x3ff00000
 800728c:	3e700000 	.word	0x3e700000
 8007290:	41700000 	.word	0x41700000
 8007294:	3fe00000 	.word	0x3fe00000
 8007298:	08007d88 	.word	0x08007d88
 800729c:	1e62      	subs	r2, r4, #1
 800729e:	ab0c      	add	r3, sp, #48	; 0x30
 80072a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80072a8:	e7de      	b.n	8007268 <__kernel_rem_pio2+0x318>
 80072aa:	a90c      	add	r1, sp, #48	; 0x30
 80072ac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	430a      	orrs	r2, r1
 80072b4:	e790      	b.n	80071d8 <__kernel_rem_pio2+0x288>
 80072b6:	3301      	adds	r3, #1
 80072b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80072bc:	2900      	cmp	r1, #0
 80072be:	d0fa      	beq.n	80072b6 <__kernel_rem_pio2+0x366>
 80072c0:	9a08      	ldr	r2, [sp, #32]
 80072c2:	18e3      	adds	r3, r4, r3
 80072c4:	18a6      	adds	r6, r4, r2
 80072c6:	aa20      	add	r2, sp, #128	; 0x80
 80072c8:	1c65      	adds	r5, r4, #1
 80072ca:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80072ce:	9302      	str	r3, [sp, #8]
 80072d0:	9b02      	ldr	r3, [sp, #8]
 80072d2:	42ab      	cmp	r3, r5
 80072d4:	da04      	bge.n	80072e0 <__kernel_rem_pio2+0x390>
 80072d6:	461c      	mov	r4, r3
 80072d8:	e6b5      	b.n	8007046 <__kernel_rem_pio2+0xf6>
 80072da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072dc:	2301      	movs	r3, #1
 80072de:	e7eb      	b.n	80072b8 <__kernel_rem_pio2+0x368>
 80072e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072e6:	f7f9 f91d 	bl	8000524 <__aeabi_i2d>
 80072ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f0:	46b3      	mov	fp, r6
 80072f2:	461c      	mov	r4, r3
 80072f4:	2700      	movs	r7, #0
 80072f6:	f04f 0800 	mov.w	r8, #0
 80072fa:	f04f 0900 	mov.w	r9, #0
 80072fe:	9b06      	ldr	r3, [sp, #24]
 8007300:	429f      	cmp	r7, r3
 8007302:	dd06      	ble.n	8007312 <__kernel_rem_pio2+0x3c2>
 8007304:	ab70      	add	r3, sp, #448	; 0x1c0
 8007306:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800730a:	e9c3 8900 	strd	r8, r9, [r3]
 800730e:	3501      	adds	r5, #1
 8007310:	e7de      	b.n	80072d0 <__kernel_rem_pio2+0x380>
 8007312:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007316:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800731a:	f7f9 f96d 	bl	80005f8 <__aeabi_dmul>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4640      	mov	r0, r8
 8007324:	4649      	mov	r1, r9
 8007326:	f7f8 ffb1 	bl	800028c <__adddf3>
 800732a:	3701      	adds	r7, #1
 800732c:	4680      	mov	r8, r0
 800732e:	4689      	mov	r9, r1
 8007330:	e7e5      	b.n	80072fe <__kernel_rem_pio2+0x3ae>
 8007332:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007336:	e754      	b.n	80071e2 <__kernel_rem_pio2+0x292>
 8007338:	ec47 6b10 	vmov	d0, r6, r7
 800733c:	f1ca 0000 	rsb	r0, sl, #0
 8007340:	f000 fa8e 	bl	8007860 <scalbn>
 8007344:	ec57 6b10 	vmov	r6, r7, d0
 8007348:	4b9f      	ldr	r3, [pc, #636]	; (80075c8 <__kernel_rem_pio2+0x678>)
 800734a:	ee10 0a10 	vmov	r0, s0
 800734e:	2200      	movs	r2, #0
 8007350:	4639      	mov	r1, r7
 8007352:	f7f9 fbd7 	bl	8000b04 <__aeabi_dcmpge>
 8007356:	b300      	cbz	r0, 800739a <__kernel_rem_pio2+0x44a>
 8007358:	4b9c      	ldr	r3, [pc, #624]	; (80075cc <__kernel_rem_pio2+0x67c>)
 800735a:	2200      	movs	r2, #0
 800735c:	4630      	mov	r0, r6
 800735e:	4639      	mov	r1, r7
 8007360:	f7f9 f94a 	bl	80005f8 <__aeabi_dmul>
 8007364:	f7f9 fbe2 	bl	8000b2c <__aeabi_d2iz>
 8007368:	4605      	mov	r5, r0
 800736a:	f7f9 f8db 	bl	8000524 <__aeabi_i2d>
 800736e:	4b96      	ldr	r3, [pc, #600]	; (80075c8 <__kernel_rem_pio2+0x678>)
 8007370:	2200      	movs	r2, #0
 8007372:	f7f9 f941 	bl	80005f8 <__aeabi_dmul>
 8007376:	460b      	mov	r3, r1
 8007378:	4602      	mov	r2, r0
 800737a:	4639      	mov	r1, r7
 800737c:	4630      	mov	r0, r6
 800737e:	f7f8 ff83 	bl	8000288 <__aeabi_dsub>
 8007382:	f7f9 fbd3 	bl	8000b2c <__aeabi_d2iz>
 8007386:	f104 0b01 	add.w	fp, r4, #1
 800738a:	ab0c      	add	r3, sp, #48	; 0x30
 800738c:	f10a 0a18 	add.w	sl, sl, #24
 8007390:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007394:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8007398:	e72b      	b.n	80071f2 <__kernel_rem_pio2+0x2a2>
 800739a:	4630      	mov	r0, r6
 800739c:	4639      	mov	r1, r7
 800739e:	f7f9 fbc5 	bl	8000b2c <__aeabi_d2iz>
 80073a2:	ab0c      	add	r3, sp, #48	; 0x30
 80073a4:	46a3      	mov	fp, r4
 80073a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80073aa:	e722      	b.n	80071f2 <__kernel_rem_pio2+0x2a2>
 80073ac:	ab70      	add	r3, sp, #448	; 0x1c0
 80073ae:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80073b2:	ab0c      	add	r3, sp, #48	; 0x30
 80073b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80073b8:	f7f9 f8b4 	bl	8000524 <__aeabi_i2d>
 80073bc:	4622      	mov	r2, r4
 80073be:	462b      	mov	r3, r5
 80073c0:	f7f9 f91a 	bl	80005f8 <__aeabi_dmul>
 80073c4:	4632      	mov	r2, r6
 80073c6:	e9c9 0100 	strd	r0, r1, [r9]
 80073ca:	463b      	mov	r3, r7
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f7f9 f912 	bl	80005f8 <__aeabi_dmul>
 80073d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80073d8:	4604      	mov	r4, r0
 80073da:	460d      	mov	r5, r1
 80073dc:	e713      	b.n	8007206 <__kernel_rem_pio2+0x2b6>
 80073de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80073e2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80073e6:	f7f9 f907 	bl	80005f8 <__aeabi_dmul>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4620      	mov	r0, r4
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7f8 ff4b 	bl	800028c <__adddf3>
 80073f6:	3601      	adds	r6, #1
 80073f8:	4604      	mov	r4, r0
 80073fa:	460d      	mov	r5, r1
 80073fc:	9b04      	ldr	r3, [sp, #16]
 80073fe:	429e      	cmp	r6, r3
 8007400:	dc01      	bgt.n	8007406 <__kernel_rem_pio2+0x4b6>
 8007402:	45b0      	cmp	r8, r6
 8007404:	daeb      	bge.n	80073de <__kernel_rem_pio2+0x48e>
 8007406:	ab48      	add	r3, sp, #288	; 0x120
 8007408:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800740c:	e9c3 4500 	strd	r4, r5, [r3]
 8007410:	3f01      	subs	r7, #1
 8007412:	f108 0801 	add.w	r8, r8, #1
 8007416:	e6ff      	b.n	8007218 <__kernel_rem_pio2+0x2c8>
 8007418:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800741a:	2b02      	cmp	r3, #2
 800741c:	dc0b      	bgt.n	8007436 <__kernel_rem_pio2+0x4e6>
 800741e:	2b00      	cmp	r3, #0
 8007420:	dc6e      	bgt.n	8007500 <__kernel_rem_pio2+0x5b0>
 8007422:	d045      	beq.n	80074b0 <__kernel_rem_pio2+0x560>
 8007424:	9b07      	ldr	r3, [sp, #28]
 8007426:	f003 0007 	and.w	r0, r3, #7
 800742a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800742e:	ecbd 8b02 	vpop	{d8}
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007438:	2b03      	cmp	r3, #3
 800743a:	d1f3      	bne.n	8007424 <__kernel_rem_pio2+0x4d4>
 800743c:	ab48      	add	r3, sp, #288	; 0x120
 800743e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8007442:	46d0      	mov	r8, sl
 8007444:	46d9      	mov	r9, fp
 8007446:	f1b9 0f00 	cmp.w	r9, #0
 800744a:	f1a8 0808 	sub.w	r8, r8, #8
 800744e:	dc64      	bgt.n	800751a <__kernel_rem_pio2+0x5ca>
 8007450:	465c      	mov	r4, fp
 8007452:	2c01      	cmp	r4, #1
 8007454:	f1aa 0a08 	sub.w	sl, sl, #8
 8007458:	dc7e      	bgt.n	8007558 <__kernel_rem_pio2+0x608>
 800745a:	2000      	movs	r0, #0
 800745c:	2100      	movs	r1, #0
 800745e:	f1bb 0f01 	cmp.w	fp, #1
 8007462:	f300 8097 	bgt.w	8007594 <__kernel_rem_pio2+0x644>
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800746c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007470:	2b00      	cmp	r3, #0
 8007472:	f040 8099 	bne.w	80075a8 <__kernel_rem_pio2+0x658>
 8007476:	9b01      	ldr	r3, [sp, #4]
 8007478:	e9c3 5600 	strd	r5, r6, [r3]
 800747c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007480:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007484:	e7ce      	b.n	8007424 <__kernel_rem_pio2+0x4d4>
 8007486:	ab48      	add	r3, sp, #288	; 0x120
 8007488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fefc 	bl	800028c <__adddf3>
 8007494:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007498:	f1bb 0f00 	cmp.w	fp, #0
 800749c:	daf3      	bge.n	8007486 <__kernel_rem_pio2+0x536>
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	b113      	cbz	r3, 80074a8 <__kernel_rem_pio2+0x558>
 80074a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074a6:	4619      	mov	r1, r3
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	e9c3 0100 	strd	r0, r1, [r3]
 80074ae:	e7b9      	b.n	8007424 <__kernel_rem_pio2+0x4d4>
 80074b0:	2000      	movs	r0, #0
 80074b2:	2100      	movs	r1, #0
 80074b4:	e7f0      	b.n	8007498 <__kernel_rem_pio2+0x548>
 80074b6:	ab48      	add	r3, sp, #288	; 0x120
 80074b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c0:	f7f8 fee4 	bl	800028c <__adddf3>
 80074c4:	3c01      	subs	r4, #1
 80074c6:	2c00      	cmp	r4, #0
 80074c8:	daf5      	bge.n	80074b6 <__kernel_rem_pio2+0x566>
 80074ca:	9b02      	ldr	r3, [sp, #8]
 80074cc:	b1e3      	cbz	r3, 8007508 <__kernel_rem_pio2+0x5b8>
 80074ce:	4602      	mov	r2, r0
 80074d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074d4:	9c01      	ldr	r4, [sp, #4]
 80074d6:	e9c4 2300 	strd	r2, r3, [r4]
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80074e2:	f7f8 fed1 	bl	8000288 <__aeabi_dsub>
 80074e6:	ad4a      	add	r5, sp, #296	; 0x128
 80074e8:	2401      	movs	r4, #1
 80074ea:	45a3      	cmp	fp, r4
 80074ec:	da0f      	bge.n	800750e <__kernel_rem_pio2+0x5be>
 80074ee:	9b02      	ldr	r3, [sp, #8]
 80074f0:	b113      	cbz	r3, 80074f8 <__kernel_rem_pio2+0x5a8>
 80074f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074f6:	4619      	mov	r1, r3
 80074f8:	9b01      	ldr	r3, [sp, #4]
 80074fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80074fe:	e791      	b.n	8007424 <__kernel_rem_pio2+0x4d4>
 8007500:	465c      	mov	r4, fp
 8007502:	2000      	movs	r0, #0
 8007504:	2100      	movs	r1, #0
 8007506:	e7de      	b.n	80074c6 <__kernel_rem_pio2+0x576>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	e7e2      	b.n	80074d4 <__kernel_rem_pio2+0x584>
 800750e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007512:	f7f8 febb 	bl	800028c <__adddf3>
 8007516:	3401      	adds	r4, #1
 8007518:	e7e7      	b.n	80074ea <__kernel_rem_pio2+0x59a>
 800751a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800751e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8007522:	4620      	mov	r0, r4
 8007524:	4632      	mov	r2, r6
 8007526:	463b      	mov	r3, r7
 8007528:	4629      	mov	r1, r5
 800752a:	f7f8 feaf 	bl	800028c <__adddf3>
 800752e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4620      	mov	r0, r4
 8007538:	4629      	mov	r1, r5
 800753a:	f7f8 fea5 	bl	8000288 <__aeabi_dsub>
 800753e:	4632      	mov	r2, r6
 8007540:	463b      	mov	r3, r7
 8007542:	f7f8 fea3 	bl	800028c <__adddf3>
 8007546:	ed9d 7b04 	vldr	d7, [sp, #16]
 800754a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800754e:	ed88 7b00 	vstr	d7, [r8]
 8007552:	f109 39ff 	add.w	r9, r9, #4294967295
 8007556:	e776      	b.n	8007446 <__kernel_rem_pio2+0x4f6>
 8007558:	e9da 8900 	ldrd	r8, r9, [sl]
 800755c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007560:	4640      	mov	r0, r8
 8007562:	4632      	mov	r2, r6
 8007564:	463b      	mov	r3, r7
 8007566:	4649      	mov	r1, r9
 8007568:	f7f8 fe90 	bl	800028c <__adddf3>
 800756c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	4640      	mov	r0, r8
 8007576:	4649      	mov	r1, r9
 8007578:	f7f8 fe86 	bl	8000288 <__aeabi_dsub>
 800757c:	4632      	mov	r2, r6
 800757e:	463b      	mov	r3, r7
 8007580:	f7f8 fe84 	bl	800028c <__adddf3>
 8007584:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007588:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800758c:	ed8a 7b00 	vstr	d7, [sl]
 8007590:	3c01      	subs	r4, #1
 8007592:	e75e      	b.n	8007452 <__kernel_rem_pio2+0x502>
 8007594:	ab48      	add	r3, sp, #288	; 0x120
 8007596:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f8 fe75 	bl	800028c <__adddf3>
 80075a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075a6:	e75a      	b.n	800745e <__kernel_rem_pio2+0x50e>
 80075a8:	9b01      	ldr	r3, [sp, #4]
 80075aa:	9a01      	ldr	r2, [sp, #4]
 80075ac:	601d      	str	r5, [r3, #0]
 80075ae:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80075b2:	605c      	str	r4, [r3, #4]
 80075b4:	609f      	str	r7, [r3, #8]
 80075b6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80075ba:	60d3      	str	r3, [r2, #12]
 80075bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075c0:	6110      	str	r0, [r2, #16]
 80075c2:	6153      	str	r3, [r2, #20]
 80075c4:	e72e      	b.n	8007424 <__kernel_rem_pio2+0x4d4>
 80075c6:	bf00      	nop
 80075c8:	41700000 	.word	0x41700000
 80075cc:	3e700000 	.word	0x3e700000

080075d0 <__kernel_sin>:
 80075d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	ed2d 8b04 	vpush	{d8-d9}
 80075d8:	eeb0 8a41 	vmov.f32	s16, s2
 80075dc:	eef0 8a61 	vmov.f32	s17, s3
 80075e0:	ec55 4b10 	vmov	r4, r5, d0
 80075e4:	b083      	sub	sp, #12
 80075e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80075ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80075ee:	9001      	str	r0, [sp, #4]
 80075f0:	da06      	bge.n	8007600 <__kernel_sin+0x30>
 80075f2:	ee10 0a10 	vmov	r0, s0
 80075f6:	4629      	mov	r1, r5
 80075f8:	f7f9 fa98 	bl	8000b2c <__aeabi_d2iz>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d051      	beq.n	80076a4 <__kernel_sin+0xd4>
 8007600:	4622      	mov	r2, r4
 8007602:	462b      	mov	r3, r5
 8007604:	4620      	mov	r0, r4
 8007606:	4629      	mov	r1, r5
 8007608:	f7f8 fff6 	bl	80005f8 <__aeabi_dmul>
 800760c:	4682      	mov	sl, r0
 800760e:	468b      	mov	fp, r1
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4620      	mov	r0, r4
 8007616:	4629      	mov	r1, r5
 8007618:	f7f8 ffee 	bl	80005f8 <__aeabi_dmul>
 800761c:	a341      	add	r3, pc, #260	; (adr r3, 8007724 <__kernel_sin+0x154>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	4680      	mov	r8, r0
 8007624:	4689      	mov	r9, r1
 8007626:	4650      	mov	r0, sl
 8007628:	4659      	mov	r1, fp
 800762a:	f7f8 ffe5 	bl	80005f8 <__aeabi_dmul>
 800762e:	a33f      	add	r3, pc, #252	; (adr r3, 800772c <__kernel_sin+0x15c>)
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	f7f8 fe28 	bl	8000288 <__aeabi_dsub>
 8007638:	4652      	mov	r2, sl
 800763a:	465b      	mov	r3, fp
 800763c:	f7f8 ffdc 	bl	80005f8 <__aeabi_dmul>
 8007640:	a33c      	add	r3, pc, #240	; (adr r3, 8007734 <__kernel_sin+0x164>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f8 fe21 	bl	800028c <__adddf3>
 800764a:	4652      	mov	r2, sl
 800764c:	465b      	mov	r3, fp
 800764e:	f7f8 ffd3 	bl	80005f8 <__aeabi_dmul>
 8007652:	a33a      	add	r3, pc, #232	; (adr r3, 800773c <__kernel_sin+0x16c>)
 8007654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007658:	f7f8 fe16 	bl	8000288 <__aeabi_dsub>
 800765c:	4652      	mov	r2, sl
 800765e:	465b      	mov	r3, fp
 8007660:	f7f8 ffca 	bl	80005f8 <__aeabi_dmul>
 8007664:	a337      	add	r3, pc, #220	; (adr r3, 8007744 <__kernel_sin+0x174>)
 8007666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766a:	f7f8 fe0f 	bl	800028c <__adddf3>
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	4606      	mov	r6, r0
 8007672:	460f      	mov	r7, r1
 8007674:	b9eb      	cbnz	r3, 80076b2 <__kernel_sin+0xe2>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4650      	mov	r0, sl
 800767c:	4659      	mov	r1, fp
 800767e:	f7f8 ffbb 	bl	80005f8 <__aeabi_dmul>
 8007682:	a325      	add	r3, pc, #148	; (adr r3, 8007718 <__kernel_sin+0x148>)
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f7f8 fdfe 	bl	8000288 <__aeabi_dsub>
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	f7f8 ffb2 	bl	80005f8 <__aeabi_dmul>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4620      	mov	r0, r4
 800769a:	4629      	mov	r1, r5
 800769c:	f7f8 fdf6 	bl	800028c <__adddf3>
 80076a0:	4604      	mov	r4, r0
 80076a2:	460d      	mov	r5, r1
 80076a4:	ec45 4b10 	vmov	d0, r4, r5
 80076a8:	b003      	add	sp, #12
 80076aa:	ecbd 8b04 	vpop	{d8-d9}
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <__kernel_sin+0x150>)
 80076b4:	ec51 0b18 	vmov	r0, r1, d8
 80076b8:	2200      	movs	r2, #0
 80076ba:	f7f8 ff9d 	bl	80005f8 <__aeabi_dmul>
 80076be:	4632      	mov	r2, r6
 80076c0:	ec41 0b19 	vmov	d9, r0, r1
 80076c4:	463b      	mov	r3, r7
 80076c6:	4640      	mov	r0, r8
 80076c8:	4649      	mov	r1, r9
 80076ca:	f7f8 ff95 	bl	80005f8 <__aeabi_dmul>
 80076ce:	4602      	mov	r2, r0
 80076d0:	460b      	mov	r3, r1
 80076d2:	ec51 0b19 	vmov	r0, r1, d9
 80076d6:	f7f8 fdd7 	bl	8000288 <__aeabi_dsub>
 80076da:	4652      	mov	r2, sl
 80076dc:	465b      	mov	r3, fp
 80076de:	f7f8 ff8b 	bl	80005f8 <__aeabi_dmul>
 80076e2:	ec53 2b18 	vmov	r2, r3, d8
 80076e6:	f7f8 fdcf 	bl	8000288 <__aeabi_dsub>
 80076ea:	a30b      	add	r3, pc, #44	; (adr r3, 8007718 <__kernel_sin+0x148>)
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	4606      	mov	r6, r0
 80076f2:	460f      	mov	r7, r1
 80076f4:	4640      	mov	r0, r8
 80076f6:	4649      	mov	r1, r9
 80076f8:	f7f8 ff7e 	bl	80005f8 <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 fdc2 	bl	800028c <__adddf3>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4620      	mov	r0, r4
 800770e:	4629      	mov	r1, r5
 8007710:	f7f8 fdba 	bl	8000288 <__aeabi_dsub>
 8007714:	e7c4      	b.n	80076a0 <__kernel_sin+0xd0>
 8007716:	bf00      	nop
 8007718:	55555549 	.word	0x55555549
 800771c:	3fc55555 	.word	0x3fc55555
 8007720:	3fe00000 	.word	0x3fe00000
 8007724:	5acfd57c 	.word	0x5acfd57c
 8007728:	3de5d93a 	.word	0x3de5d93a
 800772c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007730:	3e5ae5e6 	.word	0x3e5ae5e6
 8007734:	57b1fe7d 	.word	0x57b1fe7d
 8007738:	3ec71de3 	.word	0x3ec71de3
 800773c:	19c161d5 	.word	0x19c161d5
 8007740:	3f2a01a0 	.word	0x3f2a01a0
 8007744:	1110f8a6 	.word	0x1110f8a6
 8007748:	3f811111 	.word	0x3f811111

0800774c <fabs>:
 800774c:	ec51 0b10 	vmov	r0, r1, d0
 8007750:	ee10 2a10 	vmov	r2, s0
 8007754:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007758:	ec43 2b10 	vmov	d0, r2, r3
 800775c:	4770      	bx	lr
	...

08007760 <floor>:
 8007760:	ec51 0b10 	vmov	r0, r1, d0
 8007764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007768:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800776c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007770:	2e13      	cmp	r6, #19
 8007772:	ee10 5a10 	vmov	r5, s0
 8007776:	ee10 8a10 	vmov	r8, s0
 800777a:	460c      	mov	r4, r1
 800777c:	dc32      	bgt.n	80077e4 <floor+0x84>
 800777e:	2e00      	cmp	r6, #0
 8007780:	da14      	bge.n	80077ac <floor+0x4c>
 8007782:	a333      	add	r3, pc, #204	; (adr r3, 8007850 <floor+0xf0>)
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	f7f8 fd80 	bl	800028c <__adddf3>
 800778c:	2200      	movs	r2, #0
 800778e:	2300      	movs	r3, #0
 8007790:	f7f9 f9c2 	bl	8000b18 <__aeabi_dcmpgt>
 8007794:	b138      	cbz	r0, 80077a6 <floor+0x46>
 8007796:	2c00      	cmp	r4, #0
 8007798:	da57      	bge.n	800784a <floor+0xea>
 800779a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800779e:	431d      	orrs	r5, r3
 80077a0:	d001      	beq.n	80077a6 <floor+0x46>
 80077a2:	4c2d      	ldr	r4, [pc, #180]	; (8007858 <floor+0xf8>)
 80077a4:	2500      	movs	r5, #0
 80077a6:	4621      	mov	r1, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	e025      	b.n	80077f8 <floor+0x98>
 80077ac:	4f2b      	ldr	r7, [pc, #172]	; (800785c <floor+0xfc>)
 80077ae:	4137      	asrs	r7, r6
 80077b0:	ea01 0307 	and.w	r3, r1, r7
 80077b4:	4303      	orrs	r3, r0
 80077b6:	d01f      	beq.n	80077f8 <floor+0x98>
 80077b8:	a325      	add	r3, pc, #148	; (adr r3, 8007850 <floor+0xf0>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fd65 	bl	800028c <__adddf3>
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	f7f9 f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d0eb      	beq.n	80077a6 <floor+0x46>
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	bfbe      	ittt	lt
 80077d2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80077d6:	fa43 f606 	asrlt.w	r6, r3, r6
 80077da:	19a4      	addlt	r4, r4, r6
 80077dc:	ea24 0407 	bic.w	r4, r4, r7
 80077e0:	2500      	movs	r5, #0
 80077e2:	e7e0      	b.n	80077a6 <floor+0x46>
 80077e4:	2e33      	cmp	r6, #51	; 0x33
 80077e6:	dd0b      	ble.n	8007800 <floor+0xa0>
 80077e8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80077ec:	d104      	bne.n	80077f8 <floor+0x98>
 80077ee:	ee10 2a10 	vmov	r2, s0
 80077f2:	460b      	mov	r3, r1
 80077f4:	f7f8 fd4a 	bl	800028c <__adddf3>
 80077f8:	ec41 0b10 	vmov	d0, r0, r1
 80077fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007800:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007804:	f04f 33ff 	mov.w	r3, #4294967295
 8007808:	fa23 f707 	lsr.w	r7, r3, r7
 800780c:	4207      	tst	r7, r0
 800780e:	d0f3      	beq.n	80077f8 <floor+0x98>
 8007810:	a30f      	add	r3, pc, #60	; (adr r3, 8007850 <floor+0xf0>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f7f8 fd39 	bl	800028c <__adddf3>
 800781a:	2200      	movs	r2, #0
 800781c:	2300      	movs	r3, #0
 800781e:	f7f9 f97b 	bl	8000b18 <__aeabi_dcmpgt>
 8007822:	2800      	cmp	r0, #0
 8007824:	d0bf      	beq.n	80077a6 <floor+0x46>
 8007826:	2c00      	cmp	r4, #0
 8007828:	da02      	bge.n	8007830 <floor+0xd0>
 800782a:	2e14      	cmp	r6, #20
 800782c:	d103      	bne.n	8007836 <floor+0xd6>
 800782e:	3401      	adds	r4, #1
 8007830:	ea25 0507 	bic.w	r5, r5, r7
 8007834:	e7b7      	b.n	80077a6 <floor+0x46>
 8007836:	2301      	movs	r3, #1
 8007838:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800783c:	fa03 f606 	lsl.w	r6, r3, r6
 8007840:	4435      	add	r5, r6
 8007842:	4545      	cmp	r5, r8
 8007844:	bf38      	it	cc
 8007846:	18e4      	addcc	r4, r4, r3
 8007848:	e7f2      	b.n	8007830 <floor+0xd0>
 800784a:	2500      	movs	r5, #0
 800784c:	462c      	mov	r4, r5
 800784e:	e7aa      	b.n	80077a6 <floor+0x46>
 8007850:	8800759c 	.word	0x8800759c
 8007854:	7e37e43c 	.word	0x7e37e43c
 8007858:	bff00000 	.word	0xbff00000
 800785c:	000fffff 	.word	0x000fffff

08007860 <scalbn>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	ec55 4b10 	vmov	r4, r5, d0
 8007866:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800786a:	4606      	mov	r6, r0
 800786c:	462b      	mov	r3, r5
 800786e:	b99a      	cbnz	r2, 8007898 <scalbn+0x38>
 8007870:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007874:	4323      	orrs	r3, r4
 8007876:	d036      	beq.n	80078e6 <scalbn+0x86>
 8007878:	4b39      	ldr	r3, [pc, #228]	; (8007960 <scalbn+0x100>)
 800787a:	4629      	mov	r1, r5
 800787c:	ee10 0a10 	vmov	r0, s0
 8007880:	2200      	movs	r2, #0
 8007882:	f7f8 feb9 	bl	80005f8 <__aeabi_dmul>
 8007886:	4b37      	ldr	r3, [pc, #220]	; (8007964 <scalbn+0x104>)
 8007888:	429e      	cmp	r6, r3
 800788a:	4604      	mov	r4, r0
 800788c:	460d      	mov	r5, r1
 800788e:	da10      	bge.n	80078b2 <scalbn+0x52>
 8007890:	a32b      	add	r3, pc, #172	; (adr r3, 8007940 <scalbn+0xe0>)
 8007892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007896:	e03a      	b.n	800790e <scalbn+0xae>
 8007898:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800789c:	428a      	cmp	r2, r1
 800789e:	d10c      	bne.n	80078ba <scalbn+0x5a>
 80078a0:	ee10 2a10 	vmov	r2, s0
 80078a4:	4620      	mov	r0, r4
 80078a6:	4629      	mov	r1, r5
 80078a8:	f7f8 fcf0 	bl	800028c <__adddf3>
 80078ac:	4604      	mov	r4, r0
 80078ae:	460d      	mov	r5, r1
 80078b0:	e019      	b.n	80078e6 <scalbn+0x86>
 80078b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80078b6:	460b      	mov	r3, r1
 80078b8:	3a36      	subs	r2, #54	; 0x36
 80078ba:	4432      	add	r2, r6
 80078bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80078c0:	428a      	cmp	r2, r1
 80078c2:	dd08      	ble.n	80078d6 <scalbn+0x76>
 80078c4:	2d00      	cmp	r5, #0
 80078c6:	a120      	add	r1, pc, #128	; (adr r1, 8007948 <scalbn+0xe8>)
 80078c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078cc:	da1c      	bge.n	8007908 <scalbn+0xa8>
 80078ce:	a120      	add	r1, pc, #128	; (adr r1, 8007950 <scalbn+0xf0>)
 80078d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078d4:	e018      	b.n	8007908 <scalbn+0xa8>
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	dd08      	ble.n	80078ec <scalbn+0x8c>
 80078da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80078de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80078e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80078e6:	ec45 4b10 	vmov	d0, r4, r5
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
 80078ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80078f0:	da19      	bge.n	8007926 <scalbn+0xc6>
 80078f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80078f6:	429e      	cmp	r6, r3
 80078f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80078fc:	dd0a      	ble.n	8007914 <scalbn+0xb4>
 80078fe:	a112      	add	r1, pc, #72	; (adr r1, 8007948 <scalbn+0xe8>)
 8007900:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e2      	bne.n	80078ce <scalbn+0x6e>
 8007908:	a30f      	add	r3, pc, #60	; (adr r3, 8007948 <scalbn+0xe8>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f8 fe73 	bl	80005f8 <__aeabi_dmul>
 8007912:	e7cb      	b.n	80078ac <scalbn+0x4c>
 8007914:	a10a      	add	r1, pc, #40	; (adr r1, 8007940 <scalbn+0xe0>)
 8007916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0b8      	beq.n	8007890 <scalbn+0x30>
 800791e:	a10e      	add	r1, pc, #56	; (adr r1, 8007958 <scalbn+0xf8>)
 8007920:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007924:	e7b4      	b.n	8007890 <scalbn+0x30>
 8007926:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800792a:	3236      	adds	r2, #54	; 0x36
 800792c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007930:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007934:	4620      	mov	r0, r4
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <scalbn+0x108>)
 8007938:	2200      	movs	r2, #0
 800793a:	e7e8      	b.n	800790e <scalbn+0xae>
 800793c:	f3af 8000 	nop.w
 8007940:	c2f8f359 	.word	0xc2f8f359
 8007944:	01a56e1f 	.word	0x01a56e1f
 8007948:	8800759c 	.word	0x8800759c
 800794c:	7e37e43c 	.word	0x7e37e43c
 8007950:	8800759c 	.word	0x8800759c
 8007954:	fe37e43c 	.word	0xfe37e43c
 8007958:	c2f8f359 	.word	0xc2f8f359
 800795c:	81a56e1f 	.word	0x81a56e1f
 8007960:	43500000 	.word	0x43500000
 8007964:	ffff3cb0 	.word	0xffff3cb0
 8007968:	3c900000 	.word	0x3c900000

0800796c <_init>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	bf00      	nop
 8007970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007972:	bc08      	pop	{r3}
 8007974:	469e      	mov	lr, r3
 8007976:	4770      	bx	lr

08007978 <_fini>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	bf00      	nop
 800797c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797e:	bc08      	pop	{r3}
 8007980:	469e      	mov	lr, r3
 8007982:	4770      	bx	lr
