
PassCode_FSMV0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08005860  08005860  00015860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac4  08005ac4  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08005ac4  08005ac4  00015ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005acc  08005acc  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005acc  08005acc  00015acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08005ad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000138  08005c0c  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005c0c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c6f  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027a2  00000000  00000000  00033dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00036580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  000375f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022b9c  00000000  00000000  00038578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cc4  00000000  00000000  0005b114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce70c  00000000  00000000  0006cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b4e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa8  00000000  00000000  0013b538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005848 	.word	0x08005848

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	08005848 	.word	0x08005848

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000586:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800058a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800058e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000592:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000596:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000598:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800059a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f80e 	bl	80005ce <Lcd_init>

	return lcd;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	461d      	mov	r5, r3
 80005b6:	f107 0410 	add.w	r4, r7, #16
 80005ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005c2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}

080005ce <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7d9b      	ldrb	r3, [r3, #22]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10c      	bne.n	80005f8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005de:	2133      	movs	r1, #51	; 0x33
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f863 	bl	80006ac <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005e6:	2132      	movs	r1, #50	; 0x32
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f85f 	bl	80006ac <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80005ee:	2128      	movs	r1, #40	; 0x28
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f85b 	bl	80006ac <lcd_write_command>
 80005f6:	e003      	b.n	8000600 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80005f8:	2138      	movs	r1, #56	; 0x38
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f856 	bl	80006ac <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f852 	bl	80006ac <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000608:	210c      	movs	r1, #12
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f84e 	bl	80006ac <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000610:	2106      	movs	r1, #6
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f84a 	bl	80006ac <lcd_write_command>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	e00a      	b.n	8000646 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f864 	bl	8000708 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3301      	adds	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	7bfc      	ldrb	r4, [r7, #15]
 8000648:	6838      	ldr	r0, [r7, #0]
 800064a:	f7ff fdc1 	bl	80001d0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	429c      	cmp	r4, r3
 8000652:	d3ed      	bcc.n	8000630 <Lcd_string+0x10>
	}
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
	...

08000660 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
 800066c:	4613      	mov	r3, r2
 800066e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <Lcd_cursor+0x30>)
 8000674:	5cd2      	ldrb	r2, [r2, r3]
 8000676:	78bb      	ldrb	r3, [r7, #2]
 8000678:	4413      	add	r3, r2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	3b80      	subs	r3, #128	; 0x80
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f812 	bl	80006ac <lcd_write_command>
	#endif
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	080059e0 	.word	0x080059e0

08000694 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800069c:	2101      	movs	r1, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f804 	bl	80006ac <lcd_write_command>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6898      	ldr	r0, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	899b      	ldrh	r3, [r3, #12]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	f001 fc7c 	bl	8001fc0 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7d9b      	ldrb	r3, [r3, #22]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d111      	bne.n	80006f4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2204      	movs	r2, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f842 	bl	8000764 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2204      	movs	r2, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f839 	bl	8000764 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80006f2:	e005      	b.n	8000700 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2208      	movs	r2, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f832 	bl	8000764 <lcd_write>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6898      	ldr	r0, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	899b      	ldrh	r3, [r3, #12]
 800071c:	2201      	movs	r2, #1
 800071e:	4619      	mov	r1, r3
 8000720:	f001 fc4e 	bl	8001fc0 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7d9b      	ldrb	r3, [r3, #22]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d111      	bne.n	8000750 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	091b      	lsrs	r3, r3, #4
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2204      	movs	r2, #4
 8000734:	4619      	mov	r1, r3
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f814 	bl	8000764 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2204      	movs	r2, #4
 8000746:	4619      	mov	r1, r3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f80b 	bl	8000764 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800074e:	e005      	b.n	800075c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2208      	movs	r2, #8
 8000754:	4619      	mov	r1, r3
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f804 	bl	8000764 <lcd_write>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
 8000770:	4613      	mov	r3, r2
 8000772:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e019      	b.n	80007ae <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	8819      	ldrh	r1, [r3, #0]
 8000792:	78fa      	ldrb	r2, [r7, #3]
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	fa42 f303 	asr.w	r3, r2, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	f001 fc0c 	bl	8001fc0 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	3301      	adds	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	78bb      	ldrb	r3, [r7, #2]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3e1      	bcc.n	800077a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6918      	ldr	r0, [r3, #16]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8a9b      	ldrh	r3, [r3, #20]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	f001 fbfd 	bl	8001fc0 <HAL_GPIO_WritePin>
	DELAY(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 feb6 	bl	8001538 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6918      	ldr	r0, [r3, #16]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	8a9b      	ldrh	r3, [r3, #20]
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	f001 fbf2 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b0a4      	sub	sp, #144	; 0x90
 80007e8:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */

	// GPIO Ports for LCD
	Lcd_PortType ports[] = {
 80007ea:	4bae      	ldr	r3, [pc, #696]	; (8000aa4 <main+0x2c0>)
 80007ec:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80007f0:	461d      	mov	r5, r3
 80007f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80007fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		D0_GPIO_Port, D1_GPIO_Port, D2_GPIO_Port, D3_GPIO_Port,
		D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port
	 };
	// GPIO Pins for LCD
	Lcd_PinType pins[] = {D0_Pin, D1_Pin, D2_Pin, D3_Pin,
 80007fe:	4baa      	ldr	r3, [pc, #680]	; (8000aa8 <main+0x2c4>)
 8000800:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{"0006", "Visitor6"},
			{"0007", "Visitor7"},
			{"0008", "Visitor8"}
	};
	// Initial setup for fsm
	STATE_T state = RECEIVING_PASS;	//Initiate in state 0
 800080a:	2300      	movs	r3, #0
 800080c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t n = 0;					//Index of input character
 8000810:	2300      	movs	r3, #0
 8000812:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	int16_t ch;						//Input character
	uint8_t cPass = 0;				//Index of checked passcode
 8000816:	2300      	movs	r3, #0
 8000818:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	COMPARISON result = NOT_EQUAL;	//Result of comparing 2 strings
 800081c:	2301      	movs	r3, #1
 800081e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000822:	f000 fe14 	bl	800144e <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000826:	f000 fa13 	bl	8000c50 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800082a:	f000 fb4f 	bl	8000ecc <MX_GPIO_Init>
	MX_DMA_Init();
 800082e:	f000 fb2f 	bl	8000e90 <MX_DMA_Init>
	MX_DAC1_Init();
 8000832:	f000 fa7f 	bl	8000d34 <MX_DAC1_Init>
	MX_USART2_UART_Init();
 8000836:	f000 fafb 	bl	8000e30 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800083a:	f000 faad 	bl	8000d98 <MX_TIM2_Init>

	// Create handler for the LCD
	Lcd_HandleTypeDef lcd;
	lcd = Lcd_create(ports, pins,
 800083e:	4638      	mov	r0, r7
 8000840:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000844:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000848:	2301      	movs	r3, #1
 800084a:	9303      	str	r3, [sp, #12]
 800084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000850:	9302      	str	r3, [sp, #8]
 8000852:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000862:	f7ff fe89 	bl	8000578 <Lcd_create>
 8000866:	f107 0418 	add.w	r4, r7, #24
 800086a:	463d      	mov	r5, r7
 800086c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000870:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000874:	e884 0003 	stmia.w	r4, {r0, r1}
				  RS_GPIO_Port, RS_Pin,
				  EN_GPIO_Port, EN_Pin,
				  LCD_8_BIT_MODE);
	/* USER CODE BEGIN 2 */
	// Initial message serial
	printf("Hello User!\r\n");
 8000878:	488c      	ldr	r0, [pc, #560]	; (8000aac <main+0x2c8>)
 800087a:	f003 fd9d 	bl	80043b8 <puts>

	// Initial message LCD
	Lcd_clear(&lcd);
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff06 	bl	8000694 <Lcd_clear>
	Lcd_cursor(&lcd, 0,3);
 8000888:	f107 0318 	add.w	r3, r7, #24
 800088c:	2203      	movs	r2, #3
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fee5 	bl	8000660 <Lcd_cursor>
	Lcd_string(&lcd, "Pass Code");
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	4985      	ldr	r1, [pc, #532]	; (8000ab0 <main+0x2cc>)
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff febf 	bl	8000620 <Lcd_string>
	Lcd_cursor(&lcd, 1,0);
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2200      	movs	r2, #0
 80008a8:	2101      	movs	r1, #1
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fed8 	bl	8000660 <Lcd_cursor>
	Lcd_string(&lcd, "by David Calles!");
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	497f      	ldr	r1, [pc, #508]	; (8000ab4 <main+0x2d0>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff feb2 	bl	8000620 <Lcd_string>
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state){
 80008bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	f200 818b 	bhi.w	8000bdc <main+0x3f8>
 80008c6:	a201      	add	r2, pc, #4	; (adr r2, 80008cc <main+0xe8>)
 80008c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008cc:	080008dd 	.word	0x080008dd
 80008d0:	0800094f 	.word	0x0800094f
 80008d4:	08000a01 	.word	0x08000a01
 80008d8:	08000a8b 	.word	0x08000a8b
			// State 0
			case RECEIVING_PASS:{
				// Pass within correct size
				if(n < (MAX_PASS_SIZE+1)){
 80008dc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d808      	bhi.n	80008f6 <main+0x112>
					ch = getchar();	// Get character
 80008e4:	f003 fca4 	bl	8004230 <getchar>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					state = CHECKING_PASS;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					//Show message on serial terminal
					printf("Input is too long, Try again!: %c \r\n",ch);
					n = 0;
					state = RECEIVING_PASS;
				}//else
				break;
 80008f4:	e175      	b.n	8000be2 <main+0x3fe>
					Lcd_clear(&lcd);
 80008f6:	f107 0318 	add.w	r3, r7, #24
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff feca 	bl	8000694 <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 8000900:	f107 0318 	add.w	r3, r7, #24
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fea9 	bl	8000660 <Lcd_cursor>
					Lcd_string(&lcd, "Input too long!");
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	4969      	ldr	r1, [pc, #420]	; (8000ab8 <main+0x2d4>)
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fe83 	bl	8000620 <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe9c 	bl	8000660 <Lcd_cursor>
					Lcd_string(&lcd, "Try again.");
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4963      	ldr	r1, [pc, #396]	; (8000abc <main+0x2d8>)
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fe76 	bl	8000620 <Lcd_string>
					printf("Input is too long, Try again!: %c \r\n",ch);
 8000934:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000938:	4619      	mov	r1, r3
 800093a:	4861      	ldr	r0, [pc, #388]	; (8000ac0 <main+0x2dc>)
 800093c:	f003 fcb6 	bl	80042ac <iprintf>
					n = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					state = RECEIVING_PASS;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 800094c:	e149      	b.n	8000be2 <main+0x3fe>
			}// State 0

			// State 1
			case CHECKING_PASS:{
				// Normal character received
				if( ch != MY_EOF ){
 800094e:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000952:	2b0d      	cmp	r3, #13
 8000954:	d012      	beq.n	800097c <main+0x198>
					myPass[n] = (uint8_t)ch;
 8000956:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800095a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000964:	440b      	add	r3, r1
 8000966:	f803 2c50 	strb.w	r2, [r3, #-80]
					++n;
 800096a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800096e:	3301      	adds	r3, #1
 8000970:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					state = RECEIVING_PASS;
 8000974:	2300      	movs	r3, #0
 8000976:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					//Show message on serial terminal
					printf("Input is too short, Try again! \r\n");
					n = 0;
					state = RECEIVING_PASS;
				}//else
				break;
 800097a:	e132      	b.n	8000be2 <main+0x3fe>
				else if( (ch == MY_EOF) && (n == (MAX_PASS_SIZE)) ){
 800097c:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000980:	2b0d      	cmp	r3, #13
 8000982:	d114      	bne.n	80009ae <main+0x1ca>
 8000984:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000988:	2b04      	cmp	r3, #4
 800098a:	d110      	bne.n	80009ae <main+0x1ca>
					cPass = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					printf("Input is: %.4s \r\n", myPass);
 8000992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000996:	4619      	mov	r1, r3
 8000998:	484a      	ldr	r0, [pc, #296]	; (8000ac4 <main+0x2e0>)
 800099a:	f003 fc87 	bl	80042ac <iprintf>
					printf("Elements: %d \r\n", sizeof(myPass));
 800099e:	2104      	movs	r1, #4
 80009a0:	4849      	ldr	r0, [pc, #292]	; (8000ac8 <main+0x2e4>)
 80009a2:	f003 fc83 	bl	80042ac <iprintf>
					state = COMPARING_PASS;
 80009a6:	2302      	movs	r3, #2
 80009a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80009ac:	e119      	b.n	8000be2 <main+0x3fe>
					Lcd_clear(&lcd);
 80009ae:	f107 0318 	add.w	r3, r7, #24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe6e 	bl	8000694 <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 80009b8:	f107 0318 	add.w	r3, r7, #24
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fe4d 	bl	8000660 <Lcd_cursor>
					Lcd_string(&lcd, "Input too short!");
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	4940      	ldr	r1, [pc, #256]	; (8000acc <main+0x2e8>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe27 	bl	8000620 <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fe40 	bl	8000660 <Lcd_cursor>
					Lcd_string(&lcd, "Try again.");
 80009e0:	f107 0318 	add.w	r3, r7, #24
 80009e4:	4935      	ldr	r1, [pc, #212]	; (8000abc <main+0x2d8>)
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe1a 	bl	8000620 <Lcd_string>
					printf("Input is too short, Try again! \r\n");
 80009ec:	4838      	ldr	r0, [pc, #224]	; (8000ad0 <main+0x2ec>)
 80009ee:	f003 fce3 	bl	80043b8 <puts>
					n = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					state = RECEIVING_PASS;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80009fe:	e0f0      	b.n	8000be2 <main+0x3fe>
			}// State 1

			// State 2
			case COMPARING_PASS:{
				// Not all passwords have been checked
				if( cPass < NUM_PASSCODES ){
 8000a00:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000a04:	2b09      	cmp	r3, #9
 8000a06:	d814      	bhi.n	8000a32 <main+0x24e>
					// Compare strings
					result = StringCompare(myPass, db[cPass].pass, MAX_PASS_SIZE);
 8000a08:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4a2f      	ldr	r2, [pc, #188]	; (8000ad4 <main+0x2f0>)
 8000a16:	1899      	adds	r1, r3, r2
 8000a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a1c:	2204      	movs	r2, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f8f0 	bl	8000c04 <StringCompare>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
					state = GIVING_ACCESS;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					//RED signal
					cPass = 0;
					n = 0;
					state = RECEIVING_PASS;
				}
				break;
 8000a30:	e0d7      	b.n	8000be2 <main+0x3fe>
					Lcd_clear(&lcd);
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe2c 	bl	8000694 <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 8000a3c:	f107 0318 	add.w	r3, r7, #24
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fe0b 	bl	8000660 <Lcd_cursor>
					Lcd_string(&lcd, "Incorrect pass!");
 8000a4a:	f107 0318 	add.w	r3, r7, #24
 8000a4e:	4922      	ldr	r1, [pc, #136]	; (8000ad8 <main+0x2f4>)
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fde5 	bl	8000620 <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 8000a56:	f107 0318 	add.w	r3, r7, #24
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fdfe 	bl	8000660 <Lcd_cursor>
					Lcd_string(&lcd, "Try again.");
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4914      	ldr	r1, [pc, #80]	; (8000abc <main+0x2d8>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdd8 	bl	8000620 <Lcd_string>
					printf("Pass-code Incorrect! \r\n");
 8000a70:	481a      	ldr	r0, [pc, #104]	; (8000adc <main+0x2f8>)
 8000a72:	f003 fca1 	bl	80043b8 <puts>
					cPass = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					n = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					state = RECEIVING_PASS;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8000a88:	e0ab      	b.n	8000be2 <main+0x3fe>
			}// State 2

			// State 3
			case GIVING_ACCESS:{
				// Pass-codes are not equal
				if(result == NOT_EQUAL){
 8000a8a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d126      	bne.n	8000ae0 <main+0x2fc>
					++cPass;
 8000a92:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000a96:	3301      	adds	r3, #1
 8000a98:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					state = COMPARING_PASS;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					n = 0;
					cPass = 0;
					result = NOT_EQUAL;
					state = RECEIVING_PASS;
				}//else
				break;
 8000aa2:	e09e      	b.n	8000be2 <main+0x3fe>
 8000aa4:	080059b0 	.word	0x080059b0
 8000aa8:	080059d0 	.word	0x080059d0
 8000aac:	08005860 	.word	0x08005860
 8000ab0:	08005870 	.word	0x08005870
 8000ab4:	0800587c 	.word	0x0800587c
 8000ab8:	08005890 	.word	0x08005890
 8000abc:	080058a0 	.word	0x080058a0
 8000ac0:	080058ac 	.word	0x080058ac
 8000ac4:	080058d4 	.word	0x080058d4
 8000ac8:	080058e8 	.word	0x080058e8
 8000acc:	080058f8 	.word	0x080058f8
 8000ad0:	0800590c 	.word	0x0800590c
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	08005930 	.word	0x08005930
 8000adc:	08005940 	.word	0x08005940
					Lcd_clear(&lcd);
 8000ae0:	f107 0318 	add.w	r3, r7, #24
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fdd5 	bl	8000694 <Lcd_clear>
					Lcd_cursor(&lcd, 0,0);
 8000aea:	f107 0318 	add.w	r3, r7, #24
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fdb4 	bl	8000660 <Lcd_cursor>
					sprintf(messg, "Input: %.4s", myPass);
 8000af8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000afc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b00:	4938      	ldr	r1, [pc, #224]	; (8000be4 <main+0x400>)
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fc60 	bl	80043c8 <siprintf>
					Lcd_string(&lcd, messg);
 8000b08:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b0c:	f107 0318 	add.w	r3, r7, #24
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd84 	bl	8000620 <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fd9d 	bl	8000660 <Lcd_cursor>
					sprintf(messg, "%s", db[cPass].name);
 8000b26:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <main+0x404>)
 8000b34:	4413      	add	r3, r2
 8000b36:	1d1a      	adds	r2, r3, #4
 8000b38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b3c:	492b      	ldr	r1, [pc, #172]	; (8000bec <main+0x408>)
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fc42 	bl	80043c8 <siprintf>
					Lcd_string(&lcd, messg);
 8000b44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000b48:	f107 0318 	add.w	r3, r7, #24
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd66 	bl	8000620 <Lcd_string>
					printf("Pass Accepted, Hello %s! \r\n", db[cPass].name);
 8000b54:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8000b58:	4613      	mov	r3, r2
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4413      	add	r3, r2
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <main+0x404>)
 8000b62:	4413      	add	r3, r2
 8000b64:	3304      	adds	r3, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4821      	ldr	r0, [pc, #132]	; (8000bf0 <main+0x40c>)
 8000b6a:	f003 fb9f 	bl	80042ac <iprintf>
					printf("Press any key to reset. \r\n");
 8000b6e:	4821      	ldr	r0, [pc, #132]	; (8000bf4 <main+0x410>)
 8000b70:	f003 fc22 	bl	80043b8 <puts>
					ch = getchar();
 8000b74:	f003 fb5c 	bl	8004230 <getchar>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
					printf("Hello User! \r\n");
 8000b7e:	481e      	ldr	r0, [pc, #120]	; (8000bf8 <main+0x414>)
 8000b80:	f003 fc1a 	bl	80043b8 <puts>
					Lcd_clear(&lcd);
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fd83 	bl	8000694 <Lcd_clear>
					Lcd_cursor(&lcd, 0,3);
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	2203      	movs	r2, #3
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fd62 	bl	8000660 <Lcd_cursor>
					Lcd_string(&lcd, "Pass Code");
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	4916      	ldr	r1, [pc, #88]	; (8000bfc <main+0x418>)
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fd3c 	bl	8000620 <Lcd_string>
					Lcd_cursor(&lcd, 1,0);
 8000ba8:	f107 0318 	add.w	r3, r7, #24
 8000bac:	2200      	movs	r2, #0
 8000bae:	2101      	movs	r1, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd55 	bl	8000660 <Lcd_cursor>
					Lcd_string(&lcd, "by David Calles!");
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	4911      	ldr	r1, [pc, #68]	; (8000c00 <main+0x41c>)
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fd2f 	bl	8000620 <Lcd_string>
					n = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
					cPass = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					result = NOT_EQUAL;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
					state = RECEIVING_PASS;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 8000bda:	e002      	b.n	8000be2 <main+0x3fe>
			}// State 3

			// Default: Go to state 0
			default:
				state = RECEIVING_PASS;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		switch(state){
 8000be2:	e66b      	b.n	80008bc <main+0xd8>
 8000be4:	08005958 	.word	0x08005958
 8000be8:	20000000 	.word	0x20000000
 8000bec:	08005964 	.word	0x08005964
 8000bf0:	08005968 	.word	0x08005968
 8000bf4:	08005984 	.word	0x08005984
 8000bf8:	080059a0 	.word	0x080059a0
 8000bfc:	08005870 	.word	0x08005870
 8000c00:	0800587c 	.word	0x0800587c

08000c04 <StringCompare>:
*							Array to compare 1.
*					uint8_t n: number of characters in array
*
*	Returns:		COMPARISON c: EQUAL or NOT_EQUAL
---------------------------------------------------------------------------*/
COMPARISON StringCompare(char *a, char *b, uint8_t n){
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	71fb      	strb	r3, [r7, #7]
	COMPARISON c = EQUAL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<n; i++){
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e00e      	b.n	8000c3a <StringCompare+0x36>
		if(a[i] != b[i]){
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4413      	add	r3, r2
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	440b      	add	r3, r1
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d001      	beq.n	8000c34 <StringCompare+0x30>
			c = NOT_EQUAL;
 8000c30:	2301      	movs	r3, #1
 8000c32:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<n; i++){
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	3301      	adds	r3, #1
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	429a      	cmp	r2, r3
 8000c40:	dbec      	blt.n	8000c1c <StringCompare+0x18>
		}//if
	}//for
	return c;
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
}//StringCompare
 8000c44:	4618      	mov	r0, r3
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ac      	sub	sp, #176	; 0xb0
 8000c54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c5a:	2244      	movs	r2, #68	; 0x44
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fb1c 	bl	800429c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2254      	movs	r2, #84	; 0x54
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fb0e 	bl	800429c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c80:	2310      	movs	r3, #16
 8000c82:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c84:	2301      	movs	r3, #1
 8000c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c90:	2360      	movs	r3, #96	; 0x60
 8000c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 f9f7 	bl	80020b8 <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000cd0:	f000 f97a 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ce8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cec:	2101      	movs	r1, #1
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fe02 	bl	80028f8 <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cfa:	f000 f965 	bl	8000fc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fffb 	bl	8002d04 <HAL_RCCEx_PeriphCLKConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d14:	f000 f958 	bl	8000fc8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d1c:	f001 f976 	bl	800200c <HAL_PWREx_ControlVoltageScaling>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000d26:	f000 f94f 	bl	8000fc8 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	37b0      	adds	r7, #176	; 0xb0
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2224      	movs	r2, #36	; 0x24
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f003 faab 	bl	800429c <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_DAC1_Init+0x5c>)
 8000d48:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <MX_DAC1_Init+0x60>)
 8000d4a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d4c:	4810      	ldr	r0, [pc, #64]	; (8000d90 <MX_DAC1_Init+0x5c>)
 8000d4e:	f000 fd28 	bl	80017a2 <HAL_DAC_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d58:	f000 f936 	bl	8000fc8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000d60:	2324      	movs	r3, #36	; 0x24
 8000d62:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <MX_DAC1_Init+0x5c>)
 8000d78:	f000 fd35 	bl	80017e6 <HAL_DAC_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000d82:	f000 f921 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000160 	.word	0x20000160
 8000d94:	40007400 	.word	0x40007400

08000d98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000db8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dcc:	2264      	movs	r2, #100	; 0x64
 8000dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dde:	f002 fa77 	bl	80032d0 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000de8:	f000 f8ee 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0310 	add.w	r3, r7, #16
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dfa:	f002 fac0 	bl	800337e <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 f8e0 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e08:	2320      	movs	r3, #32
 8000e0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000e16:	f002 fc77 	bl	8003708 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f000 f8d2 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200001bc 	.word	0x200001bc

08000e30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <MX_USART2_UART_Init+0x5c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x58>)
 8000e74:	f002 fcae 	bl	80037d4 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 f8a3 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000208 	.word	0x20000208
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_DMA_Init+0x38>)
 8000e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <MX_DMA_Init+0x38>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_DMA_Init+0x38>)
 8000ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	200d      	movs	r0, #13
 8000eb4:	f000 fc3f 	bl	8001736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000eb8:	200d      	movs	r0, #13
 8000eba:	f000 fc58 	bl	800176e <HAL_NVIC_EnableIRQ>

}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	4a36      	ldr	r2, [pc, #216]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eee:	4b34      	ldr	r3, [pc, #208]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	4a2a      	ldr	r2, [pc, #168]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f1e:	4b28      	ldr	r3, [pc, #160]	; (8000fc0 <MX_GPIO_Init+0xf4>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	21fb      	movs	r1, #251	; 0xfb
 8000f2e:	4825      	ldr	r0, [pc, #148]	; (8000fc4 <MX_GPIO_Init+0xf8>)
 8000f30:	f001 f846 	bl	8001fc0 <HAL_GPIO_WritePin>
						  |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f001 f83f 	bl	8001fc0 <HAL_GPIO_WritePin>
						  |GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure LED Output level*/
	HAL_GPIO_WritePin(LED_GPIO, LED_PIN, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f001 f838 	bl	8001fc0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB1 LD3_Pin PB4
						   PB5 PB6 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8000f50:	23fb      	movs	r3, #251	; 0xfb
 8000f52:	60fb      	str	r3, [r7, #12]
						  |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
	if(LED_GPIO == GPIOB) // Add Led pin if part of GPIOB
	  GPIO_InitStruct.Pin |= LED_PIN;

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	4817      	ldr	r0, [pc, #92]	; (8000fc4 <MX_GPIO_Init+0xf8>)
 8000f68:	f000 fec0 	bl	8001cec <HAL_GPIO_Init>

	/*Configure GPIO pins : PA8 PA9 PA10 PA11
						   PA12 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f6c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f70:	60fb      	str	r3, [r7, #12]
						  |GPIO_PIN_12;
	if(LED_GPIO == GPIOA)// Add Led pin if part of GPIOA
	  GPIO_InitStruct.Pin |= LED_PIN;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f78:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f90:	f000 feac 	bl	8001cec <HAL_GPIO_Init>

	/*Configure GPIO pin : VCP_RX_Pin */
	GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f98:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f000 fe9a 	bl	8001cec <HAL_GPIO_Init>
}
 8000fb8:	bf00      	nop
 8000fba:	3720      	adds	r7, #32
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>
	...

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x44>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_MspInit+0x44>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x44>)
 8000fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x44>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x44>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x44>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a2b      	ldr	r2, [pc, #172]	; (80010e8 <HAL_DAC_MspInit+0xcc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d14f      	bne.n	80010de <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <HAL_DAC_MspInit+0xd0>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a2a      	ldr	r2, [pc, #168]	; (80010ec <HAL_DAC_MspInit+0xd0>)
 8001044:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001048:	6593      	str	r3, [r2, #88]	; 0x58
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_DAC_MspInit+0xd0>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b25      	ldr	r3, [pc, #148]	; (80010ec <HAL_DAC_MspInit+0xd0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a24      	ldr	r2, [pc, #144]	; (80010ec <HAL_DAC_MspInit+0xd0>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <HAL_DAC_MspInit+0xd0>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800106e:	2310      	movs	r3, #16
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f000 fe32 	bl	8001cec <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 800108a:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <HAL_DAC_MspInit+0xd8>)
 800108c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 8001090:	2206      	movs	r2, #6
 8001092:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 8001096:	2210      	movs	r2, #16
 8001098:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 80010a2:	2280      	movs	r2, #128	; 0x80
 80010a4:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 80010a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ac:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 80010b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b4:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 80010b8:	2220      	movs	r2, #32
 80010ba:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 80010c4:	f000 fcaa 	bl	8001a1c <HAL_DMA_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80010ce:	f7ff ff7b 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <HAL_DAC_MspInit+0xd4>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40007400 	.word	0x40007400
 80010ec:	40021000 	.word	0x40021000
 80010f0:	20000174 	.word	0x20000174
 80010f4:	40020030 	.word	0x40020030

080010f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001108:	d10b      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_TIM_Base_MspInit+0x38>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_TIM_Base_MspInit+0x38>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6593      	str	r3, [r2, #88]	; 0x58
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_TIM_Base_MspInit+0x38>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <HAL_UART_MspInit+0xa0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d13a      	bne.n	80011cc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_UART_MspInit+0xa4>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_UART_MspInit+0xa4>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	6593      	str	r3, [r2, #88]	; 0x58
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_UART_MspInit+0xa4>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_UART_MspInit+0xa4>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_UART_MspInit+0xa4>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_UART_MspInit+0xa4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001186:	2304      	movs	r3, #4
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001196:	2307      	movs	r3, #7
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a4:	f000 fda2 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011ba:	2303      	movs	r3, #3
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f000 fd90 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	; 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40021000 	.word	0x40021000

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 f966 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <DMA1_Channel3_IRQHandler+0x10>)
 8001236:	f000 fca9 	bl	8001b8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000174 	.word	0x20000174

08001244 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001250:	2301      	movs	r3, #1
 8001252:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	b29a      	uxth	r2, r3
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	4807      	ldr	r0, [pc, #28]	; (800127c <_read+0x38>)
 8001260:	f002 fb9a 	bl	8003998 <HAL_UART_Receive>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d002      	beq.n	8001270 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	607b      	str	r3, [r7, #4]

	return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000208 	.word	0x20000208

08001280 <_write>:

int _write(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	b29a      	uxth	r2, r3
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <_write+0x40>)
 800129c:	f002 fae8 	bl	8003870 <HAL_UART_Transmit>
 80012a0:	4603      	mov	r3, r0
 80012a2:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d002      	beq.n	80012b0 <_write+0x30>
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d101      	bne.n	80012b4 <_write+0x34>
	{
		Error_Handler();
 80012b0:	f7ff fe8a 	bl	8000fc8 <Error_Handler>
	}

	return len;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000208 	.word	0x20000208

080012c4 <_close>:



int _close(int file)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	return -1;
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ec:	605a      	str	r2, [r3, #4]
	return 0;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_isatty>:

int _isatty(int file)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	return 1;
 8001304:	2301      	movs	r3, #1
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001312:	b480      	push	{r7}
 8001314:	b085      	sub	sp, #20
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
	return 0;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f002 ff62 	bl	8004224 <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20010000 	.word	0x20010000
 800138c:	00000400 	.word	0x00000400
 8001390:	20000154 	.word	0x20000154
 8001394:	200002a0 	.word	0x200002a0

08001398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <SystemInit+0x5c>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <SystemInit+0x5c>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <SystemInit+0x60>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <SystemInit+0x60>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <SystemInit+0x60>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <SystemInit+0x60>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <SystemInit+0x60>)
 80013c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80013c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80013cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <SystemInit+0x60>)
 80013d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <SystemInit+0x60>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <SystemInit+0x60>)
 80013dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SystemInit+0x60>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00
 80013f8:	40021000 	.word	0x40021000

080013fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001400:	f7ff ffca 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001406:	e003      	b.n	8001410 <LoopCopyDataInit>

08001408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800140a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800140c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800140e:	3104      	adds	r1, #4

08001410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001418:	d3f6      	bcc.n	8001408 <CopyDataInit>
	ldr	r2, =_sbss
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <LoopForever+0x12>)
	b	LoopFillZerobss
 800141c:	e002      	b.n	8001424 <LoopFillZerobss>

0800141e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800141e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001420:	f842 3b04 	str.w	r3, [r2], #4

08001424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <LoopForever+0x16>)
	cmp	r2, r3
 8001426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001428:	d3f9      	bcc.n	800141e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142a:	f002 ff13 	bl	8004254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142e:	f7ff f9d9 	bl	80007e4 <main>

08001432 <LoopForever>:

LoopForever:
    b LoopForever
 8001432:	e7fe      	b.n	8001432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001434:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001438:	08005ad4 	.word	0x08005ad4
	ldr	r0, =_sdata
 800143c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001440:	20000138 	.word	0x20000138
	ldr	r2, =_sbss
 8001444:	20000138 	.word	0x20000138
	ldr	r3, = _ebss
 8001448:	200002a0 	.word	0x200002a0

0800144c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800144c:	e7fe      	b.n	800144c <ADC1_IRQHandler>

0800144e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001458:	2003      	movs	r0, #3
 800145a:	f000 f961 	bl	8001720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145e:	2000      	movs	r0, #0
 8001460:	f000 f80e 	bl	8001480 <HAL_InitTick>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	71fb      	strb	r3, [r7, #7]
 800146e:	e001      	b.n	8001474 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001470:	f7ff fdb0 	bl	8000fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001474:	79fb      	ldrb	r3, [r7, #7]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800148c:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_InitTick+0x6c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d023      	beq.n	80014dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_InitTick+0x70>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <HAL_InitTick+0x6c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4619      	mov	r1, r3
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f96d 	bl	800178a <HAL_SYSTICK_Config>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10f      	bne.n	80014d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b0f      	cmp	r3, #15
 80014ba:	d809      	bhi.n	80014d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014bc:	2200      	movs	r2, #0
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f000 f937 	bl	8001736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <HAL_InitTick+0x74>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e007      	b.n	80014e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e004      	b.n	80014e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
 80014da:	e001      	b.n	80014e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200000d0 	.word	0x200000d0
 80014f0:	200000c8 	.word	0x200000c8
 80014f4:	200000cc 	.word	0x200000cc

080014f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	200000d0 	.word	0x200000d0
 800151c:	2000028c 	.word	0x2000028c

08001520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	2000028c 	.word	0x2000028c

08001538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff ffee 	bl	8001520 <HAL_GetTick>
 8001544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001550:	d005      	beq.n	800155e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_Delay+0x44>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155e:	bf00      	nop
 8001560:	f7ff ffde 	bl	8001520 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	429a      	cmp	r2, r3
 800156e:	d8f7      	bhi.n	8001560 <HAL_Delay+0x28>
  {
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200000d0 	.word	0x200000d0

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <__NVIC_EnableIRQ+0x38>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
	...

080016dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ec:	d301      	bcc.n	80016f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <SysTick_Config+0x40>)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fa:	210f      	movs	r1, #15
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f7ff ff8e 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <SysTick_Config+0x40>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <SysTick_Config+0x40>)
 800170c:	2207      	movs	r2, #7
 800170e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	e000e010 	.word	0xe000e010

08001720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff ff29 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001748:	f7ff ff3e 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 800174c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f7ff ff8e 	bl	8001674 <NVIC_EncodePriority>
 8001758:	4602      	mov	r2, r0
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff5d 	bl	8001620 <__NVIC_SetPriority>
}
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff31 	bl	80015e4 <__NVIC_EnableIRQ>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff ffa2 	bl	80016dc <SysTick_Config>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e014      	b.n	80017de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	791b      	ldrb	r3, [r3, #4]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d105      	bne.n	80017ca <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fc29 	bl	800101c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2202      	movs	r2, #2
 80017ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b088      	sub	sp, #32
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	795b      	ldrb	r3, [r3, #5]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_DAC_ConfigChannel+0x1c>
 80017fe:	2302      	movs	r3, #2
 8001800:	e107      	b.n	8001a12 <HAL_DAC_ConfigChannel+0x22c>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2202      	movs	r2, #2
 800180c:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b04      	cmp	r3, #4
 8001814:	d174      	bne.n	8001900 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001816:	f7ff fe83 	bl	8001520 <HAL_GetTick>
 800181a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d134      	bne.n	800188c <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001822:	e011      	b.n	8001848 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001824:	f7ff fe7c 	bl	8001520 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d90a      	bls.n	8001848 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	f043 0208 	orr.w	r2, r3, #8
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2203      	movs	r2, #3
 8001842:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e0e4      	b.n	8001a12 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1e6      	bne.n	8001824 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001856:	2001      	movs	r0, #1
 8001858:	f7ff fe6e 	bl	8001538 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	6992      	ldr	r2, [r2, #24]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
 8001866:	e01e      	b.n	80018a6 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001868:	f7ff fe5a 	bl	8001520 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d90a      	bls.n	800188c <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	f043 0208 	orr.w	r2, r3, #8
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2203      	movs	r2, #3
 8001886:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e0c2      	b.n	8001a12 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	2b00      	cmp	r3, #0
 8001894:	dbe8      	blt.n	8001868 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fe4e 	bl	8001538 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	6992      	ldr	r2, [r2, #24]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	ea02 0103 	and.w	r1, r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	21ff      	movs	r1, #255	; 0xff
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	ea02 0103 	and.w	r1, r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	409a      	lsls	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d11d      	bne.n	8001944 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2207      	movs	r2, #7
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	431a      	orrs	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f003 0310 	and.w	r3, r3, #16
 8001998:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43da      	mvns	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	400a      	ands	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	f640 72fc 	movw	r2, #4092	; 0xffc
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6819      	ldr	r1, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f003 0310 	and.w	r3, r3, #16
 80019f4:	22c0      	movs	r2, #192	; 0xc0
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	400a      	ands	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e098      	b.n	8001b60 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b4d      	ldr	r3, [pc, #308]	; (8001b6c <HAL_DMA_Init+0x150>)
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d80f      	bhi.n	8001a5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <HAL_DMA_Init+0x154>)
 8001a42:	4413      	add	r3, r2
 8001a44:	4a4b      	ldr	r2, [pc, #300]	; (8001b74 <HAL_DMA_Init+0x158>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	009a      	lsls	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a48      	ldr	r2, [pc, #288]	; (8001b78 <HAL_DMA_Init+0x15c>)
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
 8001a58:	e00e      	b.n	8001a78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_DMA_Init+0x160>)
 8001a62:	4413      	add	r3, r2
 8001a64:	4a43      	ldr	r2, [pc, #268]	; (8001b74 <HAL_DMA_Init+0x158>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	009a      	lsls	r2, r3, #2
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a42      	ldr	r2, [pc, #264]	; (8001b80 <HAL_DMA_Init+0x164>)
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ad2:	d039      	beq.n	8001b48 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	4a27      	ldr	r2, [pc, #156]	; (8001b78 <HAL_DMA_Init+0x15c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d11a      	bne.n	8001b14 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_DMA_Init+0x168>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f003 031c 	and.w	r3, r3, #28
 8001aea:	210f      	movs	r1, #15
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	4924      	ldr	r1, [pc, #144]	; (8001b84 <HAL_DMA_Init+0x168>)
 8001af4:	4013      	ands	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <HAL_DMA_Init+0x168>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b04:	f003 031c 	and.w	r3, r3, #28
 8001b08:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0c:	491d      	ldr	r1, [pc, #116]	; (8001b84 <HAL_DMA_Init+0x168>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
 8001b12:	e019      	b.n	8001b48 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_DMA_Init+0x16c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	f003 031c 	and.w	r3, r3, #28
 8001b20:	210f      	movs	r1, #15
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4917      	ldr	r1, [pc, #92]	; (8001b88 <HAL_DMA_Init+0x16c>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b2e:	4b16      	ldr	r3, [pc, #88]	; (8001b88 <HAL_DMA_Init+0x16c>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f003 031c 	and.w	r3, r3, #28
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	4911      	ldr	r1, [pc, #68]	; (8001b88 <HAL_DMA_Init+0x16c>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40020407 	.word	0x40020407
 8001b70:	bffdfff8 	.word	0xbffdfff8
 8001b74:	cccccccd 	.word	0xcccccccd
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	bffdfbf8 	.word	0xbffdfbf8
 8001b80:	40020400 	.word	0x40020400
 8001b84:	400200a8 	.word	0x400200a8
 8001b88:	400204a8 	.word	0x400204a8

08001b8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f003 031c 	and.w	r3, r3, #28
 8001bac:	2204      	movs	r2, #4
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d026      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x7a>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d021      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0204 	bic.w	r2, r2, #4
 8001bde:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	f003 021c 	and.w	r2, r3, #28
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	2104      	movs	r1, #4
 8001bee:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d071      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001c04:	e06c      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f003 031c 	and.w	r3, r3, #28
 8001c0e:	2202      	movs	r2, #2
 8001c10:	409a      	lsls	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d02e      	beq.n	8001c78 <HAL_DMA_IRQHandler+0xec>
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d029      	beq.n	8001c78 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0320 	and.w	r3, r3, #32
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10b      	bne.n	8001c4a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 020a 	bic.w	r2, r2, #10
 8001c40:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f003 021c 	and.w	r2, r3, #28
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2102      	movs	r1, #2
 8001c58:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d038      	beq.n	8001ce0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c76:	e033      	b.n	8001ce0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7c:	f003 031c 	and.w	r3, r3, #28
 8001c80:	2208      	movs	r2, #8
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d02a      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x156>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d025      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 020e 	bic.w	r2, r2, #14
 8001ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f003 021c 	and.w	r2, r3, #28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
}
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b087      	sub	sp, #28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e148      	b.n	8001f8e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 813a 	beq.w	8001f88 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d00b      	beq.n	8001d34 <HAL_GPIO_Init+0x48>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d007      	beq.n	8001d34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b12      	cmp	r3, #18
 8001d32:	d130      	bne.n	8001d96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 0201 	and.w	r2, r3, #1
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0xea>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b12      	cmp	r3, #18
 8001dd4:	d123      	bne.n	8001e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	6939      	ldr	r1, [r7, #16]
 8001e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0203 	and.w	r2, r3, #3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8094 	beq.w	8001f88 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e60:	4b52      	ldr	r3, [pc, #328]	; (8001fac <HAL_GPIO_Init+0x2c0>)
 8001e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e64:	4a51      	ldr	r2, [pc, #324]	; (8001fac <HAL_GPIO_Init+0x2c0>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <HAL_GPIO_Init+0x2c0>)
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e78:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <HAL_GPIO_Init+0x2c4>)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	089b      	lsrs	r3, r3, #2
 8001e7e:	3302      	adds	r3, #2
 8001e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea2:	d00d      	beq.n	8001ec0 <HAL_GPIO_Init+0x1d4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a43      	ldr	r2, [pc, #268]	; (8001fb4 <HAL_GPIO_Init+0x2c8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <HAL_GPIO_Init+0x1d0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a42      	ldr	r2, [pc, #264]	; (8001fb8 <HAL_GPIO_Init+0x2cc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_GPIO_Init+0x1cc>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e004      	b.n	8001ec2 <HAL_GPIO_Init+0x1d6>
 8001eb8:	2307      	movs	r3, #7
 8001eba:	e002      	b.n	8001ec2 <HAL_GPIO_Init+0x1d6>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_GPIO_Init+0x1d6>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	f002 0203 	and.w	r2, r2, #3
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	4093      	lsls	r3, r2
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ed2:	4937      	ldr	r1, [pc, #220]	; (8001fb0 <HAL_GPIO_Init+0x2c4>)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ee0:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f04:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43db      	mvns	r3, r3
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f2e:	4a23      	ldr	r2, [pc, #140]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f58:	4a18      	ldr	r2, [pc, #96]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43db      	mvns	r3, r3
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f82:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <HAL_GPIO_Init+0x2d0>)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f47f aeaf 	bne.w	8001cfc <HAL_GPIO_Init+0x10>
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010000 	.word	0x40010000
 8001fb4:	48000400 	.word	0x48000400
 8001fb8:	48000800 	.word	0x48000800
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40007000 	.word	0x40007000

0800200c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800201a:	d130      	bne.n	800207e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002028:	d038      	beq.n	800209c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002032:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002034:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2232      	movs	r2, #50	; 0x32
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9b      	lsrs	r3, r3, #18
 800204c:	3301      	adds	r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002050:	e002      	b.n	8002058 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3b01      	subs	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002064:	d102      	bne.n	800206c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f2      	bne.n	8002052 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d110      	bne.n	800209c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e00f      	b.n	800209e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208a:	d007      	beq.n	800209c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002094:	4a05      	ldr	r2, [pc, #20]	; (80020ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000
 80020b0:	200000c8 	.word	0x200000c8
 80020b4:	431bde83 	.word	0x431bde83

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f000 bc11 	b.w	80028ee <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020cc:	4ba0      	ldr	r3, [pc, #640]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 030c 	and.w	r3, r3, #12
 80020d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d6:	4b9e      	ldr	r3, [pc, #632]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80e4 	beq.w	80022b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_RCC_OscConfig+0x4c>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	f040 808b 	bne.w	8002212 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	f040 8087 	bne.w	8002212 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002104:	4b92      	ldr	r3, [pc, #584]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x64>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e3e8      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1a      	ldr	r2, [r3, #32]
 8002120:	4b8b      	ldr	r3, [pc, #556]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_RCC_OscConfig+0x7e>
 800212c:	4b88      	ldr	r3, [pc, #544]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002134:	e005      	b.n	8002142 <HAL_RCC_OscConfig+0x8a>
 8002136:	4b86      	ldr	r3, [pc, #536]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800213c:	091b      	lsrs	r3, r3, #4
 800213e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002142:	4293      	cmp	r3, r2
 8002144:	d223      	bcs.n	800218e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fd7a 	bl	8002c44 <RCC_SetFlashLatencyFromMSIRange>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e3c9      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800215a:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a7c      	ldr	r2, [pc, #496]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4b7a      	ldr	r3, [pc, #488]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	4977      	ldr	r1, [pc, #476]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002178:	4b75      	ldr	r3, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	4972      	ldr	r1, [pc, #456]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e025      	b.n	80021da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218e:	4b70      	ldr	r3, [pc, #448]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6f      	ldr	r2, [pc, #444]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b6d      	ldr	r3, [pc, #436]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	496a      	ldr	r1, [pc, #424]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ac:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	4965      	ldr	r1, [pc, #404]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fd3a 	bl	8002c44 <RCC_SetFlashLatencyFromMSIRange>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e389      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021da:	f000 fc6f 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	495a      	ldr	r1, [pc, #360]	; (8002354 <HAL_RCC_OscConfig+0x29c>)
 80021ec:	5ccb      	ldrb	r3, [r1, r3]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	4a58      	ldr	r2, [pc, #352]	; (8002358 <HAL_RCC_OscConfig+0x2a0>)
 80021f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021fa:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_RCC_OscConfig+0x2a4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f93e 	bl	8001480 <HAL_InitTick>
 8002204:	4603      	mov	r3, r0
 8002206:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d052      	beq.n	80022b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	e36d      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d032      	beq.n	8002280 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002226:	f7ff f97b 	bl	8001520 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800222e:	f7ff f977 	bl	8001520 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e356      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002240:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	493a      	ldr	r1, [pc, #232]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800227a:	4313      	orrs	r3, r2
 800227c:	604b      	str	r3, [r1, #4]
 800227e:	e01a      	b.n	80022b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a32      	ldr	r2, [pc, #200]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800228c:	f7ff f948 	bl	8001520 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002294:	f7ff f944 	bl	8001520 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e323      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022a6:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1dc>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d073      	beq.n	80023aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_OscConfig+0x21c>
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d10e      	bne.n	80022ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d063      	beq.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d15f      	bne.n	80023a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e300      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f4:	d106      	bne.n	8002304 <HAL_RCC_OscConfig+0x24c>
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a15      	ldr	r2, [pc, #84]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 80022fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e01d      	b.n	8002340 <HAL_RCC_OscConfig+0x288>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800230c:	d10c      	bne.n	8002328 <HAL_RCC_OscConfig+0x270>
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	e00b      	b.n	8002340 <HAL_RCC_OscConfig+0x288>
 8002328:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a08      	ldr	r2, [pc, #32]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800232e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_RCC_OscConfig+0x298>)
 800233a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800233e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01b      	beq.n	8002380 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f8ea 	bl	8001520 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234e:	e010      	b.n	8002372 <HAL_RCC_OscConfig+0x2ba>
 8002350:	40021000 	.word	0x40021000
 8002354:	080059e4 	.word	0x080059e4
 8002358:	200000c8 	.word	0x200000c8
 800235c:	200000cc 	.word	0x200000cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7ff f8de 	bl	8001520 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e2bd      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002372:	4baf      	ldr	r3, [pc, #700]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x2a8>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7ff f8ce 	bl	8001520 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002388:	f7ff f8ca 	bl	8001520 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e2a9      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800239a:	4ba5      	ldr	r3, [pc, #660]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x2d0>
 80023a6:	e000      	b.n	80023aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d060      	beq.n	8002478 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x310>
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d119      	bne.n	80023f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d116      	bne.n	80023f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c8:	4b99      	ldr	r3, [pc, #612]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_OscConfig+0x328>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e286      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e0:	4b93      	ldr	r3, [pc, #588]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	4990      	ldr	r1, [pc, #576]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f4:	e040      	b.n	8002478 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d023      	beq.n	8002446 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023fe:	4b8c      	ldr	r3, [pc, #560]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a8b      	ldr	r2, [pc, #556]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7ff f889 	bl	8001520 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002412:	f7ff f885 	bl	8001520 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e264      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002424:	4b82      	ldr	r3, [pc, #520]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b7f      	ldr	r3, [pc, #508]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	497c      	ldr	r1, [pc, #496]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
 8002444:	e018      	b.n	8002478 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002446:	4b7a      	ldr	r3, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a79      	ldr	r2, [pc, #484]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 800244c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7ff f865 	bl	8001520 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245a:	f7ff f861 	bl	8001520 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e240      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800246c:	4b70      	ldr	r3, [pc, #448]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d03c      	beq.n	80024fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 800248e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002492:	4a67      	ldr	r2, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249c:	f7ff f840 	bl	8001520 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7ff f83c 	bl	8001520 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e21b      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024b6:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80024b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ef      	beq.n	80024a4 <HAL_RCC_OscConfig+0x3ec>
 80024c4:	e01b      	b.n	80024fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c6:	4b5a      	ldr	r3, [pc, #360]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80024c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7ff f823 	bl	8001520 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024de:	f7ff f81f 	bl	8001520 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1fe      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f0:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ef      	bne.n	80024de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0304 	and.w	r3, r3, #4
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80a6 	beq.w	8002658 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002510:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10d      	bne.n	8002538 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b44      	ldr	r3, [pc, #272]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	4a43      	ldr	r2, [pc, #268]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002526:	6593      	str	r3, [r2, #88]	; 0x58
 8002528:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002534:	2301      	movs	r3, #1
 8002536:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002538:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <HAL_RCC_OscConfig+0x57c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d118      	bne.n	8002576 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002544:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x57c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a3a      	ldr	r2, [pc, #232]	; (8002634 <HAL_RCC_OscConfig+0x57c>)
 800254a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002550:	f7fe ffe6 	bl	8001520 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7fe ffe2 	bl	8001520 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1c1      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256a:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_RCC_OscConfig+0x57c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d108      	bne.n	8002590 <HAL_RCC_OscConfig+0x4d8>
 800257e:	4b2c      	ldr	r3, [pc, #176]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800258e:	e024      	b.n	80025da <HAL_RCC_OscConfig+0x522>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b05      	cmp	r3, #5
 8002596:	d110      	bne.n	80025ba <HAL_RCC_OscConfig+0x502>
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a24      	ldr	r2, [pc, #144]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80025a0:	f043 0304 	orr.w	r3, r3, #4
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	4a20      	ldr	r2, [pc, #128]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b8:	e00f      	b.n	80025da <HAL_RCC_OscConfig+0x522>
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ca:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80025cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d0:	4a17      	ldr	r2, [pc, #92]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 80025d2:	f023 0304 	bic.w	r3, r3, #4
 80025d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7fe ff9d 	bl	8001520 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe ff99 	bl	8001520 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e176      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_OscConfig+0x578>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0ed      	beq.n	80025ea <HAL_RCC_OscConfig+0x532>
 800260e:	e01a      	b.n	8002646 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe ff86 	bl	8001520 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002616:	e00f      	b.n	8002638 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe ff82 	bl	8001520 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d906      	bls.n	8002638 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e15f      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002638:	4baa      	ldr	r3, [pc, #680]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1e8      	bne.n	8002618 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002646:	7ffb      	ldrb	r3, [r7, #31]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4ba5      	ldr	r3, [pc, #660]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	4aa4      	ldr	r2, [pc, #656]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002656:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03c      	beq.n	80026de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800266c:	4b9d      	ldr	r3, [pc, #628]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800266e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002672:	4a9c      	ldr	r2, [pc, #624]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe ff50 	bl	8001520 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002684:	f7fe ff4c 	bl	8001520 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e12b      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002696:	4b93      	ldr	r3, [pc, #588]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <HAL_RCC_OscConfig+0x5cc>
 80026a4:	e01b      	b.n	80026de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026a6:	4b8f      	ldr	r3, [pc, #572]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80026a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ac:	4a8d      	ldr	r2, [pc, #564]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe ff33 	bl	8001520 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026be:	f7fe ff2f 	bl	8001520 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e10e      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026d0:	4b84      	ldr	r3, [pc, #528]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80026d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ef      	bne.n	80026be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8102 	beq.w	80028ec <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	f040 80c5 	bne.w	800287c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026f2:	4b7c      	ldr	r3, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0203 	and.w	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	429a      	cmp	r2, r3
 8002704:	d12c      	bne.n	8002760 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	3b01      	subs	r3, #1
 8002712:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002714:	429a      	cmp	r2, r3
 8002716:	d123      	bne.n	8002760 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002722:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d11b      	bne.n	8002760 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d113      	bne.n	8002760 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	3b01      	subs	r3, #1
 8002746:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d109      	bne.n	8002760 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	085b      	lsrs	r3, r3, #1
 8002758:	3b01      	subs	r3, #1
 800275a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d067      	beq.n	8002830 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d062      	beq.n	800282c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002766:	4b5f      	ldr	r3, [pc, #380]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0bb      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002776:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5a      	ldr	r2, [pc, #360]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800277c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002780:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002782:	f7fe fecd 	bl	8001520 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278a:	f7fe fec9 	bl	8001520 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0a8      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800279c:	4b51      	ldr	r3, [pc, #324]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a8:	4b4e      	ldr	r3, [pc, #312]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <HAL_RCC_OscConfig+0x830>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027b8:	3a01      	subs	r2, #1
 80027ba:	0112      	lsls	r2, r2, #4
 80027bc:	4311      	orrs	r1, r2
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027c2:	0212      	lsls	r2, r2, #8
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027ca:	0852      	lsrs	r2, r2, #1
 80027cc:	3a01      	subs	r2, #1
 80027ce:	0552      	lsls	r2, r2, #21
 80027d0:	4311      	orrs	r1, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027d6:	0852      	lsrs	r2, r2, #1
 80027d8:	3a01      	subs	r2, #1
 80027da:	0652      	lsls	r2, r2, #25
 80027dc:	4311      	orrs	r1, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027e2:	06d2      	lsls	r2, r2, #27
 80027e4:	430a      	orrs	r2, r1
 80027e6:	493f      	ldr	r1, [pc, #252]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027ec:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3c      	ldr	r2, [pc, #240]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027f8:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a39      	ldr	r2, [pc, #228]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80027fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002802:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002804:	f7fe fe8c 	bl	8001520 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280c:	f7fe fe88 	bl	8001520 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e067      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282a:	e05f      	b.n	80028ec <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e05e      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d157      	bne.n	80028ec <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002846:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002852:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002854:	f7fe fe64 	bl	8001520 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fe60 	bl	8001520 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e03f      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x7a4>
 800287a:	e037      	b.n	80028ec <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d02d      	beq.n	80028de <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800288c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800288e:	4b15      	ldr	r3, [pc, #84]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d105      	bne.n	80028a6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80028a0:	f023 0303 	bic.w	r3, r3, #3
 80028a4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80028ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fe33 	bl	8001520 <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028be:	f7fe fe2f 	bl	8001520 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e00e      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_RCC_OscConfig+0x82c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0x806>
 80028dc:	e006      	b.n	80028ec <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e005      	b.n	80028ee <HAL_RCC_OscConfig+0x836>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
 80028e8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop

080028f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0c8      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d910      	bls.n	800293c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b63      	ldr	r3, [pc, #396]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0207 	bic.w	r2, r3, #7
 8002922:	4961      	ldr	r1, [pc, #388]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b5f      	ldr	r3, [pc, #380]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b0      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d04c      	beq.n	80029e2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d107      	bne.n	8002960 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002950:	4b56      	ldr	r3, [pc, #344]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d121      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e09e      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b02      	cmp	r3, #2
 8002966:	d107      	bne.n	8002978 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002968:	4b50      	ldr	r3, [pc, #320]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d115      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e092      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002980:	4b4a      	ldr	r3, [pc, #296]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e086      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e07e      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a0:	4b42      	ldr	r3, [pc, #264]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 0203 	bic.w	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	493f      	ldr	r1, [pc, #252]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b2:	f7fe fdb5 	bl	8001520 <HAL_GetTick>
 80029b6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ba:	f7fe fdb1 	bl	8001520 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e066      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d0:	4b36      	ldr	r3, [pc, #216]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 020c 	and.w	r2, r3, #12
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	429a      	cmp	r2, r3
 80029e0:	d1eb      	bne.n	80029ba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	492c      	ldr	r1, [pc, #176]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b29      	ldr	r3, [pc, #164]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d210      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4924      	ldr	r1, [pc, #144]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e036      	b.n	8002a9e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4918      	ldr	r1, [pc, #96]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4910      	ldr	r1, [pc, #64]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a6e:	f000 f825 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	490c      	ldr	r1, [pc, #48]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	5ccb      	ldrb	r3, [r1, r3]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fcf4 	bl	8001480 <HAL_InitTick>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a9c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	080059e4 	.word	0x080059e4
 8002ab4:	200000c8 	.word	0x200000c8
 8002ab8:	200000cc 	.word	0x200000cc

08002abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aca:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d121      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d11e      	bne.n	8002b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002af0:	4b34      	ldr	r3, [pc, #208]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002afc:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e005      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b0c:	4b2d      	ldr	r3, [pc, #180]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b18:	4a2b      	ldr	r2, [pc, #172]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10d      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d102      	bne.n	8002b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e004      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b40:	4b23      	ldr	r3, [pc, #140]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d134      	bne.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d003      	beq.n	8002b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d003      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0xac>
 8002b60:	e005      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8002b64:	617b      	str	r3, [r7, #20]
      break;
 8002b66:	e005      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b68:	4b19      	ldr	r3, [pc, #100]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b6a:	617b      	str	r3, [r7, #20]
      break;
 8002b6c:	e002      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	617b      	str	r3, [r7, #20]
      break;
 8002b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	3301      	adds	r3, #1
 8002b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	0a1b      	lsrs	r3, r3, #8
 8002b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	fb02 f203 	mul.w	r2, r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	0e5b      	lsrs	r3, r3, #25
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3724      	adds	r7, #36	; 0x24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	080059fc 	.word	0x080059fc
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	007a1200 	.word	0x007a1200

08002bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	200000c8 	.word	0x200000c8

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bf0:	f7ff fff0 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4904      	ldr	r1, [pc, #16]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000
 8002c14:	080059f4 	.word	0x080059f4

08002c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c1c:	f7ff ffda 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	0adb      	lsrs	r3, r3, #11
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4904      	ldr	r1, [pc, #16]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	080059f4 	.word	0x080059f4

08002c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c50:	4b2a      	ldr	r3, [pc, #168]	; (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c5c:	f7ff f9c8 	bl	8001ff0 <HAL_PWREx_GetVoltageRange>
 8002c60:	6178      	str	r0, [r7, #20]
 8002c62:	e014      	b.n	8002c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c68:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c7c:	f7ff f9b8 	bl	8001ff0 <HAL_PWREx_GetVoltageRange>
 8002c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c82:	4b1e      	ldr	r3, [pc, #120]	; (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	4a1d      	ldr	r2, [pc, #116]	; (8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c94:	d10b      	bne.n	8002cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b80      	cmp	r3, #128	; 0x80
 8002c9a:	d919      	bls.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2ba0      	cmp	r3, #160	; 0xa0
 8002ca0:	d902      	bls.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	e013      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca8:	2301      	movs	r3, #1
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	e010      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b80      	cmp	r3, #128	; 0x80
 8002cb2:	d902      	bls.n	8002cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	e00a      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	d102      	bne.n	8002cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	e004      	b.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b70      	cmp	r3, #112	; 0x70
 8002cca:	d101      	bne.n	8002cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ccc:	2301      	movs	r3, #1
 8002cce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f023 0207 	bic.w	r2, r3, #7
 8002cd8:	4909      	ldr	r1, [pc, #36]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d001      	beq.n	8002cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40022000 	.word	0x40022000

08002d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d10:	2300      	movs	r3, #0
 8002d12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d031      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d28:	d01a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d2e:	d814      	bhi.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d38:	d10f      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d3a:	4bac      	ldr	r3, [pc, #688]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4aab      	ldr	r2, [pc, #684]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f9cc 	bl	80030ec <RCCEx_PLLSAI1_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d5e:	e000      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d68:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	499d      	ldr	r1, [pc, #628]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d7e:	e001      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8099 	beq.w	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d96:	4b95      	ldr	r3, [pc, #596]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b8f      	ldr	r3, [pc, #572]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	4a8e      	ldr	r2, [pc, #568]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	6593      	str	r3, [r2, #88]	; 0x58
 8002db8:	4b8c      	ldr	r3, [pc, #560]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dc8:	4b89      	ldr	r3, [pc, #548]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a88      	ldr	r2, [pc, #544]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fba4 	bl	8001520 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dda:	e009      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe fba0 	bl	8001520 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d902      	bls.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	74fb      	strb	r3, [r7, #19]
        break;
 8002dee:	e005      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002df0:	4b7f      	ldr	r3, [pc, #508]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d155      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e02:	4b7a      	ldr	r3, [pc, #488]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d01e      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d019      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e1e:	4b73      	ldr	r3, [pc, #460]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e2a:	4b70      	ldr	r3, [pc, #448]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	4a6e      	ldr	r2, [pc, #440]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e3a:	4b6c      	ldr	r3, [pc, #432]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e40:	4a6a      	ldr	r2, [pc, #424]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e4a:	4a68      	ldr	r2, [pc, #416]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d016      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fb60 	bl	8001520 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e62:	e00b      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fe fb5c 	bl	8001520 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d902      	bls.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	74fb      	strb	r3, [r7, #19]
            break;
 8002e7a:	e006      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7c:	4b5b      	ldr	r3, [pc, #364]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ec      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e90:	4b56      	ldr	r3, [pc, #344]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9e:	4953      	ldr	r1, [pc, #332]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
 8002eac:	e001      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eae:	7cfb      	ldrb	r3, [r7, #19]
 8002eb0:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb2:	7c7b      	ldrb	r3, [r7, #17]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b4c      	ldr	r3, [pc, #304]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ed0:	4b46      	ldr	r3, [pc, #280]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed6:	f023 0203 	bic.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4943      	ldr	r1, [pc, #268]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef2:	4b3e      	ldr	r3, [pc, #248]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef8:	f023 020c 	bic.w	r2, r3, #12
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	493a      	ldr	r1, [pc, #232]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00a      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f14:	4b35      	ldr	r3, [pc, #212]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	4932      	ldr	r1, [pc, #200]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f36:	4b2d      	ldr	r3, [pc, #180]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	4929      	ldr	r1, [pc, #164]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f58:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	4921      	ldr	r1, [pc, #132]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f7a:	4b1c      	ldr	r3, [pc, #112]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f88:	4918      	ldr	r1, [pc, #96]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4910      	ldr	r1, [pc, #64]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02c      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fdc:	d10a      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fde:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4a02      	ldr	r2, [pc, #8]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fe8:	60d3      	str	r3, [r2, #12]
 8002fea:	e015      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f871 	bl	80030ec <RCCEx_PLLSAI1_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d028      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003024:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	492d      	ldr	r1, [pc, #180]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003042:	d106      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a27      	ldr	r2, [pc, #156]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304e:	60d3      	str	r3, [r2, #12]
 8003050:	e011      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800305a:	d10c      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3304      	adds	r3, #4
 8003060:	2101      	movs	r1, #1
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f842 	bl	80030ec <RCCEx_PLLSAI1_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003072:	7cfb      	ldrb	r3, [r7, #19]
 8003074:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01c      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	4915      	ldr	r1, [pc, #84]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2102      	movs	r1, #2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f81f 	bl	80030ec <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80030b8:	7cfb      	ldrb	r3, [r7, #19]
 80030ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d6:	4904      	ldr	r1, [pc, #16]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030de:	7cbb      	ldrb	r3, [r7, #18]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000

080030ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030fa:	4b74      	ldr	r3, [pc, #464]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d018      	beq.n	8003138 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003106:	4b71      	ldr	r3, [pc, #452]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0203 	and.w	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d10d      	bne.n	8003132 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
       ||
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800311e:	4b6b      	ldr	r3, [pc, #428]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
       ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d047      	beq.n	80031c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
 8003136:	e044      	b.n	80031c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b03      	cmp	r3, #3
 800313e:	d018      	beq.n	8003172 <RCCEx_PLLSAI1_Config+0x86>
 8003140:	2b03      	cmp	r3, #3
 8003142:	d825      	bhi.n	8003190 <RCCEx_PLLSAI1_Config+0xa4>
 8003144:	2b01      	cmp	r3, #1
 8003146:	d002      	beq.n	800314e <RCCEx_PLLSAI1_Config+0x62>
 8003148:	2b02      	cmp	r3, #2
 800314a:	d009      	beq.n	8003160 <RCCEx_PLLSAI1_Config+0x74>
 800314c:	e020      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d11d      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315e:	e01a      	b.n	8003196 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003160:	4b5a      	ldr	r3, [pc, #360]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003168:	2b00      	cmp	r3, #0
 800316a:	d116      	bne.n	800319a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e013      	b.n	800319a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003172:	4b56      	ldr	r3, [pc, #344]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800317e:	4b53      	ldr	r3, [pc, #332]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800318e:	e006      	b.n	800319e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      break;
 8003194:	e004      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800319e:	bf00      	nop
    }

    if(status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031a6:	4b49      	ldr	r3, [pc, #292]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	430b      	orrs	r3, r1
 80031bc:	4943      	ldr	r1, [pc, #268]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d17c      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031c8:	4b40      	ldr	r3, [pc, #256]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3f      	ldr	r2, [pc, #252]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d4:	f7fe f9a4 	bl	8001520 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031da:	e009      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031dc:	f7fe f9a0 	bl	8001520 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d902      	bls.n	80031f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	73fb      	strb	r3, [r7, #15]
        break;
 80031ee:	e005      	b.n	80031fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031f0:	4b36      	ldr	r3, [pc, #216]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1ef      	bne.n	80031dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d15f      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d110      	bne.n	800322a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003208:	4b30      	ldr	r3, [pc, #192]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003210:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6892      	ldr	r2, [r2, #8]
 8003218:	0211      	lsls	r1, r2, #8
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	68d2      	ldr	r2, [r2, #12]
 800321e:	06d2      	lsls	r2, r2, #27
 8003220:	430a      	orrs	r2, r1
 8003222:	492a      	ldr	r1, [pc, #168]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	4313      	orrs	r3, r2
 8003226:	610b      	str	r3, [r1, #16]
 8003228:	e027      	b.n	800327a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d112      	bne.n	8003256 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003230:	4b26      	ldr	r3, [pc, #152]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	0211      	lsls	r1, r2, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6912      	ldr	r2, [r2, #16]
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	3a01      	subs	r2, #1
 800324a:	0552      	lsls	r2, r2, #21
 800324c:	430a      	orrs	r2, r1
 800324e:	491f      	ldr	r1, [pc, #124]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
 8003254:	e011      	b.n	800327a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800325e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6892      	ldr	r2, [r2, #8]
 8003266:	0211      	lsls	r1, r2, #8
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6952      	ldr	r2, [r2, #20]
 800326c:	0852      	lsrs	r2, r2, #1
 800326e:	3a01      	subs	r2, #1
 8003270:	0652      	lsls	r2, r2, #25
 8003272:	430a      	orrs	r2, r1
 8003274:	4915      	ldr	r1, [pc, #84]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003276:	4313      	orrs	r3, r2
 8003278:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800327a:	4b14      	ldr	r3, [pc, #80]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a13      	ldr	r2, [pc, #76]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003280:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003284:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003286:	f7fe f94b 	bl	8001520 <HAL_GetTick>
 800328a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800328c:	e009      	b.n	80032a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800328e:	f7fe f947 	bl	8001520 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d902      	bls.n	80032a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	73fb      	strb	r3, [r7, #15]
          break;
 80032a0:	e005      	b.n	80032ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ef      	beq.n	800328e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	4903      	ldr	r1, [pc, #12]	; (80032cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e049      	b.n	8003376 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fefe 	bl	80010f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 f8fc 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_TIM_ConfigClockSource+0x18>
 8003392:	2302      	movs	r3, #2
 8003394:	e0b5      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x184>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2202      	movs	r2, #2
 80033a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d2:	d03e      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xd4>
 80033d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033d8:	f200 8087 	bhi.w	80034ea <HAL_TIM_ConfigClockSource+0x16c>
 80033dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e0:	f000 8085 	beq.w	80034ee <HAL_TIM_ConfigClockSource+0x170>
 80033e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e8:	d87f      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x16c>
 80033ea:	2b70      	cmp	r3, #112	; 0x70
 80033ec:	d01a      	beq.n	8003424 <HAL_TIM_ConfigClockSource+0xa6>
 80033ee:	2b70      	cmp	r3, #112	; 0x70
 80033f0:	d87b      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x16c>
 80033f2:	2b60      	cmp	r3, #96	; 0x60
 80033f4:	d050      	beq.n	8003498 <HAL_TIM_ConfigClockSource+0x11a>
 80033f6:	2b60      	cmp	r3, #96	; 0x60
 80033f8:	d877      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x16c>
 80033fa:	2b50      	cmp	r3, #80	; 0x50
 80033fc:	d03c      	beq.n	8003478 <HAL_TIM_ConfigClockSource+0xfa>
 80033fe:	2b50      	cmp	r3, #80	; 0x50
 8003400:	d873      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x16c>
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d058      	beq.n	80034b8 <HAL_TIM_ConfigClockSource+0x13a>
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d86f      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x16c>
 800340a:	2b30      	cmp	r3, #48	; 0x30
 800340c:	d064      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x15a>
 800340e:	2b30      	cmp	r3, #48	; 0x30
 8003410:	d86b      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x16c>
 8003412:	2b20      	cmp	r3, #32
 8003414:	d060      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x15a>
 8003416:	2b20      	cmp	r3, #32
 8003418:	d867      	bhi.n	80034ea <HAL_TIM_ConfigClockSource+0x16c>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d05c      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x15a>
 800341e:	2b10      	cmp	r3, #16
 8003420:	d05a      	beq.n	80034d8 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003422:	e062      	b.n	80034ea <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6899      	ldr	r1, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f000 f948 	bl	80036c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003446:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]
      break;
 8003450:	e04e      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f000 f931 	bl	80036c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003474:	609a      	str	r2, [r3, #8]
      break;
 8003476:	e03b      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	461a      	mov	r2, r3
 8003486:	f000 f8a5 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2150      	movs	r1, #80	; 0x50
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f8fe 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003496:	e02b      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6818      	ldr	r0, [r3, #0]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f000 f8c4 	bl	8003632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2160      	movs	r1, #96	; 0x60
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f8ee 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 80034b6:	e01b      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f000 f885 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2140      	movs	r1, #64	; 0x40
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 f8de 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 80034d6:	e00b      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 f8d5 	bl	8003692 <TIM_ITRx_SetConfig>
        break;
 80034e8:	e002      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80034ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a2a      	ldr	r2, [pc, #168]	; (80035c8 <TIM_Base_SetConfig+0xbc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d003      	beq.n	800352c <TIM_Base_SetConfig+0x20>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d108      	bne.n	800353e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <TIM_Base_SetConfig+0xbc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_Base_SetConfig+0x52>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d007      	beq.n	800355e <TIM_Base_SetConfig+0x52>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <TIM_Base_SetConfig+0xc0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_Base_SetConfig+0x52>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <TIM_Base_SetConfig+0xc4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d108      	bne.n	8003570 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <TIM_Base_SetConfig+0xbc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d007      	beq.n	80035ac <TIM_Base_SetConfig+0xa0>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <TIM_Base_SetConfig+0xc0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_Base_SetConfig+0xa0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <TIM_Base_SetConfig+0xc4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d103      	bne.n	80035b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	615a      	str	r2, [r3, #20]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400

080035d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 030a 	bic.w	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0210 	bic.w	r2, r3, #16
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800365c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800366e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f043 0307 	orr.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003718:	2b01      	cmp	r3, #1
 800371a:	d101      	bne.n	8003720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800371c:	2302      	movs	r3, #2
 800371e:	e04f      	b.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a21      	ldr	r2, [pc, #132]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d108      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003750:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4313      	orrs	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a14      	ldr	r2, [pc, #80]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d004      	beq.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a10      	ldr	r2, [pc, #64]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10c      	bne.n	80037ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800379a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	40014000 	.word	0x40014000

080037d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e040      	b.n	8003868 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7fd fc9c 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2224      	movs	r2, #36	; 0x24
 8003800:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f992 	bl	8003b3c <UART_SetConfig>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e022      	b.n	8003868 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fb92 	bl	8003f54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fc19 	bl	8004098 <UART_CheckIdleState>
 8003866:	4603      	mov	r3, r0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08a      	sub	sp, #40	; 0x28
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	603b      	str	r3, [r7, #0]
 800387c:	4613      	mov	r3, r2
 800387e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003884:	2b20      	cmp	r3, #32
 8003886:	f040 8082 	bne.w	800398e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_UART_Transmit+0x26>
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07a      	b.n	8003990 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_UART_Transmit+0x38>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e073      	b.n	8003990 <HAL_UART_Transmit+0x120>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2221      	movs	r2, #33	; 0x21
 80038bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038be:	f7fd fe2f 	bl	8001520 <HAL_GetTick>
 80038c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038dc:	d108      	bne.n	80038f0 <HAL_UART_Transmit+0x80>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d104      	bne.n	80038f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	e003      	b.n	80038f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003900:	e02d      	b.n	800395e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	2180      	movs	r1, #128	; 0x80
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 fc0c 	bl	800412a <UART_WaitOnFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e039      	b.n	8003990 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	881a      	ldrh	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800392e:	b292      	uxth	r2, r2
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	3302      	adds	r3, #2
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e008      	b.n	800394c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	b292      	uxth	r2, r2
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1cb      	bne.n	8003902 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2200      	movs	r2, #0
 8003972:	2140      	movs	r1, #64	; 0x40
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fbd8 	bl	800412a <UART_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e005      	b.n	8003990 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	f040 80bf 	bne.w	8003b30 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_Receive+0x26>
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0b7      	b.n	8003b32 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d101      	bne.n	80039d0 <HAL_UART_Receive+0x38>
 80039cc:	2302      	movs	r3, #2
 80039ce:	e0b0      	b.n	8003b32 <HAL_UART_Receive+0x19a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2222      	movs	r2, #34	; 0x22
 80039e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ec:	f7fd fd98 	bl	8001520 <HAL_GetTick>
 80039f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0a:	d10e      	bne.n	8003a2a <HAL_UART_Receive+0x92>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_UART_Receive+0x88>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003a1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a1e:	e02d      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	22ff      	movs	r2, #255	; 0xff
 8003a24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a28:	e028      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_UART_Receive+0xb6>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Receive+0xac>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	22ff      	movs	r2, #255	; 0xff
 8003a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a42:	e01b      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	227f      	movs	r2, #127	; 0x7f
 8003a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a4c:	e016      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a56:	d10d      	bne.n	8003a74 <HAL_UART_Receive+0xdc>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_UART_Receive+0xd2>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	227f      	movs	r2, #127	; 0x7f
 8003a64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a68:	e008      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	223f      	movs	r2, #63	; 0x3f
 8003a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003a72:	e003      	b.n	8003a7c <HAL_UART_Receive+0xe4>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d108      	bne.n	8003aa0 <HAL_UART_Receive+0x108>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ab0:	e033      	b.n	8003b1a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2120      	movs	r1, #32
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fb34 	bl	800412a <UART_WaitOnFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e032      	b.n	8003b32 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	8a7b      	ldrh	r3, [r7, #18]
 8003adc:	4013      	ands	r3, r2
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e00d      	b.n	8003b08 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	8a7b      	ldrh	r3, [r7, #18]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	4013      	ands	r3, r2
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	3301      	adds	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1c5      	bne.n	8003ab2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4baf      	ldr	r3, [pc, #700]	; (8003e24 <UART_SetConfig+0x2e8>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	69f9      	ldr	r1, [r7, #28]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4aa4      	ldr	r2, [pc, #656]	; (8003e28 <UART_SetConfig+0x2ec>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a9b      	ldr	r2, [pc, #620]	; (8003e2c <UART_SetConfig+0x2f0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d121      	bne.n	8003c06 <UART_SetConfig+0xca>
 8003bc2:	4b9b      	ldr	r3, [pc, #620]	; (8003e30 <UART_SetConfig+0x2f4>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d817      	bhi.n	8003c00 <UART_SetConfig+0xc4>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x9c>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003bf5 	.word	0x08003bf5
 8003be0:	08003bef 	.word	0x08003bef
 8003be4:	08003bfb 	.word	0x08003bfb
 8003be8:	2301      	movs	r3, #1
 8003bea:	76fb      	strb	r3, [r7, #27]
 8003bec:	e070      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	76fb      	strb	r3, [r7, #27]
 8003bf2:	e06d      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	76fb      	strb	r3, [r7, #27]
 8003bf8:	e06a      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	76fb      	strb	r3, [r7, #27]
 8003bfe:	e067      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003c00:	2310      	movs	r3, #16
 8003c02:	76fb      	strb	r3, [r7, #27]
 8003c04:	e064      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a8a      	ldr	r2, [pc, #552]	; (8003e34 <UART_SetConfig+0x2f8>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d132      	bne.n	8003c76 <UART_SetConfig+0x13a>
 8003c10:	4b87      	ldr	r3, [pc, #540]	; (8003e30 <UART_SetConfig+0x2f4>)
 8003c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d828      	bhi.n	8003c70 <UART_SetConfig+0x134>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <UART_SetConfig+0xe8>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c59 	.word	0x08003c59
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c71 	.word	0x08003c71
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c65 	.word	0x08003c65
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003c71 	.word	0x08003c71
 8003c44:	08003c5f 	.word	0x08003c5f
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c71 	.word	0x08003c71
 8003c54:	08003c6b 	.word	0x08003c6b
 8003c58:	2300      	movs	r3, #0
 8003c5a:	76fb      	strb	r3, [r7, #27]
 8003c5c:	e038      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	76fb      	strb	r3, [r7, #27]
 8003c62:	e035      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003c64:	2304      	movs	r3, #4
 8003c66:	76fb      	strb	r3, [r7, #27]
 8003c68:	e032      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	76fb      	strb	r3, [r7, #27]
 8003c6e:	e02f      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003c70:	2310      	movs	r3, #16
 8003c72:	76fb      	strb	r3, [r7, #27]
 8003c74:	e02c      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6b      	ldr	r2, [pc, #428]	; (8003e28 <UART_SetConfig+0x2ec>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d125      	bne.n	8003ccc <UART_SetConfig+0x190>
 8003c80:	4b6b      	ldr	r3, [pc, #428]	; (8003e30 <UART_SetConfig+0x2f4>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c8e:	d017      	beq.n	8003cc0 <UART_SetConfig+0x184>
 8003c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c94:	d817      	bhi.n	8003cc6 <UART_SetConfig+0x18a>
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d00b      	beq.n	8003cb4 <UART_SetConfig+0x178>
 8003c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca0:	d811      	bhi.n	8003cc6 <UART_SetConfig+0x18a>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <UART_SetConfig+0x172>
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d006      	beq.n	8003cba <UART_SetConfig+0x17e>
 8003cac:	e00b      	b.n	8003cc6 <UART_SetConfig+0x18a>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	76fb      	strb	r3, [r7, #27]
 8003cb2:	e00d      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	76fb      	strb	r3, [r7, #27]
 8003cb8:	e00a      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003cba:	2304      	movs	r3, #4
 8003cbc:	76fb      	strb	r3, [r7, #27]
 8003cbe:	e007      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	76fb      	strb	r3, [r7, #27]
 8003cc4:	e004      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	76fb      	strb	r3, [r7, #27]
 8003cca:	e001      	b.n	8003cd0 <UART_SetConfig+0x194>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a54      	ldr	r2, [pc, #336]	; (8003e28 <UART_SetConfig+0x2ec>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d173      	bne.n	8003dc2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cda:	7efb      	ldrb	r3, [r7, #27]
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d824      	bhi.n	8003d2a <UART_SetConfig+0x1ee>
 8003ce0:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <UART_SetConfig+0x1ac>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d2b 	.word	0x08003d2b
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d2b 	.word	0x08003d2b
 8003cf8:	08003d1b 	.word	0x08003d1b
 8003cfc:	08003d2b 	.word	0x08003d2b
 8003d00:	08003d2b 	.word	0x08003d2b
 8003d04:	08003d2b 	.word	0x08003d2b
 8003d08:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f7fe ff6e 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003d10:	6178      	str	r0, [r7, #20]
        break;
 8003d12:	e00f      	b.n	8003d34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <UART_SetConfig+0x2fc>)
 8003d16:	617b      	str	r3, [r7, #20]
        break;
 8003d18:	e00c      	b.n	8003d34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fecf 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8003d1e:	6178      	str	r0, [r7, #20]
        break;
 8003d20:	e008      	b.n	8003d34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d26:	617b      	str	r3, [r7, #20]
        break;
 8003d28:	e004      	b.n	8003d34 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	76bb      	strb	r3, [r7, #26]
        break;
 8003d32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80fe 	beq.w	8003f38 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	4613      	mov	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d305      	bcc.n	8003d58 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d902      	bls.n	8003d5e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	76bb      	strb	r3, [r7, #26]
 8003d5c:	e0ec      	b.n	8003f38 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f04f 0100 	mov.w	r1, #0
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	020b      	lsls	r3, r1, #8
 8003d70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d74:	0202      	lsls	r2, r0, #8
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	6849      	ldr	r1, [r1, #4]
 8003d7a:	0849      	lsrs	r1, r1, #1
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	1814      	adds	r4, r2, r0
 8003d84:	eb43 0501 	adc.w	r5, r3, r1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	4620      	mov	r0, r4
 8003d94:	4629      	mov	r1, r5
 8003d96:	f7fc fa73 	bl	8000280 <__aeabi_uldivmod>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4613      	mov	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003da8:	d308      	bcc.n	8003dbc <UART_SetConfig+0x280>
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003db0:	d204      	bcs.n	8003dbc <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	e0bd      	b.n	8003f38 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	76bb      	strb	r3, [r7, #26]
 8003dc0:	e0ba      	b.n	8003f38 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dca:	d168      	bne.n	8003e9e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003dcc:	7efb      	ldrb	r3, [r7, #27]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d834      	bhi.n	8003e3c <UART_SetConfig+0x300>
 8003dd2:	a201      	add	r2, pc, #4	; (adr r2, 8003dd8 <UART_SetConfig+0x29c>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003dfd 	.word	0x08003dfd
 8003ddc:	08003e05 	.word	0x08003e05
 8003de0:	08003e0d 	.word	0x08003e0d
 8003de4:	08003e3d 	.word	0x08003e3d
 8003de8:	08003e13 	.word	0x08003e13
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	08003e3d 	.word	0x08003e3d
 8003df4:	08003e3d 	.word	0x08003e3d
 8003df8:	08003e1b 	.word	0x08003e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dfc:	f7fe fef6 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003e00:	6178      	str	r0, [r7, #20]
        break;
 8003e02:	e020      	b.n	8003e46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e04:	f7fe ff08 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8003e08:	6178      	str	r0, [r7, #20]
        break;
 8003e0a:	e01c      	b.n	8003e46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <UART_SetConfig+0x2fc>)
 8003e0e:	617b      	str	r3, [r7, #20]
        break;
 8003e10:	e019      	b.n	8003e46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e12:	f7fe fe53 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8003e16:	6178      	str	r0, [r7, #20]
        break;
 8003e18:	e015      	b.n	8003e46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e1e:	617b      	str	r3, [r7, #20]
        break;
 8003e20:	e011      	b.n	8003e46 <UART_SetConfig+0x30a>
 8003e22:	bf00      	nop
 8003e24:	efff69f3 	.word	0xefff69f3
 8003e28:	40008000 	.word	0x40008000
 8003e2c:	40013800 	.word	0x40013800
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40004400 	.word	0x40004400
 8003e38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	76bb      	strb	r3, [r7, #26]
        break;
 8003e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d075      	beq.n	8003f38 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005a      	lsls	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	441a      	add	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b0f      	cmp	r3, #15
 8003e68:	d916      	bls.n	8003e98 <UART_SetConfig+0x35c>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e70:	d212      	bcs.n	8003e98 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	f023 030f 	bic.w	r3, r3, #15
 8003e7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	89fa      	ldrh	r2, [r7, #14]
 8003e94:	60da      	str	r2, [r3, #12]
 8003e96:	e04f      	b.n	8003f38 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	76bb      	strb	r3, [r7, #26]
 8003e9c:	e04c      	b.n	8003f38 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e9e:	7efb      	ldrb	r3, [r7, #27]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d828      	bhi.n	8003ef6 <UART_SetConfig+0x3ba>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <UART_SetConfig+0x370>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed9 	.word	0x08003ed9
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ef7 	.word	0x08003ef7
 8003ebc:	08003ee7 	.word	0x08003ee7
 8003ec0:	08003ef7 	.word	0x08003ef7
 8003ec4:	08003ef7 	.word	0x08003ef7
 8003ec8:	08003ef7 	.word	0x08003ef7
 8003ecc:	08003eef 	.word	0x08003eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ed0:	f7fe fe8c 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003ed4:	6178      	str	r0, [r7, #20]
        break;
 8003ed6:	e013      	b.n	8003f00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed8:	f7fe fe9e 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8003edc:	6178      	str	r0, [r7, #20]
        break;
 8003ede:	e00f      	b.n	8003f00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <UART_SetConfig+0x414>)
 8003ee2:	617b      	str	r3, [r7, #20]
        break;
 8003ee4:	e00c      	b.n	8003f00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee6:	f7fe fde9 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8003eea:	6178      	str	r0, [r7, #20]
        break;
 8003eec:	e008      	b.n	8003f00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ef2:	617b      	str	r3, [r7, #20]
        break;
 8003ef4:	e004      	b.n	8003f00 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	76bb      	strb	r3, [r7, #26]
        break;
 8003efe:	bf00      	nop
    }

    if (pclk != 0U)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d018      	beq.n	8003f38 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	085a      	lsrs	r2, r3, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	441a      	add	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d908      	bls.n	8003f34 <UART_SetConfig+0x3f8>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d204      	bcs.n	8003f34 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	e001      	b.n	8003f38 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f44:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3720      	adds	r7, #32
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	00f42400 	.word	0x00f42400

08003f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01a      	beq.n	800406a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004052:	d10a      	bne.n	800406a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af02      	add	r7, sp, #8
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a8:	f7fd fa3a 	bl	8001520 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d10e      	bne.n	80040da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f82d 	bl	800412a <UART_WaitOnFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e023      	b.n	8004122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d10e      	bne.n	8004106 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f817 	bl	800412a <UART_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e00d      	b.n	8004122 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2220      	movs	r2, #32
 8004110:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	60f8      	str	r0, [r7, #12]
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	603b      	str	r3, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800413a:	e05e      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004142:	d05a      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004144:	f7fd f9ec 	bl	8001520 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	429a      	cmp	r2, r3
 8004152:	d302      	bcc.n	800415a <UART_WaitOnFlagUntilTimeout+0x30>
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d11b      	bne.n	8004192 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004168:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e043      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d02c      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ae:	d124      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041b8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041c8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e00f      	b.n	800421a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	429a      	cmp	r2, r3
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	429a      	cmp	r2, r3
 8004216:	d091      	beq.n	800413c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <__errno>:
 8004224:	4b01      	ldr	r3, [pc, #4]	; (800422c <__errno+0x8>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	200000d4 	.word	0x200000d4

08004230 <getchar>:
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <getchar+0x20>)
 8004232:	b510      	push	{r4, lr}
 8004234:	681c      	ldr	r4, [r3, #0]
 8004236:	b124      	cbz	r4, 8004242 <getchar+0x12>
 8004238:	69a3      	ldr	r3, [r4, #24]
 800423a:	b913      	cbnz	r3, 8004242 <getchar+0x12>
 800423c:	4620      	mov	r0, r4
 800423e:	f000 facf 	bl	80047e0 <__sinit>
 8004242:	6861      	ldr	r1, [r4, #4]
 8004244:	4620      	mov	r0, r4
 8004246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800424a:	f000 bb83 	b.w	8004954 <_getc_r>
 800424e:	bf00      	nop
 8004250:	200000d4 	.word	0x200000d4

08004254 <__libc_init_array>:
 8004254:	b570      	push	{r4, r5, r6, lr}
 8004256:	4d0d      	ldr	r5, [pc, #52]	; (800428c <__libc_init_array+0x38>)
 8004258:	4c0d      	ldr	r4, [pc, #52]	; (8004290 <__libc_init_array+0x3c>)
 800425a:	1b64      	subs	r4, r4, r5
 800425c:	10a4      	asrs	r4, r4, #2
 800425e:	2600      	movs	r6, #0
 8004260:	42a6      	cmp	r6, r4
 8004262:	d109      	bne.n	8004278 <__libc_init_array+0x24>
 8004264:	4d0b      	ldr	r5, [pc, #44]	; (8004294 <__libc_init_array+0x40>)
 8004266:	4c0c      	ldr	r4, [pc, #48]	; (8004298 <__libc_init_array+0x44>)
 8004268:	f001 faee 	bl	8005848 <_init>
 800426c:	1b64      	subs	r4, r4, r5
 800426e:	10a4      	asrs	r4, r4, #2
 8004270:	2600      	movs	r6, #0
 8004272:	42a6      	cmp	r6, r4
 8004274:	d105      	bne.n	8004282 <__libc_init_array+0x2e>
 8004276:	bd70      	pop	{r4, r5, r6, pc}
 8004278:	f855 3b04 	ldr.w	r3, [r5], #4
 800427c:	4798      	blx	r3
 800427e:	3601      	adds	r6, #1
 8004280:	e7ee      	b.n	8004260 <__libc_init_array+0xc>
 8004282:	f855 3b04 	ldr.w	r3, [r5], #4
 8004286:	4798      	blx	r3
 8004288:	3601      	adds	r6, #1
 800428a:	e7f2      	b.n	8004272 <__libc_init_array+0x1e>
 800428c:	08005acc 	.word	0x08005acc
 8004290:	08005acc 	.word	0x08005acc
 8004294:	08005acc 	.word	0x08005acc
 8004298:	08005ad0 	.word	0x08005ad0

0800429c <memset>:
 800429c:	4402      	add	r2, r0
 800429e:	4603      	mov	r3, r0
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d100      	bne.n	80042a6 <memset+0xa>
 80042a4:	4770      	bx	lr
 80042a6:	f803 1b01 	strb.w	r1, [r3], #1
 80042aa:	e7f9      	b.n	80042a0 <memset+0x4>

080042ac <iprintf>:
 80042ac:	b40f      	push	{r0, r1, r2, r3}
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <iprintf+0x2c>)
 80042b0:	b513      	push	{r0, r1, r4, lr}
 80042b2:	681c      	ldr	r4, [r3, #0]
 80042b4:	b124      	cbz	r4, 80042c0 <iprintf+0x14>
 80042b6:	69a3      	ldr	r3, [r4, #24]
 80042b8:	b913      	cbnz	r3, 80042c0 <iprintf+0x14>
 80042ba:	4620      	mov	r0, r4
 80042bc:	f000 fa90 	bl	80047e0 <__sinit>
 80042c0:	ab05      	add	r3, sp, #20
 80042c2:	9a04      	ldr	r2, [sp, #16]
 80042c4:	68a1      	ldr	r1, [r4, #8]
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fe1b 	bl	8004f04 <_vfiprintf_r>
 80042ce:	b002      	add	sp, #8
 80042d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d4:	b004      	add	sp, #16
 80042d6:	4770      	bx	lr
 80042d8:	200000d4 	.word	0x200000d4

080042dc <_puts_r>:
 80042dc:	b570      	push	{r4, r5, r6, lr}
 80042de:	460e      	mov	r6, r1
 80042e0:	4605      	mov	r5, r0
 80042e2:	b118      	cbz	r0, 80042ec <_puts_r+0x10>
 80042e4:	6983      	ldr	r3, [r0, #24]
 80042e6:	b90b      	cbnz	r3, 80042ec <_puts_r+0x10>
 80042e8:	f000 fa7a 	bl	80047e0 <__sinit>
 80042ec:	69ab      	ldr	r3, [r5, #24]
 80042ee:	68ac      	ldr	r4, [r5, #8]
 80042f0:	b913      	cbnz	r3, 80042f8 <_puts_r+0x1c>
 80042f2:	4628      	mov	r0, r5
 80042f4:	f000 fa74 	bl	80047e0 <__sinit>
 80042f8:	4b2c      	ldr	r3, [pc, #176]	; (80043ac <_puts_r+0xd0>)
 80042fa:	429c      	cmp	r4, r3
 80042fc:	d120      	bne.n	8004340 <_puts_r+0x64>
 80042fe:	686c      	ldr	r4, [r5, #4]
 8004300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004302:	07db      	lsls	r3, r3, #31
 8004304:	d405      	bmi.n	8004312 <_puts_r+0x36>
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	0598      	lsls	r0, r3, #22
 800430a:	d402      	bmi.n	8004312 <_puts_r+0x36>
 800430c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800430e:	f000 fb62 	bl	80049d6 <__retarget_lock_acquire_recursive>
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	0719      	lsls	r1, r3, #28
 8004316:	d51d      	bpl.n	8004354 <_puts_r+0x78>
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	b1db      	cbz	r3, 8004354 <_puts_r+0x78>
 800431c:	3e01      	subs	r6, #1
 800431e:	68a3      	ldr	r3, [r4, #8]
 8004320:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004324:	3b01      	subs	r3, #1
 8004326:	60a3      	str	r3, [r4, #8]
 8004328:	bb39      	cbnz	r1, 800437a <_puts_r+0x9e>
 800432a:	2b00      	cmp	r3, #0
 800432c:	da38      	bge.n	80043a0 <_puts_r+0xc4>
 800432e:	4622      	mov	r2, r4
 8004330:	210a      	movs	r1, #10
 8004332:	4628      	mov	r0, r5
 8004334:	f000 f868 	bl	8004408 <__swbuf_r>
 8004338:	3001      	adds	r0, #1
 800433a:	d011      	beq.n	8004360 <_puts_r+0x84>
 800433c:	250a      	movs	r5, #10
 800433e:	e011      	b.n	8004364 <_puts_r+0x88>
 8004340:	4b1b      	ldr	r3, [pc, #108]	; (80043b0 <_puts_r+0xd4>)
 8004342:	429c      	cmp	r4, r3
 8004344:	d101      	bne.n	800434a <_puts_r+0x6e>
 8004346:	68ac      	ldr	r4, [r5, #8]
 8004348:	e7da      	b.n	8004300 <_puts_r+0x24>
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <_puts_r+0xd8>)
 800434c:	429c      	cmp	r4, r3
 800434e:	bf08      	it	eq
 8004350:	68ec      	ldreq	r4, [r5, #12]
 8004352:	e7d5      	b.n	8004300 <_puts_r+0x24>
 8004354:	4621      	mov	r1, r4
 8004356:	4628      	mov	r0, r5
 8004358:	f000 f8a8 	bl	80044ac <__swsetup_r>
 800435c:	2800      	cmp	r0, #0
 800435e:	d0dd      	beq.n	800431c <_puts_r+0x40>
 8004360:	f04f 35ff 	mov.w	r5, #4294967295
 8004364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004366:	07da      	lsls	r2, r3, #31
 8004368:	d405      	bmi.n	8004376 <_puts_r+0x9a>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	059b      	lsls	r3, r3, #22
 800436e:	d402      	bmi.n	8004376 <_puts_r+0x9a>
 8004370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004372:	f000 fb31 	bl	80049d8 <__retarget_lock_release_recursive>
 8004376:	4628      	mov	r0, r5
 8004378:	bd70      	pop	{r4, r5, r6, pc}
 800437a:	2b00      	cmp	r3, #0
 800437c:	da04      	bge.n	8004388 <_puts_r+0xac>
 800437e:	69a2      	ldr	r2, [r4, #24]
 8004380:	429a      	cmp	r2, r3
 8004382:	dc06      	bgt.n	8004392 <_puts_r+0xb6>
 8004384:	290a      	cmp	r1, #10
 8004386:	d004      	beq.n	8004392 <_puts_r+0xb6>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	6022      	str	r2, [r4, #0]
 800438e:	7019      	strb	r1, [r3, #0]
 8004390:	e7c5      	b.n	800431e <_puts_r+0x42>
 8004392:	4622      	mov	r2, r4
 8004394:	4628      	mov	r0, r5
 8004396:	f000 f837 	bl	8004408 <__swbuf_r>
 800439a:	3001      	adds	r0, #1
 800439c:	d1bf      	bne.n	800431e <_puts_r+0x42>
 800439e:	e7df      	b.n	8004360 <_puts_r+0x84>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	250a      	movs	r5, #10
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	6022      	str	r2, [r4, #0]
 80043a8:	701d      	strb	r5, [r3, #0]
 80043aa:	e7db      	b.n	8004364 <_puts_r+0x88>
 80043ac:	08005a50 	.word	0x08005a50
 80043b0:	08005a70 	.word	0x08005a70
 80043b4:	08005a30 	.word	0x08005a30

080043b8 <puts>:
 80043b8:	4b02      	ldr	r3, [pc, #8]	; (80043c4 <puts+0xc>)
 80043ba:	4601      	mov	r1, r0
 80043bc:	6818      	ldr	r0, [r3, #0]
 80043be:	f7ff bf8d 	b.w	80042dc <_puts_r>
 80043c2:	bf00      	nop
 80043c4:	200000d4 	.word	0x200000d4

080043c8 <siprintf>:
 80043c8:	b40e      	push	{r1, r2, r3}
 80043ca:	b500      	push	{lr}
 80043cc:	b09c      	sub	sp, #112	; 0x70
 80043ce:	ab1d      	add	r3, sp, #116	; 0x74
 80043d0:	9002      	str	r0, [sp, #8]
 80043d2:	9006      	str	r0, [sp, #24]
 80043d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043d8:	4809      	ldr	r0, [pc, #36]	; (8004400 <siprintf+0x38>)
 80043da:	9107      	str	r1, [sp, #28]
 80043dc:	9104      	str	r1, [sp, #16]
 80043de:	4909      	ldr	r1, [pc, #36]	; (8004404 <siprintf+0x3c>)
 80043e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043e4:	9105      	str	r1, [sp, #20]
 80043e6:	6800      	ldr	r0, [r0, #0]
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	a902      	add	r1, sp, #8
 80043ec:	f000 fc60 	bl	8004cb0 <_svfiprintf_r>
 80043f0:	9b02      	ldr	r3, [sp, #8]
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
 80043f6:	b01c      	add	sp, #112	; 0x70
 80043f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80043fc:	b003      	add	sp, #12
 80043fe:	4770      	bx	lr
 8004400:	200000d4 	.word	0x200000d4
 8004404:	ffff0208 	.word	0xffff0208

08004408 <__swbuf_r>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	460e      	mov	r6, r1
 800440c:	4614      	mov	r4, r2
 800440e:	4605      	mov	r5, r0
 8004410:	b118      	cbz	r0, 800441a <__swbuf_r+0x12>
 8004412:	6983      	ldr	r3, [r0, #24]
 8004414:	b90b      	cbnz	r3, 800441a <__swbuf_r+0x12>
 8004416:	f000 f9e3 	bl	80047e0 <__sinit>
 800441a:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <__swbuf_r+0x98>)
 800441c:	429c      	cmp	r4, r3
 800441e:	d12b      	bne.n	8004478 <__swbuf_r+0x70>
 8004420:	686c      	ldr	r4, [r5, #4]
 8004422:	69a3      	ldr	r3, [r4, #24]
 8004424:	60a3      	str	r3, [r4, #8]
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	071a      	lsls	r2, r3, #28
 800442a:	d52f      	bpl.n	800448c <__swbuf_r+0x84>
 800442c:	6923      	ldr	r3, [r4, #16]
 800442e:	b36b      	cbz	r3, 800448c <__swbuf_r+0x84>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	6820      	ldr	r0, [r4, #0]
 8004434:	1ac0      	subs	r0, r0, r3
 8004436:	6963      	ldr	r3, [r4, #20]
 8004438:	b2f6      	uxtb	r6, r6
 800443a:	4283      	cmp	r3, r0
 800443c:	4637      	mov	r7, r6
 800443e:	dc04      	bgt.n	800444a <__swbuf_r+0x42>
 8004440:	4621      	mov	r1, r4
 8004442:	4628      	mov	r0, r5
 8004444:	f000 f926 	bl	8004694 <_fflush_r>
 8004448:	bb30      	cbnz	r0, 8004498 <__swbuf_r+0x90>
 800444a:	68a3      	ldr	r3, [r4, #8]
 800444c:	3b01      	subs	r3, #1
 800444e:	60a3      	str	r3, [r4, #8]
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	6022      	str	r2, [r4, #0]
 8004456:	701e      	strb	r6, [r3, #0]
 8004458:	6963      	ldr	r3, [r4, #20]
 800445a:	3001      	adds	r0, #1
 800445c:	4283      	cmp	r3, r0
 800445e:	d004      	beq.n	800446a <__swbuf_r+0x62>
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	07db      	lsls	r3, r3, #31
 8004464:	d506      	bpl.n	8004474 <__swbuf_r+0x6c>
 8004466:	2e0a      	cmp	r6, #10
 8004468:	d104      	bne.n	8004474 <__swbuf_r+0x6c>
 800446a:	4621      	mov	r1, r4
 800446c:	4628      	mov	r0, r5
 800446e:	f000 f911 	bl	8004694 <_fflush_r>
 8004472:	b988      	cbnz	r0, 8004498 <__swbuf_r+0x90>
 8004474:	4638      	mov	r0, r7
 8004476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004478:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <__swbuf_r+0x9c>)
 800447a:	429c      	cmp	r4, r3
 800447c:	d101      	bne.n	8004482 <__swbuf_r+0x7a>
 800447e:	68ac      	ldr	r4, [r5, #8]
 8004480:	e7cf      	b.n	8004422 <__swbuf_r+0x1a>
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <__swbuf_r+0xa0>)
 8004484:	429c      	cmp	r4, r3
 8004486:	bf08      	it	eq
 8004488:	68ec      	ldreq	r4, [r5, #12]
 800448a:	e7ca      	b.n	8004422 <__swbuf_r+0x1a>
 800448c:	4621      	mov	r1, r4
 800448e:	4628      	mov	r0, r5
 8004490:	f000 f80c 	bl	80044ac <__swsetup_r>
 8004494:	2800      	cmp	r0, #0
 8004496:	d0cb      	beq.n	8004430 <__swbuf_r+0x28>
 8004498:	f04f 37ff 	mov.w	r7, #4294967295
 800449c:	e7ea      	b.n	8004474 <__swbuf_r+0x6c>
 800449e:	bf00      	nop
 80044a0:	08005a50 	.word	0x08005a50
 80044a4:	08005a70 	.word	0x08005a70
 80044a8:	08005a30 	.word	0x08005a30

080044ac <__swsetup_r>:
 80044ac:	4b32      	ldr	r3, [pc, #200]	; (8004578 <__swsetup_r+0xcc>)
 80044ae:	b570      	push	{r4, r5, r6, lr}
 80044b0:	681d      	ldr	r5, [r3, #0]
 80044b2:	4606      	mov	r6, r0
 80044b4:	460c      	mov	r4, r1
 80044b6:	b125      	cbz	r5, 80044c2 <__swsetup_r+0x16>
 80044b8:	69ab      	ldr	r3, [r5, #24]
 80044ba:	b913      	cbnz	r3, 80044c2 <__swsetup_r+0x16>
 80044bc:	4628      	mov	r0, r5
 80044be:	f000 f98f 	bl	80047e0 <__sinit>
 80044c2:	4b2e      	ldr	r3, [pc, #184]	; (800457c <__swsetup_r+0xd0>)
 80044c4:	429c      	cmp	r4, r3
 80044c6:	d10f      	bne.n	80044e8 <__swsetup_r+0x3c>
 80044c8:	686c      	ldr	r4, [r5, #4]
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044d0:	0719      	lsls	r1, r3, #28
 80044d2:	d42c      	bmi.n	800452e <__swsetup_r+0x82>
 80044d4:	06dd      	lsls	r5, r3, #27
 80044d6:	d411      	bmi.n	80044fc <__swsetup_r+0x50>
 80044d8:	2309      	movs	r3, #9
 80044da:	6033      	str	r3, [r6, #0]
 80044dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	e03e      	b.n	8004566 <__swsetup_r+0xba>
 80044e8:	4b25      	ldr	r3, [pc, #148]	; (8004580 <__swsetup_r+0xd4>)
 80044ea:	429c      	cmp	r4, r3
 80044ec:	d101      	bne.n	80044f2 <__swsetup_r+0x46>
 80044ee:	68ac      	ldr	r4, [r5, #8]
 80044f0:	e7eb      	b.n	80044ca <__swsetup_r+0x1e>
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <__swsetup_r+0xd8>)
 80044f4:	429c      	cmp	r4, r3
 80044f6:	bf08      	it	eq
 80044f8:	68ec      	ldreq	r4, [r5, #12]
 80044fa:	e7e6      	b.n	80044ca <__swsetup_r+0x1e>
 80044fc:	0758      	lsls	r0, r3, #29
 80044fe:	d512      	bpl.n	8004526 <__swsetup_r+0x7a>
 8004500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004502:	b141      	cbz	r1, 8004516 <__swsetup_r+0x6a>
 8004504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004508:	4299      	cmp	r1, r3
 800450a:	d002      	beq.n	8004512 <__swsetup_r+0x66>
 800450c:	4630      	mov	r0, r6
 800450e:	f000 fac9 	bl	8004aa4 <_free_r>
 8004512:	2300      	movs	r3, #0
 8004514:	6363      	str	r3, [r4, #52]	; 0x34
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800451c:	81a3      	strh	r3, [r4, #12]
 800451e:	2300      	movs	r3, #0
 8004520:	6063      	str	r3, [r4, #4]
 8004522:	6923      	ldr	r3, [r4, #16]
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	f043 0308 	orr.w	r3, r3, #8
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	b94b      	cbnz	r3, 8004546 <__swsetup_r+0x9a>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800453c:	d003      	beq.n	8004546 <__swsetup_r+0x9a>
 800453e:	4621      	mov	r1, r4
 8004540:	4630      	mov	r0, r6
 8004542:	f000 fa6f 	bl	8004a24 <__smakebuf_r>
 8004546:	89a0      	ldrh	r0, [r4, #12]
 8004548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800454c:	f010 0301 	ands.w	r3, r0, #1
 8004550:	d00a      	beq.n	8004568 <__swsetup_r+0xbc>
 8004552:	2300      	movs	r3, #0
 8004554:	60a3      	str	r3, [r4, #8]
 8004556:	6963      	ldr	r3, [r4, #20]
 8004558:	425b      	negs	r3, r3
 800455a:	61a3      	str	r3, [r4, #24]
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	b943      	cbnz	r3, 8004572 <__swsetup_r+0xc6>
 8004560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004564:	d1ba      	bne.n	80044dc <__swsetup_r+0x30>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	0781      	lsls	r1, r0, #30
 800456a:	bf58      	it	pl
 800456c:	6963      	ldrpl	r3, [r4, #20]
 800456e:	60a3      	str	r3, [r4, #8]
 8004570:	e7f4      	b.n	800455c <__swsetup_r+0xb0>
 8004572:	2000      	movs	r0, #0
 8004574:	e7f7      	b.n	8004566 <__swsetup_r+0xba>
 8004576:	bf00      	nop
 8004578:	200000d4 	.word	0x200000d4
 800457c:	08005a50 	.word	0x08005a50
 8004580:	08005a70 	.word	0x08005a70
 8004584:	08005a30 	.word	0x08005a30

08004588 <__sflush_r>:
 8004588:	898a      	ldrh	r2, [r1, #12]
 800458a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800458e:	4605      	mov	r5, r0
 8004590:	0710      	lsls	r0, r2, #28
 8004592:	460c      	mov	r4, r1
 8004594:	d458      	bmi.n	8004648 <__sflush_r+0xc0>
 8004596:	684b      	ldr	r3, [r1, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	dc05      	bgt.n	80045a8 <__sflush_r+0x20>
 800459c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	dc02      	bgt.n	80045a8 <__sflush_r+0x20>
 80045a2:	2000      	movs	r0, #0
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045aa:	2e00      	cmp	r6, #0
 80045ac:	d0f9      	beq.n	80045a2 <__sflush_r+0x1a>
 80045ae:	2300      	movs	r3, #0
 80045b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045b4:	682f      	ldr	r7, [r5, #0]
 80045b6:	602b      	str	r3, [r5, #0]
 80045b8:	d032      	beq.n	8004620 <__sflush_r+0x98>
 80045ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	075a      	lsls	r2, r3, #29
 80045c0:	d505      	bpl.n	80045ce <__sflush_r+0x46>
 80045c2:	6863      	ldr	r3, [r4, #4]
 80045c4:	1ac0      	subs	r0, r0, r3
 80045c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045c8:	b10b      	cbz	r3, 80045ce <__sflush_r+0x46>
 80045ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045cc:	1ac0      	subs	r0, r0, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	4602      	mov	r2, r0
 80045d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045d4:	6a21      	ldr	r1, [r4, #32]
 80045d6:	4628      	mov	r0, r5
 80045d8:	47b0      	blx	r6
 80045da:	1c43      	adds	r3, r0, #1
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	d106      	bne.n	80045ee <__sflush_r+0x66>
 80045e0:	6829      	ldr	r1, [r5, #0]
 80045e2:	291d      	cmp	r1, #29
 80045e4:	d82c      	bhi.n	8004640 <__sflush_r+0xb8>
 80045e6:	4a2a      	ldr	r2, [pc, #168]	; (8004690 <__sflush_r+0x108>)
 80045e8:	40ca      	lsrs	r2, r1
 80045ea:	07d6      	lsls	r6, r2, #31
 80045ec:	d528      	bpl.n	8004640 <__sflush_r+0xb8>
 80045ee:	2200      	movs	r2, #0
 80045f0:	6062      	str	r2, [r4, #4]
 80045f2:	04d9      	lsls	r1, r3, #19
 80045f4:	6922      	ldr	r2, [r4, #16]
 80045f6:	6022      	str	r2, [r4, #0]
 80045f8:	d504      	bpl.n	8004604 <__sflush_r+0x7c>
 80045fa:	1c42      	adds	r2, r0, #1
 80045fc:	d101      	bne.n	8004602 <__sflush_r+0x7a>
 80045fe:	682b      	ldr	r3, [r5, #0]
 8004600:	b903      	cbnz	r3, 8004604 <__sflush_r+0x7c>
 8004602:	6560      	str	r0, [r4, #84]	; 0x54
 8004604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004606:	602f      	str	r7, [r5, #0]
 8004608:	2900      	cmp	r1, #0
 800460a:	d0ca      	beq.n	80045a2 <__sflush_r+0x1a>
 800460c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004610:	4299      	cmp	r1, r3
 8004612:	d002      	beq.n	800461a <__sflush_r+0x92>
 8004614:	4628      	mov	r0, r5
 8004616:	f000 fa45 	bl	8004aa4 <_free_r>
 800461a:	2000      	movs	r0, #0
 800461c:	6360      	str	r0, [r4, #52]	; 0x34
 800461e:	e7c1      	b.n	80045a4 <__sflush_r+0x1c>
 8004620:	6a21      	ldr	r1, [r4, #32]
 8004622:	2301      	movs	r3, #1
 8004624:	4628      	mov	r0, r5
 8004626:	47b0      	blx	r6
 8004628:	1c41      	adds	r1, r0, #1
 800462a:	d1c7      	bne.n	80045bc <__sflush_r+0x34>
 800462c:	682b      	ldr	r3, [r5, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0c4      	beq.n	80045bc <__sflush_r+0x34>
 8004632:	2b1d      	cmp	r3, #29
 8004634:	d001      	beq.n	800463a <__sflush_r+0xb2>
 8004636:	2b16      	cmp	r3, #22
 8004638:	d101      	bne.n	800463e <__sflush_r+0xb6>
 800463a:	602f      	str	r7, [r5, #0]
 800463c:	e7b1      	b.n	80045a2 <__sflush_r+0x1a>
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004644:	81a3      	strh	r3, [r4, #12]
 8004646:	e7ad      	b.n	80045a4 <__sflush_r+0x1c>
 8004648:	690f      	ldr	r7, [r1, #16]
 800464a:	2f00      	cmp	r7, #0
 800464c:	d0a9      	beq.n	80045a2 <__sflush_r+0x1a>
 800464e:	0793      	lsls	r3, r2, #30
 8004650:	680e      	ldr	r6, [r1, #0]
 8004652:	bf08      	it	eq
 8004654:	694b      	ldreq	r3, [r1, #20]
 8004656:	600f      	str	r7, [r1, #0]
 8004658:	bf18      	it	ne
 800465a:	2300      	movne	r3, #0
 800465c:	eba6 0807 	sub.w	r8, r6, r7
 8004660:	608b      	str	r3, [r1, #8]
 8004662:	f1b8 0f00 	cmp.w	r8, #0
 8004666:	dd9c      	ble.n	80045a2 <__sflush_r+0x1a>
 8004668:	6a21      	ldr	r1, [r4, #32]
 800466a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800466c:	4643      	mov	r3, r8
 800466e:	463a      	mov	r2, r7
 8004670:	4628      	mov	r0, r5
 8004672:	47b0      	blx	r6
 8004674:	2800      	cmp	r0, #0
 8004676:	dc06      	bgt.n	8004686 <__sflush_r+0xfe>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	e78e      	b.n	80045a4 <__sflush_r+0x1c>
 8004686:	4407      	add	r7, r0
 8004688:	eba8 0800 	sub.w	r8, r8, r0
 800468c:	e7e9      	b.n	8004662 <__sflush_r+0xda>
 800468e:	bf00      	nop
 8004690:	20400001 	.word	0x20400001

08004694 <_fflush_r>:
 8004694:	b538      	push	{r3, r4, r5, lr}
 8004696:	690b      	ldr	r3, [r1, #16]
 8004698:	4605      	mov	r5, r0
 800469a:	460c      	mov	r4, r1
 800469c:	b913      	cbnz	r3, 80046a4 <_fflush_r+0x10>
 800469e:	2500      	movs	r5, #0
 80046a0:	4628      	mov	r0, r5
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	b118      	cbz	r0, 80046ae <_fflush_r+0x1a>
 80046a6:	6983      	ldr	r3, [r0, #24]
 80046a8:	b90b      	cbnz	r3, 80046ae <_fflush_r+0x1a>
 80046aa:	f000 f899 	bl	80047e0 <__sinit>
 80046ae:	4b14      	ldr	r3, [pc, #80]	; (8004700 <_fflush_r+0x6c>)
 80046b0:	429c      	cmp	r4, r3
 80046b2:	d11b      	bne.n	80046ec <_fflush_r+0x58>
 80046b4:	686c      	ldr	r4, [r5, #4]
 80046b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ef      	beq.n	800469e <_fflush_r+0xa>
 80046be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046c0:	07d0      	lsls	r0, r2, #31
 80046c2:	d404      	bmi.n	80046ce <_fflush_r+0x3a>
 80046c4:	0599      	lsls	r1, r3, #22
 80046c6:	d402      	bmi.n	80046ce <_fflush_r+0x3a>
 80046c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ca:	f000 f984 	bl	80049d6 <__retarget_lock_acquire_recursive>
 80046ce:	4628      	mov	r0, r5
 80046d0:	4621      	mov	r1, r4
 80046d2:	f7ff ff59 	bl	8004588 <__sflush_r>
 80046d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046d8:	07da      	lsls	r2, r3, #31
 80046da:	4605      	mov	r5, r0
 80046dc:	d4e0      	bmi.n	80046a0 <_fflush_r+0xc>
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	059b      	lsls	r3, r3, #22
 80046e2:	d4dd      	bmi.n	80046a0 <_fflush_r+0xc>
 80046e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046e6:	f000 f977 	bl	80049d8 <__retarget_lock_release_recursive>
 80046ea:	e7d9      	b.n	80046a0 <_fflush_r+0xc>
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <_fflush_r+0x70>)
 80046ee:	429c      	cmp	r4, r3
 80046f0:	d101      	bne.n	80046f6 <_fflush_r+0x62>
 80046f2:	68ac      	ldr	r4, [r5, #8]
 80046f4:	e7df      	b.n	80046b6 <_fflush_r+0x22>
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <_fflush_r+0x74>)
 80046f8:	429c      	cmp	r4, r3
 80046fa:	bf08      	it	eq
 80046fc:	68ec      	ldreq	r4, [r5, #12]
 80046fe:	e7da      	b.n	80046b6 <_fflush_r+0x22>
 8004700:	08005a50 	.word	0x08005a50
 8004704:	08005a70 	.word	0x08005a70
 8004708:	08005a30 	.word	0x08005a30

0800470c <fflush>:
 800470c:	4601      	mov	r1, r0
 800470e:	b920      	cbnz	r0, 800471a <fflush+0xe>
 8004710:	4b04      	ldr	r3, [pc, #16]	; (8004724 <fflush+0x18>)
 8004712:	4905      	ldr	r1, [pc, #20]	; (8004728 <fflush+0x1c>)
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f000 b8fe 	b.w	8004916 <_fwalk_reent>
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <fflush+0x20>)
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	f7ff bfb9 	b.w	8004694 <_fflush_r>
 8004722:	bf00      	nop
 8004724:	08005a2c 	.word	0x08005a2c
 8004728:	08004695 	.word	0x08004695
 800472c:	200000d4 	.word	0x200000d4

08004730 <std>:
 8004730:	2300      	movs	r3, #0
 8004732:	b510      	push	{r4, lr}
 8004734:	4604      	mov	r4, r0
 8004736:	e9c0 3300 	strd	r3, r3, [r0]
 800473a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800473e:	6083      	str	r3, [r0, #8]
 8004740:	8181      	strh	r1, [r0, #12]
 8004742:	6643      	str	r3, [r0, #100]	; 0x64
 8004744:	81c2      	strh	r2, [r0, #14]
 8004746:	6183      	str	r3, [r0, #24]
 8004748:	4619      	mov	r1, r3
 800474a:	2208      	movs	r2, #8
 800474c:	305c      	adds	r0, #92	; 0x5c
 800474e:	f7ff fda5 	bl	800429c <memset>
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <std+0x38>)
 8004754:	6263      	str	r3, [r4, #36]	; 0x24
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <std+0x3c>)
 8004758:	62a3      	str	r3, [r4, #40]	; 0x28
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <std+0x40>)
 800475c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <std+0x44>)
 8004760:	6224      	str	r4, [r4, #32]
 8004762:	6323      	str	r3, [r4, #48]	; 0x30
 8004764:	bd10      	pop	{r4, pc}
 8004766:	bf00      	nop
 8004768:	08005505 	.word	0x08005505
 800476c:	08005527 	.word	0x08005527
 8004770:	0800555f 	.word	0x0800555f
 8004774:	08005583 	.word	0x08005583

08004778 <_cleanup_r>:
 8004778:	4901      	ldr	r1, [pc, #4]	; (8004780 <_cleanup_r+0x8>)
 800477a:	f000 b8cc 	b.w	8004916 <_fwalk_reent>
 800477e:	bf00      	nop
 8004780:	08004695 	.word	0x08004695

08004784 <__sfmoreglue>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	1e4a      	subs	r2, r1, #1
 8004788:	2568      	movs	r5, #104	; 0x68
 800478a:	4355      	muls	r5, r2
 800478c:	460e      	mov	r6, r1
 800478e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004792:	f000 f9d7 	bl	8004b44 <_malloc_r>
 8004796:	4604      	mov	r4, r0
 8004798:	b140      	cbz	r0, 80047ac <__sfmoreglue+0x28>
 800479a:	2100      	movs	r1, #0
 800479c:	e9c0 1600 	strd	r1, r6, [r0]
 80047a0:	300c      	adds	r0, #12
 80047a2:	60a0      	str	r0, [r4, #8]
 80047a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047a8:	f7ff fd78 	bl	800429c <memset>
 80047ac:	4620      	mov	r0, r4
 80047ae:	bd70      	pop	{r4, r5, r6, pc}

080047b0 <__sfp_lock_acquire>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__sfp_lock_acquire+0x8>)
 80047b2:	f000 b910 	b.w	80049d6 <__retarget_lock_acquire_recursive>
 80047b6:	bf00      	nop
 80047b8:	20000298 	.word	0x20000298

080047bc <__sfp_lock_release>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sfp_lock_release+0x8>)
 80047be:	f000 b90b 	b.w	80049d8 <__retarget_lock_release_recursive>
 80047c2:	bf00      	nop
 80047c4:	20000298 	.word	0x20000298

080047c8 <__sinit_lock_acquire>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__sinit_lock_acquire+0x8>)
 80047ca:	f000 b904 	b.w	80049d6 <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	20000293 	.word	0x20000293

080047d4 <__sinit_lock_release>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__sinit_lock_release+0x8>)
 80047d6:	f000 b8ff 	b.w	80049d8 <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	20000293 	.word	0x20000293

080047e0 <__sinit>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	f7ff fff0 	bl	80047c8 <__sinit_lock_acquire>
 80047e8:	69a3      	ldr	r3, [r4, #24]
 80047ea:	b11b      	cbz	r3, 80047f4 <__sinit+0x14>
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f0:	f7ff bff0 	b.w	80047d4 <__sinit_lock_release>
 80047f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047f8:	6523      	str	r3, [r4, #80]	; 0x50
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <__sinit+0x68>)
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <__sinit+0x6c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	62a2      	str	r2, [r4, #40]	; 0x28
 8004802:	42a3      	cmp	r3, r4
 8004804:	bf04      	itt	eq
 8004806:	2301      	moveq	r3, #1
 8004808:	61a3      	streq	r3, [r4, #24]
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f820 	bl	8004850 <__sfp>
 8004810:	6060      	str	r0, [r4, #4]
 8004812:	4620      	mov	r0, r4
 8004814:	f000 f81c 	bl	8004850 <__sfp>
 8004818:	60a0      	str	r0, [r4, #8]
 800481a:	4620      	mov	r0, r4
 800481c:	f000 f818 	bl	8004850 <__sfp>
 8004820:	2200      	movs	r2, #0
 8004822:	60e0      	str	r0, [r4, #12]
 8004824:	2104      	movs	r1, #4
 8004826:	6860      	ldr	r0, [r4, #4]
 8004828:	f7ff ff82 	bl	8004730 <std>
 800482c:	68a0      	ldr	r0, [r4, #8]
 800482e:	2201      	movs	r2, #1
 8004830:	2109      	movs	r1, #9
 8004832:	f7ff ff7d 	bl	8004730 <std>
 8004836:	68e0      	ldr	r0, [r4, #12]
 8004838:	2202      	movs	r2, #2
 800483a:	2112      	movs	r1, #18
 800483c:	f7ff ff78 	bl	8004730 <std>
 8004840:	2301      	movs	r3, #1
 8004842:	61a3      	str	r3, [r4, #24]
 8004844:	e7d2      	b.n	80047ec <__sinit+0xc>
 8004846:	bf00      	nop
 8004848:	08005a2c 	.word	0x08005a2c
 800484c:	08004779 	.word	0x08004779

08004850 <__sfp>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	4607      	mov	r7, r0
 8004854:	f7ff ffac 	bl	80047b0 <__sfp_lock_acquire>
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <__sfp+0x84>)
 800485a:	681e      	ldr	r6, [r3, #0]
 800485c:	69b3      	ldr	r3, [r6, #24]
 800485e:	b913      	cbnz	r3, 8004866 <__sfp+0x16>
 8004860:	4630      	mov	r0, r6
 8004862:	f7ff ffbd 	bl	80047e0 <__sinit>
 8004866:	3648      	adds	r6, #72	; 0x48
 8004868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	d503      	bpl.n	8004878 <__sfp+0x28>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	b30b      	cbz	r3, 80048b8 <__sfp+0x68>
 8004874:	6836      	ldr	r6, [r6, #0]
 8004876:	e7f7      	b.n	8004868 <__sfp+0x18>
 8004878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800487c:	b9d5      	cbnz	r5, 80048b4 <__sfp+0x64>
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <__sfp+0x88>)
 8004880:	60e3      	str	r3, [r4, #12]
 8004882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004886:	6665      	str	r5, [r4, #100]	; 0x64
 8004888:	f000 f8a4 	bl	80049d4 <__retarget_lock_init_recursive>
 800488c:	f7ff ff96 	bl	80047bc <__sfp_lock_release>
 8004890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004898:	6025      	str	r5, [r4, #0]
 800489a:	61a5      	str	r5, [r4, #24]
 800489c:	2208      	movs	r2, #8
 800489e:	4629      	mov	r1, r5
 80048a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048a4:	f7ff fcfa 	bl	800429c <memset>
 80048a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048b0:	4620      	mov	r0, r4
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b4:	3468      	adds	r4, #104	; 0x68
 80048b6:	e7d9      	b.n	800486c <__sfp+0x1c>
 80048b8:	2104      	movs	r1, #4
 80048ba:	4638      	mov	r0, r7
 80048bc:	f7ff ff62 	bl	8004784 <__sfmoreglue>
 80048c0:	4604      	mov	r4, r0
 80048c2:	6030      	str	r0, [r6, #0]
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d1d5      	bne.n	8004874 <__sfp+0x24>
 80048c8:	f7ff ff78 	bl	80047bc <__sfp_lock_release>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	e7ee      	b.n	80048b0 <__sfp+0x60>
 80048d2:	bf00      	nop
 80048d4:	08005a2c 	.word	0x08005a2c
 80048d8:	ffff0001 	.word	0xffff0001

080048dc <_fwalk>:
 80048dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e0:	460f      	mov	r7, r1
 80048e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048e6:	2600      	movs	r6, #0
 80048e8:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80048ec:	f1b8 0801 	subs.w	r8, r8, #1
 80048f0:	d505      	bpl.n	80048fe <_fwalk+0x22>
 80048f2:	6824      	ldr	r4, [r4, #0]
 80048f4:	2c00      	cmp	r4, #0
 80048f6:	d1f7      	bne.n	80048e8 <_fwalk+0xc>
 80048f8:	4630      	mov	r0, r6
 80048fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048fe:	89ab      	ldrh	r3, [r5, #12]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d906      	bls.n	8004912 <_fwalk+0x36>
 8004904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004908:	3301      	adds	r3, #1
 800490a:	d002      	beq.n	8004912 <_fwalk+0x36>
 800490c:	4628      	mov	r0, r5
 800490e:	47b8      	blx	r7
 8004910:	4306      	orrs	r6, r0
 8004912:	3568      	adds	r5, #104	; 0x68
 8004914:	e7ea      	b.n	80048ec <_fwalk+0x10>

08004916 <_fwalk_reent>:
 8004916:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800491a:	4606      	mov	r6, r0
 800491c:	4688      	mov	r8, r1
 800491e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004922:	2700      	movs	r7, #0
 8004924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004928:	f1b9 0901 	subs.w	r9, r9, #1
 800492c:	d505      	bpl.n	800493a <_fwalk_reent+0x24>
 800492e:	6824      	ldr	r4, [r4, #0]
 8004930:	2c00      	cmp	r4, #0
 8004932:	d1f7      	bne.n	8004924 <_fwalk_reent+0xe>
 8004934:	4638      	mov	r0, r7
 8004936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800493a:	89ab      	ldrh	r3, [r5, #12]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d907      	bls.n	8004950 <_fwalk_reent+0x3a>
 8004940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004944:	3301      	adds	r3, #1
 8004946:	d003      	beq.n	8004950 <_fwalk_reent+0x3a>
 8004948:	4629      	mov	r1, r5
 800494a:	4630      	mov	r0, r6
 800494c:	47c0      	blx	r8
 800494e:	4307      	orrs	r7, r0
 8004950:	3568      	adds	r5, #104	; 0x68
 8004952:	e7e9      	b.n	8004928 <_fwalk_reent+0x12>

08004954 <_getc_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	460c      	mov	r4, r1
 8004958:	4605      	mov	r5, r0
 800495a:	b118      	cbz	r0, 8004964 <_getc_r+0x10>
 800495c:	6983      	ldr	r3, [r0, #24]
 800495e:	b90b      	cbnz	r3, 8004964 <_getc_r+0x10>
 8004960:	f7ff ff3e 	bl	80047e0 <__sinit>
 8004964:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <_getc_r+0x74>)
 8004966:	429c      	cmp	r4, r3
 8004968:	d11e      	bne.n	80049a8 <_getc_r+0x54>
 800496a:	686c      	ldr	r4, [r5, #4]
 800496c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800496e:	07d8      	lsls	r0, r3, #31
 8004970:	d405      	bmi.n	800497e <_getc_r+0x2a>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	0599      	lsls	r1, r3, #22
 8004976:	d402      	bmi.n	800497e <_getc_r+0x2a>
 8004978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497a:	f000 f82c 	bl	80049d6 <__retarget_lock_acquire_recursive>
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	3b01      	subs	r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	6063      	str	r3, [r4, #4]
 8004986:	da19      	bge.n	80049bc <_getc_r+0x68>
 8004988:	4628      	mov	r0, r5
 800498a:	4621      	mov	r1, r4
 800498c:	f000 fd7e 	bl	800548c <__srget_r>
 8004990:	4605      	mov	r5, r0
 8004992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004994:	07da      	lsls	r2, r3, #31
 8004996:	d405      	bmi.n	80049a4 <_getc_r+0x50>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	059b      	lsls	r3, r3, #22
 800499c:	d402      	bmi.n	80049a4 <_getc_r+0x50>
 800499e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049a0:	f000 f81a 	bl	80049d8 <__retarget_lock_release_recursive>
 80049a4:	4628      	mov	r0, r5
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	4b08      	ldr	r3, [pc, #32]	; (80049cc <_getc_r+0x78>)
 80049aa:	429c      	cmp	r4, r3
 80049ac:	d101      	bne.n	80049b2 <_getc_r+0x5e>
 80049ae:	68ac      	ldr	r4, [r5, #8]
 80049b0:	e7dc      	b.n	800496c <_getc_r+0x18>
 80049b2:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <_getc_r+0x7c>)
 80049b4:	429c      	cmp	r4, r3
 80049b6:	bf08      	it	eq
 80049b8:	68ec      	ldreq	r4, [r5, #12]
 80049ba:	e7d7      	b.n	800496c <_getc_r+0x18>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	6022      	str	r2, [r4, #0]
 80049c2:	781d      	ldrb	r5, [r3, #0]
 80049c4:	e7e5      	b.n	8004992 <_getc_r+0x3e>
 80049c6:	bf00      	nop
 80049c8:	08005a50 	.word	0x08005a50
 80049cc:	08005a70 	.word	0x08005a70
 80049d0:	08005a30 	.word	0x08005a30

080049d4 <__retarget_lock_init_recursive>:
 80049d4:	4770      	bx	lr

080049d6 <__retarget_lock_acquire_recursive>:
 80049d6:	4770      	bx	lr

080049d8 <__retarget_lock_release_recursive>:
 80049d8:	4770      	bx	lr

080049da <__swhatbuf_r>:
 80049da:	b570      	push	{r4, r5, r6, lr}
 80049dc:	460e      	mov	r6, r1
 80049de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e2:	2900      	cmp	r1, #0
 80049e4:	b096      	sub	sp, #88	; 0x58
 80049e6:	4614      	mov	r4, r2
 80049e8:	461d      	mov	r5, r3
 80049ea:	da07      	bge.n	80049fc <__swhatbuf_r+0x22>
 80049ec:	2300      	movs	r3, #0
 80049ee:	602b      	str	r3, [r5, #0]
 80049f0:	89b3      	ldrh	r3, [r6, #12]
 80049f2:	061a      	lsls	r2, r3, #24
 80049f4:	d410      	bmi.n	8004a18 <__swhatbuf_r+0x3e>
 80049f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049fa:	e00e      	b.n	8004a1a <__swhatbuf_r+0x40>
 80049fc:	466a      	mov	r2, sp
 80049fe:	f000 fde7 	bl	80055d0 <_fstat_r>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	dbf2      	blt.n	80049ec <__swhatbuf_r+0x12>
 8004a06:	9a01      	ldr	r2, [sp, #4]
 8004a08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a10:	425a      	negs	r2, r3
 8004a12:	415a      	adcs	r2, r3
 8004a14:	602a      	str	r2, [r5, #0]
 8004a16:	e7ee      	b.n	80049f6 <__swhatbuf_r+0x1c>
 8004a18:	2340      	movs	r3, #64	; 0x40
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	b016      	add	sp, #88	; 0x58
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a24 <__smakebuf_r>:
 8004a24:	898b      	ldrh	r3, [r1, #12]
 8004a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a28:	079d      	lsls	r5, r3, #30
 8004a2a:	4606      	mov	r6, r0
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	d507      	bpl.n	8004a40 <__smakebuf_r+0x1c>
 8004a30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	6123      	str	r3, [r4, #16]
 8004a38:	2301      	movs	r3, #1
 8004a3a:	6163      	str	r3, [r4, #20]
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	ab01      	add	r3, sp, #4
 8004a42:	466a      	mov	r2, sp
 8004a44:	f7ff ffc9 	bl	80049da <__swhatbuf_r>
 8004a48:	9900      	ldr	r1, [sp, #0]
 8004a4a:	4605      	mov	r5, r0
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f000 f879 	bl	8004b44 <_malloc_r>
 8004a52:	b948      	cbnz	r0, 8004a68 <__smakebuf_r+0x44>
 8004a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a58:	059a      	lsls	r2, r3, #22
 8004a5a:	d4ef      	bmi.n	8004a3c <__smakebuf_r+0x18>
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	f043 0302 	orr.w	r3, r3, #2
 8004a64:	81a3      	strh	r3, [r4, #12]
 8004a66:	e7e3      	b.n	8004a30 <__smakebuf_r+0xc>
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <__smakebuf_r+0x7c>)
 8004a6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	6020      	str	r0, [r4, #0]
 8004a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	9b00      	ldr	r3, [sp, #0]
 8004a78:	6163      	str	r3, [r4, #20]
 8004a7a:	9b01      	ldr	r3, [sp, #4]
 8004a7c:	6120      	str	r0, [r4, #16]
 8004a7e:	b15b      	cbz	r3, 8004a98 <__smakebuf_r+0x74>
 8004a80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a84:	4630      	mov	r0, r6
 8004a86:	f000 fdb5 	bl	80055f4 <_isatty_r>
 8004a8a:	b128      	cbz	r0, 8004a98 <__smakebuf_r+0x74>
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	81a3      	strh	r3, [r4, #12]
 8004a98:	89a0      	ldrh	r0, [r4, #12]
 8004a9a:	4305      	orrs	r5, r0
 8004a9c:	81a5      	strh	r5, [r4, #12]
 8004a9e:	e7cd      	b.n	8004a3c <__smakebuf_r+0x18>
 8004aa0:	08004779 	.word	0x08004779

08004aa4 <_free_r>:
 8004aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004aa6:	2900      	cmp	r1, #0
 8004aa8:	d048      	beq.n	8004b3c <_free_r+0x98>
 8004aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aae:	9001      	str	r0, [sp, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8004ab6:	bfb8      	it	lt
 8004ab8:	18e4      	addlt	r4, r4, r3
 8004aba:	f000 fde5 	bl	8005688 <__malloc_lock>
 8004abe:	4a20      	ldr	r2, [pc, #128]	; (8004b40 <_free_r+0x9c>)
 8004ac0:	9801      	ldr	r0, [sp, #4]
 8004ac2:	6813      	ldr	r3, [r2, #0]
 8004ac4:	4615      	mov	r5, r2
 8004ac6:	b933      	cbnz	r3, 8004ad6 <_free_r+0x32>
 8004ac8:	6063      	str	r3, [r4, #4]
 8004aca:	6014      	str	r4, [r2, #0]
 8004acc:	b003      	add	sp, #12
 8004ace:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ad2:	f000 bddf 	b.w	8005694 <__malloc_unlock>
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	d90b      	bls.n	8004af2 <_free_r+0x4e>
 8004ada:	6821      	ldr	r1, [r4, #0]
 8004adc:	1862      	adds	r2, r4, r1
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	bf04      	itt	eq
 8004ae2:	681a      	ldreq	r2, [r3, #0]
 8004ae4:	685b      	ldreq	r3, [r3, #4]
 8004ae6:	6063      	str	r3, [r4, #4]
 8004ae8:	bf04      	itt	eq
 8004aea:	1852      	addeq	r2, r2, r1
 8004aec:	6022      	streq	r2, [r4, #0]
 8004aee:	602c      	str	r4, [r5, #0]
 8004af0:	e7ec      	b.n	8004acc <_free_r+0x28>
 8004af2:	461a      	mov	r2, r3
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	b10b      	cbz	r3, 8004afc <_free_r+0x58>
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d9fa      	bls.n	8004af2 <_free_r+0x4e>
 8004afc:	6811      	ldr	r1, [r2, #0]
 8004afe:	1855      	adds	r5, r2, r1
 8004b00:	42a5      	cmp	r5, r4
 8004b02:	d10b      	bne.n	8004b1c <_free_r+0x78>
 8004b04:	6824      	ldr	r4, [r4, #0]
 8004b06:	4421      	add	r1, r4
 8004b08:	1854      	adds	r4, r2, r1
 8004b0a:	42a3      	cmp	r3, r4
 8004b0c:	6011      	str	r1, [r2, #0]
 8004b0e:	d1dd      	bne.n	8004acc <_free_r+0x28>
 8004b10:	681c      	ldr	r4, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	6053      	str	r3, [r2, #4]
 8004b16:	4421      	add	r1, r4
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	e7d7      	b.n	8004acc <_free_r+0x28>
 8004b1c:	d902      	bls.n	8004b24 <_free_r+0x80>
 8004b1e:	230c      	movs	r3, #12
 8004b20:	6003      	str	r3, [r0, #0]
 8004b22:	e7d3      	b.n	8004acc <_free_r+0x28>
 8004b24:	6825      	ldr	r5, [r4, #0]
 8004b26:	1961      	adds	r1, r4, r5
 8004b28:	428b      	cmp	r3, r1
 8004b2a:	bf04      	itt	eq
 8004b2c:	6819      	ldreq	r1, [r3, #0]
 8004b2e:	685b      	ldreq	r3, [r3, #4]
 8004b30:	6063      	str	r3, [r4, #4]
 8004b32:	bf04      	itt	eq
 8004b34:	1949      	addeq	r1, r1, r5
 8004b36:	6021      	streq	r1, [r4, #0]
 8004b38:	6054      	str	r4, [r2, #4]
 8004b3a:	e7c7      	b.n	8004acc <_free_r+0x28>
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bd30      	pop	{r4, r5, pc}
 8004b40:	20000158 	.word	0x20000158

08004b44 <_malloc_r>:
 8004b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b46:	1ccd      	adds	r5, r1, #3
 8004b48:	f025 0503 	bic.w	r5, r5, #3
 8004b4c:	3508      	adds	r5, #8
 8004b4e:	2d0c      	cmp	r5, #12
 8004b50:	bf38      	it	cc
 8004b52:	250c      	movcc	r5, #12
 8004b54:	2d00      	cmp	r5, #0
 8004b56:	4606      	mov	r6, r0
 8004b58:	db01      	blt.n	8004b5e <_malloc_r+0x1a>
 8004b5a:	42a9      	cmp	r1, r5
 8004b5c:	d903      	bls.n	8004b66 <_malloc_r+0x22>
 8004b5e:	230c      	movs	r3, #12
 8004b60:	6033      	str	r3, [r6, #0]
 8004b62:	2000      	movs	r0, #0
 8004b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b66:	f000 fd8f 	bl	8005688 <__malloc_lock>
 8004b6a:	4921      	ldr	r1, [pc, #132]	; (8004bf0 <_malloc_r+0xac>)
 8004b6c:	680a      	ldr	r2, [r1, #0]
 8004b6e:	4614      	mov	r4, r2
 8004b70:	b99c      	cbnz	r4, 8004b9a <_malloc_r+0x56>
 8004b72:	4f20      	ldr	r7, [pc, #128]	; (8004bf4 <_malloc_r+0xb0>)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	b923      	cbnz	r3, 8004b82 <_malloc_r+0x3e>
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	f000 fcb2 	bl	80054e4 <_sbrk_r>
 8004b80:	6038      	str	r0, [r7, #0]
 8004b82:	4629      	mov	r1, r5
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 fcad 	bl	80054e4 <_sbrk_r>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	d123      	bne.n	8004bd6 <_malloc_r+0x92>
 8004b8e:	230c      	movs	r3, #12
 8004b90:	6033      	str	r3, [r6, #0]
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 fd7e 	bl	8005694 <__malloc_unlock>
 8004b98:	e7e3      	b.n	8004b62 <_malloc_r+0x1e>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	1b5b      	subs	r3, r3, r5
 8004b9e:	d417      	bmi.n	8004bd0 <_malloc_r+0x8c>
 8004ba0:	2b0b      	cmp	r3, #11
 8004ba2:	d903      	bls.n	8004bac <_malloc_r+0x68>
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	441c      	add	r4, r3
 8004ba8:	6025      	str	r5, [r4, #0]
 8004baa:	e004      	b.n	8004bb6 <_malloc_r+0x72>
 8004bac:	6863      	ldr	r3, [r4, #4]
 8004bae:	42a2      	cmp	r2, r4
 8004bb0:	bf0c      	ite	eq
 8004bb2:	600b      	streq	r3, [r1, #0]
 8004bb4:	6053      	strne	r3, [r2, #4]
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f000 fd6c 	bl	8005694 <__malloc_unlock>
 8004bbc:	f104 000b 	add.w	r0, r4, #11
 8004bc0:	1d23      	adds	r3, r4, #4
 8004bc2:	f020 0007 	bic.w	r0, r0, #7
 8004bc6:	1ac2      	subs	r2, r0, r3
 8004bc8:	d0cc      	beq.n	8004b64 <_malloc_r+0x20>
 8004bca:	1a1b      	subs	r3, r3, r0
 8004bcc:	50a3      	str	r3, [r4, r2]
 8004bce:	e7c9      	b.n	8004b64 <_malloc_r+0x20>
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	6864      	ldr	r4, [r4, #4]
 8004bd4:	e7cc      	b.n	8004b70 <_malloc_r+0x2c>
 8004bd6:	1cc4      	adds	r4, r0, #3
 8004bd8:	f024 0403 	bic.w	r4, r4, #3
 8004bdc:	42a0      	cmp	r0, r4
 8004bde:	d0e3      	beq.n	8004ba8 <_malloc_r+0x64>
 8004be0:	1a21      	subs	r1, r4, r0
 8004be2:	4630      	mov	r0, r6
 8004be4:	f000 fc7e 	bl	80054e4 <_sbrk_r>
 8004be8:	3001      	adds	r0, #1
 8004bea:	d1dd      	bne.n	8004ba8 <_malloc_r+0x64>
 8004bec:	e7cf      	b.n	8004b8e <_malloc_r+0x4a>
 8004bee:	bf00      	nop
 8004bf0:	20000158 	.word	0x20000158
 8004bf4:	2000015c 	.word	0x2000015c

08004bf8 <__ssputs_r>:
 8004bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bfc:	688e      	ldr	r6, [r1, #8]
 8004bfe:	429e      	cmp	r6, r3
 8004c00:	4682      	mov	sl, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	4690      	mov	r8, r2
 8004c06:	461f      	mov	r7, r3
 8004c08:	d838      	bhi.n	8004c7c <__ssputs_r+0x84>
 8004c0a:	898a      	ldrh	r2, [r1, #12]
 8004c0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c10:	d032      	beq.n	8004c78 <__ssputs_r+0x80>
 8004c12:	6825      	ldr	r5, [r4, #0]
 8004c14:	6909      	ldr	r1, [r1, #16]
 8004c16:	eba5 0901 	sub.w	r9, r5, r1
 8004c1a:	6965      	ldr	r5, [r4, #20]
 8004c1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c24:	3301      	adds	r3, #1
 8004c26:	444b      	add	r3, r9
 8004c28:	106d      	asrs	r5, r5, #1
 8004c2a:	429d      	cmp	r5, r3
 8004c2c:	bf38      	it	cc
 8004c2e:	461d      	movcc	r5, r3
 8004c30:	0553      	lsls	r3, r2, #21
 8004c32:	d531      	bpl.n	8004c98 <__ssputs_r+0xa0>
 8004c34:	4629      	mov	r1, r5
 8004c36:	f7ff ff85 	bl	8004b44 <_malloc_r>
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	b950      	cbnz	r0, 8004c54 <__ssputs_r+0x5c>
 8004c3e:	230c      	movs	r3, #12
 8004c40:	f8ca 3000 	str.w	r3, [sl]
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c4a:	81a3      	strh	r3, [r4, #12]
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c54:	6921      	ldr	r1, [r4, #16]
 8004c56:	464a      	mov	r2, r9
 8004c58:	f000 fcee 	bl	8005638 <memcpy>
 8004c5c:	89a3      	ldrh	r3, [r4, #12]
 8004c5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c66:	81a3      	strh	r3, [r4, #12]
 8004c68:	6126      	str	r6, [r4, #16]
 8004c6a:	6165      	str	r5, [r4, #20]
 8004c6c:	444e      	add	r6, r9
 8004c6e:	eba5 0509 	sub.w	r5, r5, r9
 8004c72:	6026      	str	r6, [r4, #0]
 8004c74:	60a5      	str	r5, [r4, #8]
 8004c76:	463e      	mov	r6, r7
 8004c78:	42be      	cmp	r6, r7
 8004c7a:	d900      	bls.n	8004c7e <__ssputs_r+0x86>
 8004c7c:	463e      	mov	r6, r7
 8004c7e:	4632      	mov	r2, r6
 8004c80:	6820      	ldr	r0, [r4, #0]
 8004c82:	4641      	mov	r1, r8
 8004c84:	f000 fce6 	bl	8005654 <memmove>
 8004c88:	68a3      	ldr	r3, [r4, #8]
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	1b9b      	subs	r3, r3, r6
 8004c8e:	4432      	add	r2, r6
 8004c90:	60a3      	str	r3, [r4, #8]
 8004c92:	6022      	str	r2, [r4, #0]
 8004c94:	2000      	movs	r0, #0
 8004c96:	e7db      	b.n	8004c50 <__ssputs_r+0x58>
 8004c98:	462a      	mov	r2, r5
 8004c9a:	f000 fd01 	bl	80056a0 <_realloc_r>
 8004c9e:	4606      	mov	r6, r0
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d1e1      	bne.n	8004c68 <__ssputs_r+0x70>
 8004ca4:	6921      	ldr	r1, [r4, #16]
 8004ca6:	4650      	mov	r0, sl
 8004ca8:	f7ff fefc 	bl	8004aa4 <_free_r>
 8004cac:	e7c7      	b.n	8004c3e <__ssputs_r+0x46>
	...

08004cb0 <_svfiprintf_r>:
 8004cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cb4:	4698      	mov	r8, r3
 8004cb6:	898b      	ldrh	r3, [r1, #12]
 8004cb8:	061b      	lsls	r3, r3, #24
 8004cba:	b09d      	sub	sp, #116	; 0x74
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	460d      	mov	r5, r1
 8004cc0:	4614      	mov	r4, r2
 8004cc2:	d50e      	bpl.n	8004ce2 <_svfiprintf_r+0x32>
 8004cc4:	690b      	ldr	r3, [r1, #16]
 8004cc6:	b963      	cbnz	r3, 8004ce2 <_svfiprintf_r+0x32>
 8004cc8:	2140      	movs	r1, #64	; 0x40
 8004cca:	f7ff ff3b 	bl	8004b44 <_malloc_r>
 8004cce:	6028      	str	r0, [r5, #0]
 8004cd0:	6128      	str	r0, [r5, #16]
 8004cd2:	b920      	cbnz	r0, 8004cde <_svfiprintf_r+0x2e>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	e0d1      	b.n	8004e82 <_svfiprintf_r+0x1d2>
 8004cde:	2340      	movs	r3, #64	; 0x40
 8004ce0:	616b      	str	r3, [r5, #20]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce6:	2320      	movs	r3, #32
 8004ce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cec:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cf0:	2330      	movs	r3, #48	; 0x30
 8004cf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e9c <_svfiprintf_r+0x1ec>
 8004cf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cfa:	f04f 0901 	mov.w	r9, #1
 8004cfe:	4623      	mov	r3, r4
 8004d00:	469a      	mov	sl, r3
 8004d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d06:	b10a      	cbz	r2, 8004d0c <_svfiprintf_r+0x5c>
 8004d08:	2a25      	cmp	r2, #37	; 0x25
 8004d0a:	d1f9      	bne.n	8004d00 <_svfiprintf_r+0x50>
 8004d0c:	ebba 0b04 	subs.w	fp, sl, r4
 8004d10:	d00b      	beq.n	8004d2a <_svfiprintf_r+0x7a>
 8004d12:	465b      	mov	r3, fp
 8004d14:	4622      	mov	r2, r4
 8004d16:	4629      	mov	r1, r5
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f7ff ff6d 	bl	8004bf8 <__ssputs_r>
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f000 80aa 	beq.w	8004e78 <_svfiprintf_r+0x1c8>
 8004d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d26:	445a      	add	r2, fp
 8004d28:	9209      	str	r2, [sp, #36]	; 0x24
 8004d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80a2 	beq.w	8004e78 <_svfiprintf_r+0x1c8>
 8004d34:	2300      	movs	r3, #0
 8004d36:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d3e:	f10a 0a01 	add.w	sl, sl, #1
 8004d42:	9304      	str	r3, [sp, #16]
 8004d44:	9307      	str	r3, [sp, #28]
 8004d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8004d4c:	4654      	mov	r4, sl
 8004d4e:	2205      	movs	r2, #5
 8004d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d54:	4851      	ldr	r0, [pc, #324]	; (8004e9c <_svfiprintf_r+0x1ec>)
 8004d56:	f7fb fa43 	bl	80001e0 <memchr>
 8004d5a:	9a04      	ldr	r2, [sp, #16]
 8004d5c:	b9d8      	cbnz	r0, 8004d96 <_svfiprintf_r+0xe6>
 8004d5e:	06d0      	lsls	r0, r2, #27
 8004d60:	bf44      	itt	mi
 8004d62:	2320      	movmi	r3, #32
 8004d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d68:	0711      	lsls	r1, r2, #28
 8004d6a:	bf44      	itt	mi
 8004d6c:	232b      	movmi	r3, #43	; 0x2b
 8004d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d72:	f89a 3000 	ldrb.w	r3, [sl]
 8004d76:	2b2a      	cmp	r3, #42	; 0x2a
 8004d78:	d015      	beq.n	8004da6 <_svfiprintf_r+0xf6>
 8004d7a:	9a07      	ldr	r2, [sp, #28]
 8004d7c:	4654      	mov	r4, sl
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f04f 0c0a 	mov.w	ip, #10
 8004d84:	4621      	mov	r1, r4
 8004d86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d8a:	3b30      	subs	r3, #48	; 0x30
 8004d8c:	2b09      	cmp	r3, #9
 8004d8e:	d94e      	bls.n	8004e2e <_svfiprintf_r+0x17e>
 8004d90:	b1b0      	cbz	r0, 8004dc0 <_svfiprintf_r+0x110>
 8004d92:	9207      	str	r2, [sp, #28]
 8004d94:	e014      	b.n	8004dc0 <_svfiprintf_r+0x110>
 8004d96:	eba0 0308 	sub.w	r3, r0, r8
 8004d9a:	fa09 f303 	lsl.w	r3, r9, r3
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	9304      	str	r3, [sp, #16]
 8004da2:	46a2      	mov	sl, r4
 8004da4:	e7d2      	b.n	8004d4c <_svfiprintf_r+0x9c>
 8004da6:	9b03      	ldr	r3, [sp, #12]
 8004da8:	1d19      	adds	r1, r3, #4
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	9103      	str	r1, [sp, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfbb      	ittet	lt
 8004db2:	425b      	neglt	r3, r3
 8004db4:	f042 0202 	orrlt.w	r2, r2, #2
 8004db8:	9307      	strge	r3, [sp, #28]
 8004dba:	9307      	strlt	r3, [sp, #28]
 8004dbc:	bfb8      	it	lt
 8004dbe:	9204      	strlt	r2, [sp, #16]
 8004dc0:	7823      	ldrb	r3, [r4, #0]
 8004dc2:	2b2e      	cmp	r3, #46	; 0x2e
 8004dc4:	d10c      	bne.n	8004de0 <_svfiprintf_r+0x130>
 8004dc6:	7863      	ldrb	r3, [r4, #1]
 8004dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dca:	d135      	bne.n	8004e38 <_svfiprintf_r+0x188>
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	1d1a      	adds	r2, r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	9203      	str	r2, [sp, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	bfb8      	it	lt
 8004dd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ddc:	3402      	adds	r4, #2
 8004dde:	9305      	str	r3, [sp, #20]
 8004de0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004eac <_svfiprintf_r+0x1fc>
 8004de4:	7821      	ldrb	r1, [r4, #0]
 8004de6:	2203      	movs	r2, #3
 8004de8:	4650      	mov	r0, sl
 8004dea:	f7fb f9f9 	bl	80001e0 <memchr>
 8004dee:	b140      	cbz	r0, 8004e02 <_svfiprintf_r+0x152>
 8004df0:	2340      	movs	r3, #64	; 0x40
 8004df2:	eba0 000a 	sub.w	r0, r0, sl
 8004df6:	fa03 f000 	lsl.w	r0, r3, r0
 8004dfa:	9b04      	ldr	r3, [sp, #16]
 8004dfc:	4303      	orrs	r3, r0
 8004dfe:	3401      	adds	r4, #1
 8004e00:	9304      	str	r3, [sp, #16]
 8004e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e06:	4826      	ldr	r0, [pc, #152]	; (8004ea0 <_svfiprintf_r+0x1f0>)
 8004e08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e0c:	2206      	movs	r2, #6
 8004e0e:	f7fb f9e7 	bl	80001e0 <memchr>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d038      	beq.n	8004e88 <_svfiprintf_r+0x1d8>
 8004e16:	4b23      	ldr	r3, [pc, #140]	; (8004ea4 <_svfiprintf_r+0x1f4>)
 8004e18:	bb1b      	cbnz	r3, 8004e62 <_svfiprintf_r+0x1b2>
 8004e1a:	9b03      	ldr	r3, [sp, #12]
 8004e1c:	3307      	adds	r3, #7
 8004e1e:	f023 0307 	bic.w	r3, r3, #7
 8004e22:	3308      	adds	r3, #8
 8004e24:	9303      	str	r3, [sp, #12]
 8004e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e28:	4433      	add	r3, r6
 8004e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2c:	e767      	b.n	8004cfe <_svfiprintf_r+0x4e>
 8004e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e32:	460c      	mov	r4, r1
 8004e34:	2001      	movs	r0, #1
 8004e36:	e7a5      	b.n	8004d84 <_svfiprintf_r+0xd4>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	3401      	adds	r4, #1
 8004e3c:	9305      	str	r3, [sp, #20]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	f04f 0c0a 	mov.w	ip, #10
 8004e44:	4620      	mov	r0, r4
 8004e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e4a:	3a30      	subs	r2, #48	; 0x30
 8004e4c:	2a09      	cmp	r2, #9
 8004e4e:	d903      	bls.n	8004e58 <_svfiprintf_r+0x1a8>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0c5      	beq.n	8004de0 <_svfiprintf_r+0x130>
 8004e54:	9105      	str	r1, [sp, #20]
 8004e56:	e7c3      	b.n	8004de0 <_svfiprintf_r+0x130>
 8004e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e7f0      	b.n	8004e44 <_svfiprintf_r+0x194>
 8004e62:	ab03      	add	r3, sp, #12
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	462a      	mov	r2, r5
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <_svfiprintf_r+0x1f8>)
 8004e6a:	a904      	add	r1, sp, #16
 8004e6c:	4638      	mov	r0, r7
 8004e6e:	f3af 8000 	nop.w
 8004e72:	1c42      	adds	r2, r0, #1
 8004e74:	4606      	mov	r6, r0
 8004e76:	d1d6      	bne.n	8004e26 <_svfiprintf_r+0x176>
 8004e78:	89ab      	ldrh	r3, [r5, #12]
 8004e7a:	065b      	lsls	r3, r3, #25
 8004e7c:	f53f af2c 	bmi.w	8004cd8 <_svfiprintf_r+0x28>
 8004e80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e82:	b01d      	add	sp, #116	; 0x74
 8004e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e88:	ab03      	add	r3, sp, #12
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <_svfiprintf_r+0x1f8>)
 8004e90:	a904      	add	r1, sp, #16
 8004e92:	4638      	mov	r0, r7
 8004e94:	f000 f9d4 	bl	8005240 <_printf_i>
 8004e98:	e7eb      	b.n	8004e72 <_svfiprintf_r+0x1c2>
 8004e9a:	bf00      	nop
 8004e9c:	08005a90 	.word	0x08005a90
 8004ea0:	08005a9a 	.word	0x08005a9a
 8004ea4:	00000000 	.word	0x00000000
 8004ea8:	08004bf9 	.word	0x08004bf9
 8004eac:	08005a96 	.word	0x08005a96

08004eb0 <__sfputc_r>:
 8004eb0:	6893      	ldr	r3, [r2, #8]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	b410      	push	{r4}
 8004eb8:	6093      	str	r3, [r2, #8]
 8004eba:	da08      	bge.n	8004ece <__sfputc_r+0x1e>
 8004ebc:	6994      	ldr	r4, [r2, #24]
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	db01      	blt.n	8004ec6 <__sfputc_r+0x16>
 8004ec2:	290a      	cmp	r1, #10
 8004ec4:	d103      	bne.n	8004ece <__sfputc_r+0x1e>
 8004ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eca:	f7ff ba9d 	b.w	8004408 <__swbuf_r>
 8004ece:	6813      	ldr	r3, [r2, #0]
 8004ed0:	1c58      	adds	r0, r3, #1
 8004ed2:	6010      	str	r0, [r2, #0]
 8004ed4:	7019      	strb	r1, [r3, #0]
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <__sfputs_r>:
 8004ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	460f      	mov	r7, r1
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	18d5      	adds	r5, r2, r3
 8004ee8:	42ac      	cmp	r4, r5
 8004eea:	d101      	bne.n	8004ef0 <__sfputs_r+0x12>
 8004eec:	2000      	movs	r0, #0
 8004eee:	e007      	b.n	8004f00 <__sfputs_r+0x22>
 8004ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef4:	463a      	mov	r2, r7
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff ffda 	bl	8004eb0 <__sfputc_r>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d1f3      	bne.n	8004ee8 <__sfputs_r+0xa>
 8004f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f04 <_vfiprintf_r>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	460d      	mov	r5, r1
 8004f0a:	b09d      	sub	sp, #116	; 0x74
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	4698      	mov	r8, r3
 8004f10:	4606      	mov	r6, r0
 8004f12:	b118      	cbz	r0, 8004f1c <_vfiprintf_r+0x18>
 8004f14:	6983      	ldr	r3, [r0, #24]
 8004f16:	b90b      	cbnz	r3, 8004f1c <_vfiprintf_r+0x18>
 8004f18:	f7ff fc62 	bl	80047e0 <__sinit>
 8004f1c:	4b89      	ldr	r3, [pc, #548]	; (8005144 <_vfiprintf_r+0x240>)
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	d11b      	bne.n	8004f5a <_vfiprintf_r+0x56>
 8004f22:	6875      	ldr	r5, [r6, #4]
 8004f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f26:	07d9      	lsls	r1, r3, #31
 8004f28:	d405      	bmi.n	8004f36 <_vfiprintf_r+0x32>
 8004f2a:	89ab      	ldrh	r3, [r5, #12]
 8004f2c:	059a      	lsls	r2, r3, #22
 8004f2e:	d402      	bmi.n	8004f36 <_vfiprintf_r+0x32>
 8004f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f32:	f7ff fd50 	bl	80049d6 <__retarget_lock_acquire_recursive>
 8004f36:	89ab      	ldrh	r3, [r5, #12]
 8004f38:	071b      	lsls	r3, r3, #28
 8004f3a:	d501      	bpl.n	8004f40 <_vfiprintf_r+0x3c>
 8004f3c:	692b      	ldr	r3, [r5, #16]
 8004f3e:	b9eb      	cbnz	r3, 8004f7c <_vfiprintf_r+0x78>
 8004f40:	4629      	mov	r1, r5
 8004f42:	4630      	mov	r0, r6
 8004f44:	f7ff fab2 	bl	80044ac <__swsetup_r>
 8004f48:	b1c0      	cbz	r0, 8004f7c <_vfiprintf_r+0x78>
 8004f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f4c:	07dc      	lsls	r4, r3, #31
 8004f4e:	d50e      	bpl.n	8004f6e <_vfiprintf_r+0x6a>
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	b01d      	add	sp, #116	; 0x74
 8004f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5a:	4b7b      	ldr	r3, [pc, #492]	; (8005148 <_vfiprintf_r+0x244>)
 8004f5c:	429d      	cmp	r5, r3
 8004f5e:	d101      	bne.n	8004f64 <_vfiprintf_r+0x60>
 8004f60:	68b5      	ldr	r5, [r6, #8]
 8004f62:	e7df      	b.n	8004f24 <_vfiprintf_r+0x20>
 8004f64:	4b79      	ldr	r3, [pc, #484]	; (800514c <_vfiprintf_r+0x248>)
 8004f66:	429d      	cmp	r5, r3
 8004f68:	bf08      	it	eq
 8004f6a:	68f5      	ldreq	r5, [r6, #12]
 8004f6c:	e7da      	b.n	8004f24 <_vfiprintf_r+0x20>
 8004f6e:	89ab      	ldrh	r3, [r5, #12]
 8004f70:	0598      	lsls	r0, r3, #22
 8004f72:	d4ed      	bmi.n	8004f50 <_vfiprintf_r+0x4c>
 8004f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f76:	f7ff fd2f 	bl	80049d8 <__retarget_lock_release_recursive>
 8004f7a:	e7e9      	b.n	8004f50 <_vfiprintf_r+0x4c>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	2320      	movs	r3, #32
 8004f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f8a:	2330      	movs	r3, #48	; 0x30
 8004f8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005150 <_vfiprintf_r+0x24c>
 8004f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f94:	f04f 0901 	mov.w	r9, #1
 8004f98:	4623      	mov	r3, r4
 8004f9a:	469a      	mov	sl, r3
 8004f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa0:	b10a      	cbz	r2, 8004fa6 <_vfiprintf_r+0xa2>
 8004fa2:	2a25      	cmp	r2, #37	; 0x25
 8004fa4:	d1f9      	bne.n	8004f9a <_vfiprintf_r+0x96>
 8004fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8004faa:	d00b      	beq.n	8004fc4 <_vfiprintf_r+0xc0>
 8004fac:	465b      	mov	r3, fp
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f7ff ff93 	bl	8004ede <__sfputs_r>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f000 80aa 	beq.w	8005112 <_vfiprintf_r+0x20e>
 8004fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fc0:	445a      	add	r2, fp
 8004fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8004fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80a2 	beq.w	8005112 <_vfiprintf_r+0x20e>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fd8:	f10a 0a01 	add.w	sl, sl, #1
 8004fdc:	9304      	str	r3, [sp, #16]
 8004fde:	9307      	str	r3, [sp, #28]
 8004fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fe6:	4654      	mov	r4, sl
 8004fe8:	2205      	movs	r2, #5
 8004fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fee:	4858      	ldr	r0, [pc, #352]	; (8005150 <_vfiprintf_r+0x24c>)
 8004ff0:	f7fb f8f6 	bl	80001e0 <memchr>
 8004ff4:	9a04      	ldr	r2, [sp, #16]
 8004ff6:	b9d8      	cbnz	r0, 8005030 <_vfiprintf_r+0x12c>
 8004ff8:	06d1      	lsls	r1, r2, #27
 8004ffa:	bf44      	itt	mi
 8004ffc:	2320      	movmi	r3, #32
 8004ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005002:	0713      	lsls	r3, r2, #28
 8005004:	bf44      	itt	mi
 8005006:	232b      	movmi	r3, #43	; 0x2b
 8005008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800500c:	f89a 3000 	ldrb.w	r3, [sl]
 8005010:	2b2a      	cmp	r3, #42	; 0x2a
 8005012:	d015      	beq.n	8005040 <_vfiprintf_r+0x13c>
 8005014:	9a07      	ldr	r2, [sp, #28]
 8005016:	4654      	mov	r4, sl
 8005018:	2000      	movs	r0, #0
 800501a:	f04f 0c0a 	mov.w	ip, #10
 800501e:	4621      	mov	r1, r4
 8005020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005024:	3b30      	subs	r3, #48	; 0x30
 8005026:	2b09      	cmp	r3, #9
 8005028:	d94e      	bls.n	80050c8 <_vfiprintf_r+0x1c4>
 800502a:	b1b0      	cbz	r0, 800505a <_vfiprintf_r+0x156>
 800502c:	9207      	str	r2, [sp, #28]
 800502e:	e014      	b.n	800505a <_vfiprintf_r+0x156>
 8005030:	eba0 0308 	sub.w	r3, r0, r8
 8005034:	fa09 f303 	lsl.w	r3, r9, r3
 8005038:	4313      	orrs	r3, r2
 800503a:	9304      	str	r3, [sp, #16]
 800503c:	46a2      	mov	sl, r4
 800503e:	e7d2      	b.n	8004fe6 <_vfiprintf_r+0xe2>
 8005040:	9b03      	ldr	r3, [sp, #12]
 8005042:	1d19      	adds	r1, r3, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	9103      	str	r1, [sp, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	bfbb      	ittet	lt
 800504c:	425b      	neglt	r3, r3
 800504e:	f042 0202 	orrlt.w	r2, r2, #2
 8005052:	9307      	strge	r3, [sp, #28]
 8005054:	9307      	strlt	r3, [sp, #28]
 8005056:	bfb8      	it	lt
 8005058:	9204      	strlt	r2, [sp, #16]
 800505a:	7823      	ldrb	r3, [r4, #0]
 800505c:	2b2e      	cmp	r3, #46	; 0x2e
 800505e:	d10c      	bne.n	800507a <_vfiprintf_r+0x176>
 8005060:	7863      	ldrb	r3, [r4, #1]
 8005062:	2b2a      	cmp	r3, #42	; 0x2a
 8005064:	d135      	bne.n	80050d2 <_vfiprintf_r+0x1ce>
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	1d1a      	adds	r2, r3, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	9203      	str	r2, [sp, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	bfb8      	it	lt
 8005072:	f04f 33ff 	movlt.w	r3, #4294967295
 8005076:	3402      	adds	r4, #2
 8005078:	9305      	str	r3, [sp, #20]
 800507a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005160 <_vfiprintf_r+0x25c>
 800507e:	7821      	ldrb	r1, [r4, #0]
 8005080:	2203      	movs	r2, #3
 8005082:	4650      	mov	r0, sl
 8005084:	f7fb f8ac 	bl	80001e0 <memchr>
 8005088:	b140      	cbz	r0, 800509c <_vfiprintf_r+0x198>
 800508a:	2340      	movs	r3, #64	; 0x40
 800508c:	eba0 000a 	sub.w	r0, r0, sl
 8005090:	fa03 f000 	lsl.w	r0, r3, r0
 8005094:	9b04      	ldr	r3, [sp, #16]
 8005096:	4303      	orrs	r3, r0
 8005098:	3401      	adds	r4, #1
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a0:	482c      	ldr	r0, [pc, #176]	; (8005154 <_vfiprintf_r+0x250>)
 80050a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050a6:	2206      	movs	r2, #6
 80050a8:	f7fb f89a 	bl	80001e0 <memchr>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d03f      	beq.n	8005130 <_vfiprintf_r+0x22c>
 80050b0:	4b29      	ldr	r3, [pc, #164]	; (8005158 <_vfiprintf_r+0x254>)
 80050b2:	bb1b      	cbnz	r3, 80050fc <_vfiprintf_r+0x1f8>
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	3307      	adds	r3, #7
 80050b8:	f023 0307 	bic.w	r3, r3, #7
 80050bc:	3308      	adds	r3, #8
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c2:	443b      	add	r3, r7
 80050c4:	9309      	str	r3, [sp, #36]	; 0x24
 80050c6:	e767      	b.n	8004f98 <_vfiprintf_r+0x94>
 80050c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80050cc:	460c      	mov	r4, r1
 80050ce:	2001      	movs	r0, #1
 80050d0:	e7a5      	b.n	800501e <_vfiprintf_r+0x11a>
 80050d2:	2300      	movs	r3, #0
 80050d4:	3401      	adds	r4, #1
 80050d6:	9305      	str	r3, [sp, #20]
 80050d8:	4619      	mov	r1, r3
 80050da:	f04f 0c0a 	mov.w	ip, #10
 80050de:	4620      	mov	r0, r4
 80050e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e4:	3a30      	subs	r2, #48	; 0x30
 80050e6:	2a09      	cmp	r2, #9
 80050e8:	d903      	bls.n	80050f2 <_vfiprintf_r+0x1ee>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0c5      	beq.n	800507a <_vfiprintf_r+0x176>
 80050ee:	9105      	str	r1, [sp, #20]
 80050f0:	e7c3      	b.n	800507a <_vfiprintf_r+0x176>
 80050f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f6:	4604      	mov	r4, r0
 80050f8:	2301      	movs	r3, #1
 80050fa:	e7f0      	b.n	80050de <_vfiprintf_r+0x1da>
 80050fc:	ab03      	add	r3, sp, #12
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	462a      	mov	r2, r5
 8005102:	4b16      	ldr	r3, [pc, #88]	; (800515c <_vfiprintf_r+0x258>)
 8005104:	a904      	add	r1, sp, #16
 8005106:	4630      	mov	r0, r6
 8005108:	f3af 8000 	nop.w
 800510c:	4607      	mov	r7, r0
 800510e:	1c78      	adds	r0, r7, #1
 8005110:	d1d6      	bne.n	80050c0 <_vfiprintf_r+0x1bc>
 8005112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005114:	07d9      	lsls	r1, r3, #31
 8005116:	d405      	bmi.n	8005124 <_vfiprintf_r+0x220>
 8005118:	89ab      	ldrh	r3, [r5, #12]
 800511a:	059a      	lsls	r2, r3, #22
 800511c:	d402      	bmi.n	8005124 <_vfiprintf_r+0x220>
 800511e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005120:	f7ff fc5a 	bl	80049d8 <__retarget_lock_release_recursive>
 8005124:	89ab      	ldrh	r3, [r5, #12]
 8005126:	065b      	lsls	r3, r3, #25
 8005128:	f53f af12 	bmi.w	8004f50 <_vfiprintf_r+0x4c>
 800512c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800512e:	e711      	b.n	8004f54 <_vfiprintf_r+0x50>
 8005130:	ab03      	add	r3, sp, #12
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	462a      	mov	r2, r5
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <_vfiprintf_r+0x258>)
 8005138:	a904      	add	r1, sp, #16
 800513a:	4630      	mov	r0, r6
 800513c:	f000 f880 	bl	8005240 <_printf_i>
 8005140:	e7e4      	b.n	800510c <_vfiprintf_r+0x208>
 8005142:	bf00      	nop
 8005144:	08005a50 	.word	0x08005a50
 8005148:	08005a70 	.word	0x08005a70
 800514c:	08005a30 	.word	0x08005a30
 8005150:	08005a90 	.word	0x08005a90
 8005154:	08005a9a 	.word	0x08005a9a
 8005158:	00000000 	.word	0x00000000
 800515c:	08004edf 	.word	0x08004edf
 8005160:	08005a96 	.word	0x08005a96

08005164 <_printf_common>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	4616      	mov	r6, r2
 800516a:	4699      	mov	r9, r3
 800516c:	688a      	ldr	r2, [r1, #8]
 800516e:	690b      	ldr	r3, [r1, #16]
 8005170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005174:	4293      	cmp	r3, r2
 8005176:	bfb8      	it	lt
 8005178:	4613      	movlt	r3, r2
 800517a:	6033      	str	r3, [r6, #0]
 800517c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005180:	4607      	mov	r7, r0
 8005182:	460c      	mov	r4, r1
 8005184:	b10a      	cbz	r2, 800518a <_printf_common+0x26>
 8005186:	3301      	adds	r3, #1
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	0699      	lsls	r1, r3, #26
 800518e:	bf42      	ittt	mi
 8005190:	6833      	ldrmi	r3, [r6, #0]
 8005192:	3302      	addmi	r3, #2
 8005194:	6033      	strmi	r3, [r6, #0]
 8005196:	6825      	ldr	r5, [r4, #0]
 8005198:	f015 0506 	ands.w	r5, r5, #6
 800519c:	d106      	bne.n	80051ac <_printf_common+0x48>
 800519e:	f104 0a19 	add.w	sl, r4, #25
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	6832      	ldr	r2, [r6, #0]
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	42ab      	cmp	r3, r5
 80051aa:	dc26      	bgt.n	80051fa <_printf_common+0x96>
 80051ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051b0:	1e13      	subs	r3, r2, #0
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	bf18      	it	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	0692      	lsls	r2, r2, #26
 80051ba:	d42b      	bmi.n	8005214 <_printf_common+0xb0>
 80051bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c0:	4649      	mov	r1, r9
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d01e      	beq.n	8005208 <_printf_common+0xa4>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	68e5      	ldr	r5, [r4, #12]
 80051ce:	6832      	ldr	r2, [r6, #0]
 80051d0:	f003 0306 	and.w	r3, r3, #6
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	bf08      	it	eq
 80051d8:	1aad      	subeq	r5, r5, r2
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	6922      	ldr	r2, [r4, #16]
 80051de:	bf0c      	ite	eq
 80051e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e4:	2500      	movne	r5, #0
 80051e6:	4293      	cmp	r3, r2
 80051e8:	bfc4      	itt	gt
 80051ea:	1a9b      	subgt	r3, r3, r2
 80051ec:	18ed      	addgt	r5, r5, r3
 80051ee:	2600      	movs	r6, #0
 80051f0:	341a      	adds	r4, #26
 80051f2:	42b5      	cmp	r5, r6
 80051f4:	d11a      	bne.n	800522c <_printf_common+0xc8>
 80051f6:	2000      	movs	r0, #0
 80051f8:	e008      	b.n	800520c <_printf_common+0xa8>
 80051fa:	2301      	movs	r3, #1
 80051fc:	4652      	mov	r2, sl
 80051fe:	4649      	mov	r1, r9
 8005200:	4638      	mov	r0, r7
 8005202:	47c0      	blx	r8
 8005204:	3001      	adds	r0, #1
 8005206:	d103      	bne.n	8005210 <_printf_common+0xac>
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005210:	3501      	adds	r5, #1
 8005212:	e7c6      	b.n	80051a2 <_printf_common+0x3e>
 8005214:	18e1      	adds	r1, r4, r3
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	2030      	movs	r0, #48	; 0x30
 800521a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800521e:	4422      	add	r2, r4
 8005220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005228:	3302      	adds	r3, #2
 800522a:	e7c7      	b.n	80051bc <_printf_common+0x58>
 800522c:	2301      	movs	r3, #1
 800522e:	4622      	mov	r2, r4
 8005230:	4649      	mov	r1, r9
 8005232:	4638      	mov	r0, r7
 8005234:	47c0      	blx	r8
 8005236:	3001      	adds	r0, #1
 8005238:	d0e6      	beq.n	8005208 <_printf_common+0xa4>
 800523a:	3601      	adds	r6, #1
 800523c:	e7d9      	b.n	80051f2 <_printf_common+0x8e>
	...

08005240 <_printf_i>:
 8005240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	460c      	mov	r4, r1
 8005246:	4691      	mov	r9, r2
 8005248:	7e27      	ldrb	r7, [r4, #24]
 800524a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800524c:	2f78      	cmp	r7, #120	; 0x78
 800524e:	4680      	mov	r8, r0
 8005250:	469a      	mov	sl, r3
 8005252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005256:	d807      	bhi.n	8005268 <_printf_i+0x28>
 8005258:	2f62      	cmp	r7, #98	; 0x62
 800525a:	d80a      	bhi.n	8005272 <_printf_i+0x32>
 800525c:	2f00      	cmp	r7, #0
 800525e:	f000 80d8 	beq.w	8005412 <_printf_i+0x1d2>
 8005262:	2f58      	cmp	r7, #88	; 0x58
 8005264:	f000 80a3 	beq.w	80053ae <_printf_i+0x16e>
 8005268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800526c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005270:	e03a      	b.n	80052e8 <_printf_i+0xa8>
 8005272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005276:	2b15      	cmp	r3, #21
 8005278:	d8f6      	bhi.n	8005268 <_printf_i+0x28>
 800527a:	a001      	add	r0, pc, #4	; (adr r0, 8005280 <_printf_i+0x40>)
 800527c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005280:	080052d9 	.word	0x080052d9
 8005284:	080052ed 	.word	0x080052ed
 8005288:	08005269 	.word	0x08005269
 800528c:	08005269 	.word	0x08005269
 8005290:	08005269 	.word	0x08005269
 8005294:	08005269 	.word	0x08005269
 8005298:	080052ed 	.word	0x080052ed
 800529c:	08005269 	.word	0x08005269
 80052a0:	08005269 	.word	0x08005269
 80052a4:	08005269 	.word	0x08005269
 80052a8:	08005269 	.word	0x08005269
 80052ac:	080053f9 	.word	0x080053f9
 80052b0:	0800531d 	.word	0x0800531d
 80052b4:	080053db 	.word	0x080053db
 80052b8:	08005269 	.word	0x08005269
 80052bc:	08005269 	.word	0x08005269
 80052c0:	0800541b 	.word	0x0800541b
 80052c4:	08005269 	.word	0x08005269
 80052c8:	0800531d 	.word	0x0800531d
 80052cc:	08005269 	.word	0x08005269
 80052d0:	08005269 	.word	0x08005269
 80052d4:	080053e3 	.word	0x080053e3
 80052d8:	680b      	ldr	r3, [r1, #0]
 80052da:	1d1a      	adds	r2, r3, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	600a      	str	r2, [r1, #0]
 80052e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0a3      	b.n	8005434 <_printf_i+0x1f4>
 80052ec:	6825      	ldr	r5, [r4, #0]
 80052ee:	6808      	ldr	r0, [r1, #0]
 80052f0:	062e      	lsls	r6, r5, #24
 80052f2:	f100 0304 	add.w	r3, r0, #4
 80052f6:	d50a      	bpl.n	800530e <_printf_i+0xce>
 80052f8:	6805      	ldr	r5, [r0, #0]
 80052fa:	600b      	str	r3, [r1, #0]
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	da03      	bge.n	8005308 <_printf_i+0xc8>
 8005300:	232d      	movs	r3, #45	; 0x2d
 8005302:	426d      	negs	r5, r5
 8005304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005308:	485e      	ldr	r0, [pc, #376]	; (8005484 <_printf_i+0x244>)
 800530a:	230a      	movs	r3, #10
 800530c:	e019      	b.n	8005342 <_printf_i+0x102>
 800530e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005312:	6805      	ldr	r5, [r0, #0]
 8005314:	600b      	str	r3, [r1, #0]
 8005316:	bf18      	it	ne
 8005318:	b22d      	sxthne	r5, r5
 800531a:	e7ef      	b.n	80052fc <_printf_i+0xbc>
 800531c:	680b      	ldr	r3, [r1, #0]
 800531e:	6825      	ldr	r5, [r4, #0]
 8005320:	1d18      	adds	r0, r3, #4
 8005322:	6008      	str	r0, [r1, #0]
 8005324:	0628      	lsls	r0, r5, #24
 8005326:	d501      	bpl.n	800532c <_printf_i+0xec>
 8005328:	681d      	ldr	r5, [r3, #0]
 800532a:	e002      	b.n	8005332 <_printf_i+0xf2>
 800532c:	0669      	lsls	r1, r5, #25
 800532e:	d5fb      	bpl.n	8005328 <_printf_i+0xe8>
 8005330:	881d      	ldrh	r5, [r3, #0]
 8005332:	4854      	ldr	r0, [pc, #336]	; (8005484 <_printf_i+0x244>)
 8005334:	2f6f      	cmp	r7, #111	; 0x6f
 8005336:	bf0c      	ite	eq
 8005338:	2308      	moveq	r3, #8
 800533a:	230a      	movne	r3, #10
 800533c:	2100      	movs	r1, #0
 800533e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005342:	6866      	ldr	r6, [r4, #4]
 8005344:	60a6      	str	r6, [r4, #8]
 8005346:	2e00      	cmp	r6, #0
 8005348:	bfa2      	ittt	ge
 800534a:	6821      	ldrge	r1, [r4, #0]
 800534c:	f021 0104 	bicge.w	r1, r1, #4
 8005350:	6021      	strge	r1, [r4, #0]
 8005352:	b90d      	cbnz	r5, 8005358 <_printf_i+0x118>
 8005354:	2e00      	cmp	r6, #0
 8005356:	d04d      	beq.n	80053f4 <_printf_i+0x1b4>
 8005358:	4616      	mov	r6, r2
 800535a:	fbb5 f1f3 	udiv	r1, r5, r3
 800535e:	fb03 5711 	mls	r7, r3, r1, r5
 8005362:	5dc7      	ldrb	r7, [r0, r7]
 8005364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005368:	462f      	mov	r7, r5
 800536a:	42bb      	cmp	r3, r7
 800536c:	460d      	mov	r5, r1
 800536e:	d9f4      	bls.n	800535a <_printf_i+0x11a>
 8005370:	2b08      	cmp	r3, #8
 8005372:	d10b      	bne.n	800538c <_printf_i+0x14c>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	07df      	lsls	r7, r3, #31
 8005378:	d508      	bpl.n	800538c <_printf_i+0x14c>
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	6861      	ldr	r1, [r4, #4]
 800537e:	4299      	cmp	r1, r3
 8005380:	bfde      	ittt	le
 8005382:	2330      	movle	r3, #48	; 0x30
 8005384:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005388:	f106 36ff 	addle.w	r6, r6, #4294967295
 800538c:	1b92      	subs	r2, r2, r6
 800538e:	6122      	str	r2, [r4, #16]
 8005390:	f8cd a000 	str.w	sl, [sp]
 8005394:	464b      	mov	r3, r9
 8005396:	aa03      	add	r2, sp, #12
 8005398:	4621      	mov	r1, r4
 800539a:	4640      	mov	r0, r8
 800539c:	f7ff fee2 	bl	8005164 <_printf_common>
 80053a0:	3001      	adds	r0, #1
 80053a2:	d14c      	bne.n	800543e <_printf_i+0x1fe>
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	b004      	add	sp, #16
 80053aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ae:	4835      	ldr	r0, [pc, #212]	; (8005484 <_printf_i+0x244>)
 80053b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	680e      	ldr	r6, [r1, #0]
 80053b8:	061f      	lsls	r7, r3, #24
 80053ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80053be:	600e      	str	r6, [r1, #0]
 80053c0:	d514      	bpl.n	80053ec <_printf_i+0x1ac>
 80053c2:	07d9      	lsls	r1, r3, #31
 80053c4:	bf44      	itt	mi
 80053c6:	f043 0320 	orrmi.w	r3, r3, #32
 80053ca:	6023      	strmi	r3, [r4, #0]
 80053cc:	b91d      	cbnz	r5, 80053d6 <_printf_i+0x196>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	f023 0320 	bic.w	r3, r3, #32
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	2310      	movs	r3, #16
 80053d8:	e7b0      	b.n	800533c <_printf_i+0xfc>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	f043 0320 	orr.w	r3, r3, #32
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	2378      	movs	r3, #120	; 0x78
 80053e4:	4828      	ldr	r0, [pc, #160]	; (8005488 <_printf_i+0x248>)
 80053e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ea:	e7e3      	b.n	80053b4 <_printf_i+0x174>
 80053ec:	065e      	lsls	r6, r3, #25
 80053ee:	bf48      	it	mi
 80053f0:	b2ad      	uxthmi	r5, r5
 80053f2:	e7e6      	b.n	80053c2 <_printf_i+0x182>
 80053f4:	4616      	mov	r6, r2
 80053f6:	e7bb      	b.n	8005370 <_printf_i+0x130>
 80053f8:	680b      	ldr	r3, [r1, #0]
 80053fa:	6826      	ldr	r6, [r4, #0]
 80053fc:	6960      	ldr	r0, [r4, #20]
 80053fe:	1d1d      	adds	r5, r3, #4
 8005400:	600d      	str	r5, [r1, #0]
 8005402:	0635      	lsls	r5, r6, #24
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	d501      	bpl.n	800540c <_printf_i+0x1cc>
 8005408:	6018      	str	r0, [r3, #0]
 800540a:	e002      	b.n	8005412 <_printf_i+0x1d2>
 800540c:	0671      	lsls	r1, r6, #25
 800540e:	d5fb      	bpl.n	8005408 <_printf_i+0x1c8>
 8005410:	8018      	strh	r0, [r3, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	4616      	mov	r6, r2
 8005418:	e7ba      	b.n	8005390 <_printf_i+0x150>
 800541a:	680b      	ldr	r3, [r1, #0]
 800541c:	1d1a      	adds	r2, r3, #4
 800541e:	600a      	str	r2, [r1, #0]
 8005420:	681e      	ldr	r6, [r3, #0]
 8005422:	6862      	ldr	r2, [r4, #4]
 8005424:	2100      	movs	r1, #0
 8005426:	4630      	mov	r0, r6
 8005428:	f7fa feda 	bl	80001e0 <memchr>
 800542c:	b108      	cbz	r0, 8005432 <_printf_i+0x1f2>
 800542e:	1b80      	subs	r0, r0, r6
 8005430:	6060      	str	r0, [r4, #4]
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	2300      	movs	r3, #0
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543c:	e7a8      	b.n	8005390 <_printf_i+0x150>
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	4632      	mov	r2, r6
 8005442:	4649      	mov	r1, r9
 8005444:	4640      	mov	r0, r8
 8005446:	47d0      	blx	sl
 8005448:	3001      	adds	r0, #1
 800544a:	d0ab      	beq.n	80053a4 <_printf_i+0x164>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	079b      	lsls	r3, r3, #30
 8005450:	d413      	bmi.n	800547a <_printf_i+0x23a>
 8005452:	68e0      	ldr	r0, [r4, #12]
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	4298      	cmp	r0, r3
 8005458:	bfb8      	it	lt
 800545a:	4618      	movlt	r0, r3
 800545c:	e7a4      	b.n	80053a8 <_printf_i+0x168>
 800545e:	2301      	movs	r3, #1
 8005460:	4632      	mov	r2, r6
 8005462:	4649      	mov	r1, r9
 8005464:	4640      	mov	r0, r8
 8005466:	47d0      	blx	sl
 8005468:	3001      	adds	r0, #1
 800546a:	d09b      	beq.n	80053a4 <_printf_i+0x164>
 800546c:	3501      	adds	r5, #1
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	9903      	ldr	r1, [sp, #12]
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	42ab      	cmp	r3, r5
 8005476:	dcf2      	bgt.n	800545e <_printf_i+0x21e>
 8005478:	e7eb      	b.n	8005452 <_printf_i+0x212>
 800547a:	2500      	movs	r5, #0
 800547c:	f104 0619 	add.w	r6, r4, #25
 8005480:	e7f5      	b.n	800546e <_printf_i+0x22e>
 8005482:	bf00      	nop
 8005484:	08005aa1 	.word	0x08005aa1
 8005488:	08005ab2 	.word	0x08005ab2

0800548c <__srget_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	460c      	mov	r4, r1
 8005490:	4605      	mov	r5, r0
 8005492:	b118      	cbz	r0, 800549c <__srget_r+0x10>
 8005494:	6983      	ldr	r3, [r0, #24]
 8005496:	b90b      	cbnz	r3, 800549c <__srget_r+0x10>
 8005498:	f7ff f9a2 	bl	80047e0 <__sinit>
 800549c:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <__srget_r+0x4c>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	d10d      	bne.n	80054be <__srget_r+0x32>
 80054a2:	686c      	ldr	r4, [r5, #4]
 80054a4:	4621      	mov	r1, r4
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 f93c 	bl	8005724 <__srefill_r>
 80054ac:	b988      	cbnz	r0, 80054d2 <__srget_r+0x46>
 80054ae:	6863      	ldr	r3, [r4, #4]
 80054b0:	3b01      	subs	r3, #1
 80054b2:	6063      	str	r3, [r4, #4]
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	7818      	ldrb	r0, [r3, #0]
 80054bc:	bd38      	pop	{r3, r4, r5, pc}
 80054be:	4b07      	ldr	r3, [pc, #28]	; (80054dc <__srget_r+0x50>)
 80054c0:	429c      	cmp	r4, r3
 80054c2:	d101      	bne.n	80054c8 <__srget_r+0x3c>
 80054c4:	68ac      	ldr	r4, [r5, #8]
 80054c6:	e7ed      	b.n	80054a4 <__srget_r+0x18>
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <__srget_r+0x54>)
 80054ca:	429c      	cmp	r4, r3
 80054cc:	bf08      	it	eq
 80054ce:	68ec      	ldreq	r4, [r5, #12]
 80054d0:	e7e8      	b.n	80054a4 <__srget_r+0x18>
 80054d2:	f04f 30ff 	mov.w	r0, #4294967295
 80054d6:	e7f1      	b.n	80054bc <__srget_r+0x30>
 80054d8:	08005a50 	.word	0x08005a50
 80054dc:	08005a70 	.word	0x08005a70
 80054e0:	08005a30 	.word	0x08005a30

080054e4 <_sbrk_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4d06      	ldr	r5, [pc, #24]	; (8005500 <_sbrk_r+0x1c>)
 80054e8:	2300      	movs	r3, #0
 80054ea:	4604      	mov	r4, r0
 80054ec:	4608      	mov	r0, r1
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	f7fb ff1c 	bl	800132c <_sbrk>
 80054f4:	1c43      	adds	r3, r0, #1
 80054f6:	d102      	bne.n	80054fe <_sbrk_r+0x1a>
 80054f8:	682b      	ldr	r3, [r5, #0]
 80054fa:	b103      	cbz	r3, 80054fe <_sbrk_r+0x1a>
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	2000029c 	.word	0x2000029c

08005504 <__sread>:
 8005504:	b510      	push	{r4, lr}
 8005506:	460c      	mov	r4, r1
 8005508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550c:	f000 f8ee 	bl	80056ec <_read_r>
 8005510:	2800      	cmp	r0, #0
 8005512:	bfab      	itete	ge
 8005514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005516:	89a3      	ldrhlt	r3, [r4, #12]
 8005518:	181b      	addge	r3, r3, r0
 800551a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800551e:	bfac      	ite	ge
 8005520:	6563      	strge	r3, [r4, #84]	; 0x54
 8005522:	81a3      	strhlt	r3, [r4, #12]
 8005524:	bd10      	pop	{r4, pc}

08005526 <__swrite>:
 8005526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552a:	461f      	mov	r7, r3
 800552c:	898b      	ldrh	r3, [r1, #12]
 800552e:	05db      	lsls	r3, r3, #23
 8005530:	4605      	mov	r5, r0
 8005532:	460c      	mov	r4, r1
 8005534:	4616      	mov	r6, r2
 8005536:	d505      	bpl.n	8005544 <__swrite+0x1e>
 8005538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553c:	2302      	movs	r3, #2
 800553e:	2200      	movs	r2, #0
 8005540:	f000 f868 	bl	8005614 <_lseek_r>
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800554a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800554e:	81a3      	strh	r3, [r4, #12]
 8005550:	4632      	mov	r2, r6
 8005552:	463b      	mov	r3, r7
 8005554:	4628      	mov	r0, r5
 8005556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800555a:	f000 b817 	b.w	800558c <_write_r>

0800555e <__sseek>:
 800555e:	b510      	push	{r4, lr}
 8005560:	460c      	mov	r4, r1
 8005562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005566:	f000 f855 	bl	8005614 <_lseek_r>
 800556a:	1c43      	adds	r3, r0, #1
 800556c:	89a3      	ldrh	r3, [r4, #12]
 800556e:	bf15      	itete	ne
 8005570:	6560      	strne	r0, [r4, #84]	; 0x54
 8005572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800557a:	81a3      	strheq	r3, [r4, #12]
 800557c:	bf18      	it	ne
 800557e:	81a3      	strhne	r3, [r4, #12]
 8005580:	bd10      	pop	{r4, pc}

08005582 <__sclose>:
 8005582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005586:	f000 b813 	b.w	80055b0 <_close_r>
	...

0800558c <_write_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4d07      	ldr	r5, [pc, #28]	; (80055ac <_write_r+0x20>)
 8005590:	4604      	mov	r4, r0
 8005592:	4608      	mov	r0, r1
 8005594:	4611      	mov	r1, r2
 8005596:	2200      	movs	r2, #0
 8005598:	602a      	str	r2, [r5, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	f7fb fe70 	bl	8001280 <_write>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d102      	bne.n	80055aa <_write_r+0x1e>
 80055a4:	682b      	ldr	r3, [r5, #0]
 80055a6:	b103      	cbz	r3, 80055aa <_write_r+0x1e>
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	2000029c 	.word	0x2000029c

080055b0 <_close_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d06      	ldr	r5, [pc, #24]	; (80055cc <_close_r+0x1c>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4604      	mov	r4, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	f7fb fe82 	bl	80012c4 <_close>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_close_r+0x1a>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_close_r+0x1a>
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	2000029c 	.word	0x2000029c

080055d0 <_fstat_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	; (80055f0 <_fstat_r+0x20>)
 80055d4:	2300      	movs	r3, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	f7fb fe7d 	bl	80012dc <_fstat>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	d102      	bne.n	80055ec <_fstat_r+0x1c>
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	b103      	cbz	r3, 80055ec <_fstat_r+0x1c>
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	bd38      	pop	{r3, r4, r5, pc}
 80055ee:	bf00      	nop
 80055f0:	2000029c 	.word	0x2000029c

080055f4 <_isatty_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d06      	ldr	r5, [pc, #24]	; (8005610 <_isatty_r+0x1c>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fb fe7c 	bl	80012fc <_isatty>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_isatty_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_isatty_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	2000029c 	.word	0x2000029c

08005614 <_lseek_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	; (8005634 <_lseek_r+0x20>)
 8005618:	4604      	mov	r4, r0
 800561a:	4608      	mov	r0, r1
 800561c:	4611      	mov	r1, r2
 800561e:	2200      	movs	r2, #0
 8005620:	602a      	str	r2, [r5, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f7fb fe75 	bl	8001312 <_lseek>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_lseek_r+0x1e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_lseek_r+0x1e>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	2000029c 	.word	0x2000029c

08005638 <memcpy>:
 8005638:	440a      	add	r2, r1
 800563a:	4291      	cmp	r1, r2
 800563c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005640:	d100      	bne.n	8005644 <memcpy+0xc>
 8005642:	4770      	bx	lr
 8005644:	b510      	push	{r4, lr}
 8005646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800564a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800564e:	4291      	cmp	r1, r2
 8005650:	d1f9      	bne.n	8005646 <memcpy+0xe>
 8005652:	bd10      	pop	{r4, pc}

08005654 <memmove>:
 8005654:	4288      	cmp	r0, r1
 8005656:	b510      	push	{r4, lr}
 8005658:	eb01 0402 	add.w	r4, r1, r2
 800565c:	d902      	bls.n	8005664 <memmove+0x10>
 800565e:	4284      	cmp	r4, r0
 8005660:	4623      	mov	r3, r4
 8005662:	d807      	bhi.n	8005674 <memmove+0x20>
 8005664:	1e43      	subs	r3, r0, #1
 8005666:	42a1      	cmp	r1, r4
 8005668:	d008      	beq.n	800567c <memmove+0x28>
 800566a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800566e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005672:	e7f8      	b.n	8005666 <memmove+0x12>
 8005674:	4402      	add	r2, r0
 8005676:	4601      	mov	r1, r0
 8005678:	428a      	cmp	r2, r1
 800567a:	d100      	bne.n	800567e <memmove+0x2a>
 800567c:	bd10      	pop	{r4, pc}
 800567e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005686:	e7f7      	b.n	8005678 <memmove+0x24>

08005688 <__malloc_lock>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__malloc_lock+0x8>)
 800568a:	f7ff b9a4 	b.w	80049d6 <__retarget_lock_acquire_recursive>
 800568e:	bf00      	nop
 8005690:	20000294 	.word	0x20000294

08005694 <__malloc_unlock>:
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <__malloc_unlock+0x8>)
 8005696:	f7ff b99f 	b.w	80049d8 <__retarget_lock_release_recursive>
 800569a:	bf00      	nop
 800569c:	20000294 	.word	0x20000294

080056a0 <_realloc_r>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	4607      	mov	r7, r0
 80056a4:	4614      	mov	r4, r2
 80056a6:	460e      	mov	r6, r1
 80056a8:	b921      	cbnz	r1, 80056b4 <_realloc_r+0x14>
 80056aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056ae:	4611      	mov	r1, r2
 80056b0:	f7ff ba48 	b.w	8004b44 <_malloc_r>
 80056b4:	b922      	cbnz	r2, 80056c0 <_realloc_r+0x20>
 80056b6:	f7ff f9f5 	bl	8004aa4 <_free_r>
 80056ba:	4625      	mov	r5, r4
 80056bc:	4628      	mov	r0, r5
 80056be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c0:	f000 f8ba 	bl	8005838 <_malloc_usable_size_r>
 80056c4:	42a0      	cmp	r0, r4
 80056c6:	d20f      	bcs.n	80056e8 <_realloc_r+0x48>
 80056c8:	4621      	mov	r1, r4
 80056ca:	4638      	mov	r0, r7
 80056cc:	f7ff fa3a 	bl	8004b44 <_malloc_r>
 80056d0:	4605      	mov	r5, r0
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d0f2      	beq.n	80056bc <_realloc_r+0x1c>
 80056d6:	4631      	mov	r1, r6
 80056d8:	4622      	mov	r2, r4
 80056da:	f7ff ffad 	bl	8005638 <memcpy>
 80056de:	4631      	mov	r1, r6
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff f9df 	bl	8004aa4 <_free_r>
 80056e6:	e7e9      	b.n	80056bc <_realloc_r+0x1c>
 80056e8:	4635      	mov	r5, r6
 80056ea:	e7e7      	b.n	80056bc <_realloc_r+0x1c>

080056ec <_read_r>:
 80056ec:	b538      	push	{r3, r4, r5, lr}
 80056ee:	4d07      	ldr	r5, [pc, #28]	; (800570c <_read_r+0x20>)
 80056f0:	4604      	mov	r4, r0
 80056f2:	4608      	mov	r0, r1
 80056f4:	4611      	mov	r1, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	602a      	str	r2, [r5, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f7fb fda2 	bl	8001244 <_read>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d102      	bne.n	800570a <_read_r+0x1e>
 8005704:	682b      	ldr	r3, [r5, #0]
 8005706:	b103      	cbz	r3, 800570a <_read_r+0x1e>
 8005708:	6023      	str	r3, [r4, #0]
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	2000029c 	.word	0x2000029c

08005710 <lflush>:
 8005710:	8983      	ldrh	r3, [r0, #12]
 8005712:	f003 0309 	and.w	r3, r3, #9
 8005716:	2b09      	cmp	r3, #9
 8005718:	d101      	bne.n	800571e <lflush+0xe>
 800571a:	f7fe bff7 	b.w	800470c <fflush>
 800571e:	2000      	movs	r0, #0
 8005720:	4770      	bx	lr
	...

08005724 <__srefill_r>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	460c      	mov	r4, r1
 8005728:	4605      	mov	r5, r0
 800572a:	b118      	cbz	r0, 8005734 <__srefill_r+0x10>
 800572c:	6983      	ldr	r3, [r0, #24]
 800572e:	b90b      	cbnz	r3, 8005734 <__srefill_r+0x10>
 8005730:	f7ff f856 	bl	80047e0 <__sinit>
 8005734:	4b3b      	ldr	r3, [pc, #236]	; (8005824 <__srefill_r+0x100>)
 8005736:	429c      	cmp	r4, r3
 8005738:	d10a      	bne.n	8005750 <__srefill_r+0x2c>
 800573a:	686c      	ldr	r4, [r5, #4]
 800573c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005740:	2300      	movs	r3, #0
 8005742:	6063      	str	r3, [r4, #4]
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	069e      	lsls	r6, r3, #26
 8005748:	d50c      	bpl.n	8005764 <__srefill_r+0x40>
 800574a:	f04f 30ff 	mov.w	r0, #4294967295
 800574e:	e066      	b.n	800581e <__srefill_r+0xfa>
 8005750:	4b35      	ldr	r3, [pc, #212]	; (8005828 <__srefill_r+0x104>)
 8005752:	429c      	cmp	r4, r3
 8005754:	d101      	bne.n	800575a <__srefill_r+0x36>
 8005756:	68ac      	ldr	r4, [r5, #8]
 8005758:	e7f0      	b.n	800573c <__srefill_r+0x18>
 800575a:	4b34      	ldr	r3, [pc, #208]	; (800582c <__srefill_r+0x108>)
 800575c:	429c      	cmp	r4, r3
 800575e:	bf08      	it	eq
 8005760:	68ec      	ldreq	r4, [r5, #12]
 8005762:	e7eb      	b.n	800573c <__srefill_r+0x18>
 8005764:	0758      	lsls	r0, r3, #29
 8005766:	d448      	bmi.n	80057fa <__srefill_r+0xd6>
 8005768:	06d9      	lsls	r1, r3, #27
 800576a:	d405      	bmi.n	8005778 <__srefill_r+0x54>
 800576c:	2309      	movs	r3, #9
 800576e:	602b      	str	r3, [r5, #0]
 8005770:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005774:	81a3      	strh	r3, [r4, #12]
 8005776:	e7e8      	b.n	800574a <__srefill_r+0x26>
 8005778:	071a      	lsls	r2, r3, #28
 800577a:	d50b      	bpl.n	8005794 <__srefill_r+0x70>
 800577c:	4621      	mov	r1, r4
 800577e:	4628      	mov	r0, r5
 8005780:	f7fe ff88 	bl	8004694 <_fflush_r>
 8005784:	2800      	cmp	r0, #0
 8005786:	d1e0      	bne.n	800574a <__srefill_r+0x26>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	60a0      	str	r0, [r4, #8]
 800578c:	f023 0308 	bic.w	r3, r3, #8
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	61a0      	str	r0, [r4, #24]
 8005794:	89a3      	ldrh	r3, [r4, #12]
 8005796:	f043 0304 	orr.w	r3, r3, #4
 800579a:	81a3      	strh	r3, [r4, #12]
 800579c:	6923      	ldr	r3, [r4, #16]
 800579e:	b91b      	cbnz	r3, 80057a8 <__srefill_r+0x84>
 80057a0:	4621      	mov	r1, r4
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7ff f93e 	bl	8004a24 <__smakebuf_r>
 80057a8:	89a6      	ldrh	r6, [r4, #12]
 80057aa:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80057ae:	07b3      	lsls	r3, r6, #30
 80057b0:	d00f      	beq.n	80057d2 <__srefill_r+0xae>
 80057b2:	2301      	movs	r3, #1
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <__srefill_r+0x10c>)
 80057b8:	491e      	ldr	r1, [pc, #120]	; (8005834 <__srefill_r+0x110>)
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	f006 0609 	and.w	r6, r6, #9
 80057c0:	f7ff f88c 	bl	80048dc <_fwalk>
 80057c4:	2e09      	cmp	r6, #9
 80057c6:	81a7      	strh	r7, [r4, #12]
 80057c8:	d103      	bne.n	80057d2 <__srefill_r+0xae>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7fe fedb 	bl	8004588 <__sflush_r>
 80057d2:	6922      	ldr	r2, [r4, #16]
 80057d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80057d6:	6963      	ldr	r3, [r4, #20]
 80057d8:	6a21      	ldr	r1, [r4, #32]
 80057da:	6022      	str	r2, [r4, #0]
 80057dc:	4628      	mov	r0, r5
 80057de:	47b0      	blx	r6
 80057e0:	2800      	cmp	r0, #0
 80057e2:	6060      	str	r0, [r4, #4]
 80057e4:	dc1c      	bgt.n	8005820 <__srefill_r+0xfc>
 80057e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ea:	bf17      	itett	ne
 80057ec:	2200      	movne	r2, #0
 80057ee:	f043 0320 	orreq.w	r3, r3, #32
 80057f2:	6062      	strne	r2, [r4, #4]
 80057f4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80057f8:	e7bc      	b.n	8005774 <__srefill_r+0x50>
 80057fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057fc:	2900      	cmp	r1, #0
 80057fe:	d0cd      	beq.n	800579c <__srefill_r+0x78>
 8005800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005804:	4299      	cmp	r1, r3
 8005806:	d002      	beq.n	800580e <__srefill_r+0xea>
 8005808:	4628      	mov	r0, r5
 800580a:	f7ff f94b 	bl	8004aa4 <_free_r>
 800580e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005810:	6063      	str	r3, [r4, #4]
 8005812:	2000      	movs	r0, #0
 8005814:	6360      	str	r0, [r4, #52]	; 0x34
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0c0      	beq.n	800579c <__srefill_r+0x78>
 800581a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005820:	2000      	movs	r0, #0
 8005822:	e7fc      	b.n	800581e <__srefill_r+0xfa>
 8005824:	08005a50 	.word	0x08005a50
 8005828:	08005a70 	.word	0x08005a70
 800582c:	08005a30 	.word	0x08005a30
 8005830:	08005a2c 	.word	0x08005a2c
 8005834:	08005711 	.word	0x08005711

08005838 <_malloc_usable_size_r>:
 8005838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800583c:	1f18      	subs	r0, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	bfbc      	itt	lt
 8005842:	580b      	ldrlt	r3, [r1, r0]
 8005844:	18c0      	addlt	r0, r0, r3
 8005846:	4770      	bx	lr

08005848 <_init>:
 8005848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584a:	bf00      	nop
 800584c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584e:	bc08      	pop	{r3}
 8005850:	469e      	mov	lr, r3
 8005852:	4770      	bx	lr

08005854 <_fini>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	bf00      	nop
 8005858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585a:	bc08      	pop	{r3}
 800585c:	469e      	mov	lr, r3
 800585e:	4770      	bx	lr
