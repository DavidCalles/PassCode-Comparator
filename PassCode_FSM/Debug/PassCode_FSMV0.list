
PassCode_FSMV0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050f4  080050f4  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050fc  080050fc  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08005104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000138  0800523c  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  0800523c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b06  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252d  00000000  00000000  00032c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000351a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  000361b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022615  00000000  00000000  000370d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001112a  00000000  00000000  000596ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce1c6  00000000  00000000  0006a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001389dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c7c  00000000  00000000  00138a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000138 	.word	0x20000138
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f30 	.word	0x08004f30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000013c 	.word	0x2000013c
 80001cc:	08004f30 	.word	0x08004f30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
			{"0006", "Visitor6"},
			{"0007", "Visitor7"},
			{"0008", "Visitor8"}
	};
	// Initial setup for fsm
	STATE_T state = RECEIVING_PASS;	//Initiate in state 0
 800056e:	2300      	movs	r3, #0
 8000570:	73fb      	strb	r3, [r7, #15]
	uint8_t n = 0;					//Index of input character
 8000572:	2300      	movs	r3, #0
 8000574:	73bb      	strb	r3, [r7, #14]
	int16_t ch;						//Input character
	uint8_t cPass = 0;				//Index of checked passcode
 8000576:	2300      	movs	r3, #0
 8000578:	72fb      	strb	r3, [r7, #11]
	COMPARISON result = NOT_EQUAL;	//Result of comparing 2 strings
 800057a:	2301      	movs	r3, #1
 800057c:	72bb      	strb	r3, [r7, #10]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800057e:	f000 fcac 	bl	8000eda <HAL_Init>
	/* Configure the system clock */
	SystemClock_Config();
 8000582:	f000 f8df 	bl	8000744 <SystemClock_Config>
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000586:	f000 fa1b 	bl	80009c0 <MX_GPIO_Init>
	MX_DMA_Init();
 800058a:	f000 f9fb 	bl	8000984 <MX_DMA_Init>
	MX_DAC1_Init();
 800058e:	f000 f94b 	bl	8000828 <MX_DAC1_Init>
	MX_USART2_UART_Init();
 8000592:	f000 f9c7 	bl	8000924 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000596:	f000 f979 	bl	800088c <MX_TIM2_Init>

	/* USER CODE BEGIN 2 */
	printf("Hello User!\r\n");
 800059a:	484e      	ldr	r0, [pc, #312]	; (80006d4 <main+0x16c>)
 800059c:	f003 fc52 	bl	8003e44 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		switch(state){
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	f200 8093 	bhi.w	80006ce <main+0x166>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <main+0x48>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005c1 	.word	0x080005c1
 80005b4:	080005eb 	.word	0x080005eb
 80005b8:	08000649 	.word	0x08000649
 80005bc:	08000685 	.word	0x08000685
			// State 0
			case RECEIVING_PASS:{
				// Pass within correct size
				if(n < (MAX_PASS_SIZE+1)){
 80005c0:	7bbb      	ldrb	r3, [r7, #14]
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d806      	bhi.n	80005d4 <main+0x6c>
					ch = getchar();	// Get character
 80005c6:	f003 fb79 	bl	8003cbc <getchar>
 80005ca:	4603      	mov	r3, r0
 80005cc:	81bb      	strh	r3, [r7, #12]
					state = CHECKING_PASS;
 80005ce:	2301      	movs	r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
				else{
					printf("Input is too long, Try again!: %c \r\n",ch);
					n = 0;
					state = RECEIVING_PASS;
				}
				break;
 80005d2:	e07e      	b.n	80006d2 <main+0x16a>
					printf("Input is too long, Try again!: %c \r\n",ch);
 80005d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005d8:	4619      	mov	r1, r3
 80005da:	483f      	ldr	r0, [pc, #252]	; (80006d8 <main+0x170>)
 80005dc:	f003 fbac 	bl	8003d38 <iprintf>
					n = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	73bb      	strb	r3, [r7, #14]
					state = RECEIVING_PASS;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]
				break;
 80005e8:	e073      	b.n	80006d2 <main+0x16a>
			}// State 0

			// State 1
			case CHECKING_PASS:{
				// Normal character received
				if( ch != MY_EOF ){
 80005ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005ee:	2b0d      	cmp	r3, #13
 80005f0:	d00d      	beq.n	800060e <main+0xa6>
					myPass[n] = (uint8_t)ch;
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	89ba      	ldrh	r2, [r7, #12]
 80005f6:	b2d2      	uxtb	r2, r2
 80005f8:	f107 0110 	add.w	r1, r7, #16
 80005fc:	440b      	add	r3, r1
 80005fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
					++n;
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	3301      	adds	r3, #1
 8000606:	73bb      	strb	r3, [r7, #14]
					state = RECEIVING_PASS;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
				else{
					printf("Input is too short, Try again! \r\n");
					n = 0;
					state = RECEIVING_PASS;
				}
				break;
 800060c:	e061      	b.n	80006d2 <main+0x16a>
				else if( (ch == MY_EOF) && (n == (MAX_PASS_SIZE)) ){
 800060e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000612:	2b0d      	cmp	r3, #13
 8000614:	d110      	bne.n	8000638 <main+0xd0>
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	2b04      	cmp	r3, #4
 800061a:	d10d      	bne.n	8000638 <main+0xd0>
					cPass = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	72fb      	strb	r3, [r7, #11]
					printf("Input is: %s \r\n", myPass);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	482d      	ldr	r0, [pc, #180]	; (80006dc <main+0x174>)
 8000626:	f003 fb87 	bl	8003d38 <iprintf>
					printf("Elements: %d \r\n", sizeof(myPass));
 800062a:	2104      	movs	r1, #4
 800062c:	482c      	ldr	r0, [pc, #176]	; (80006e0 <main+0x178>)
 800062e:	f003 fb83 	bl	8003d38 <iprintf>
					state = COMPARING_PASS;
 8000632:	2302      	movs	r3, #2
 8000634:	73fb      	strb	r3, [r7, #15]
				break;
 8000636:	e04c      	b.n	80006d2 <main+0x16a>
					printf("Input is too short, Try again! \r\n");
 8000638:	482a      	ldr	r0, [pc, #168]	; (80006e4 <main+0x17c>)
 800063a:	f003 fc03 	bl	8003e44 <puts>
					n = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	73bb      	strb	r3, [r7, #14]
					state = RECEIVING_PASS;
 8000642:	2300      	movs	r3, #0
 8000644:	73fb      	strb	r3, [r7, #15]
				break;
 8000646:	e044      	b.n	80006d2 <main+0x16a>
			}// State 1

			// State 2
			case COMPARING_PASS:{
				// Not all passwords have been checked
				if( cPass < NUM_PASSCODES ){
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	2b09      	cmp	r3, #9
 800064c:	d810      	bhi.n	8000670 <main+0x108>
					// Compare strings
					result = StringCompare(myPass, db[cPass].pass, MAX_PASS_SIZE);
 800064e:	7afa      	ldrb	r2, [r7, #11]
 8000650:	4613      	mov	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4a23      	ldr	r2, [pc, #140]	; (80006e8 <main+0x180>)
 800065a:	1899      	adds	r1, r3, r2
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2204      	movs	r2, #4
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f849 	bl	80006f8 <StringCompare>
 8000666:	4603      	mov	r3, r0
 8000668:	72bb      	strb	r3, [r7, #10]
					state = GIVING_ACCESS;
 800066a:	2303      	movs	r3, #3
 800066c:	73fb      	strb	r3, [r7, #15]
					//RED signal
					cPass = 0;
					n = 0;
					state = RECEIVING_PASS;
				}
				break;
 800066e:	e030      	b.n	80006d2 <main+0x16a>
					printf("Pass-code Incorrect! \r\n");
 8000670:	481e      	ldr	r0, [pc, #120]	; (80006ec <main+0x184>)
 8000672:	f003 fbe7 	bl	8003e44 <puts>
					cPass = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	72fb      	strb	r3, [r7, #11]
					n = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	73bb      	strb	r3, [r7, #14]
					state = RECEIVING_PASS;
 800067e:	2300      	movs	r3, #0
 8000680:	73fb      	strb	r3, [r7, #15]
				break;
 8000682:	e026      	b.n	80006d2 <main+0x16a>
			}// State 2

			// State 3
			case GIVING_ACCESS:{
				// Pass-codes are not equal
				if(result == NOT_EQUAL){
 8000684:	7abb      	ldrb	r3, [r7, #10]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d105      	bne.n	8000696 <main+0x12e>
					++cPass;
 800068a:	7afb      	ldrb	r3, [r7, #11]
 800068c:	3301      	adds	r3, #1
 800068e:	72fb      	strb	r3, [r7, #11]
					state = COMPARING_PASS;
 8000690:	2302      	movs	r3, #2
 8000692:	73fb      	strb	r3, [r7, #15]
					n = 0;
					cPass = 0;
					result = NOT_EQUAL;
					state = RECEIVING_PASS;
				}
				break;
 8000694:	e01d      	b.n	80006d2 <main+0x16a>
					printf("Pass Accepted, Hello %s! \r\n", db[cPass].name);
 8000696:	7afa      	ldrb	r2, [r7, #11]
 8000698:	4613      	mov	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	4413      	add	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <main+0x180>)
 80006a2:	4413      	add	r3, r2
 80006a4:	3304      	adds	r3, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4811      	ldr	r0, [pc, #68]	; (80006f0 <main+0x188>)
 80006aa:	f003 fb45 	bl	8003d38 <iprintf>
					printf("Press any key to reset. \r\n");
 80006ae:	4811      	ldr	r0, [pc, #68]	; (80006f4 <main+0x18c>)
 80006b0:	f003 fbc8 	bl	8003e44 <puts>
					ch = getchar();
 80006b4:	f003 fb02 	bl	8003cbc <getchar>
 80006b8:	4603      	mov	r3, r0
 80006ba:	81bb      	strh	r3, [r7, #12]
					n = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	73bb      	strb	r3, [r7, #14]
					cPass = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	72fb      	strb	r3, [r7, #11]
					result = NOT_EQUAL;
 80006c4:	2301      	movs	r3, #1
 80006c6:	72bb      	strb	r3, [r7, #10]
					state = RECEIVING_PASS;
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
				break;
 80006cc:	e001      	b.n	80006d2 <main+0x16a>
			}// State 3

			// Default: Go to state 0
			default:
				state = RECEIVING_PASS;
 80006ce:	2300      	movs	r3, #0
 80006d0:	73fb      	strb	r3, [r7, #15]
		switch(state){
 80006d2:	e765      	b.n	80005a0 <main+0x38>
 80006d4:	08004f48 	.word	0x08004f48
 80006d8:	08004f58 	.word	0x08004f58
 80006dc:	08004f80 	.word	0x08004f80
 80006e0:	08004f90 	.word	0x08004f90
 80006e4:	08004fa0 	.word	0x08004fa0
 80006e8:	20000000 	.word	0x20000000
 80006ec:	08004fc4 	.word	0x08004fc4
 80006f0:	08004fdc 	.word	0x08004fdc
 80006f4:	08004ff8 	.word	0x08004ff8

080006f8 <StringCompare>:
}
/*
 *
 * Compare strings
 * */
COMPARISON StringCompare(char *a, char *b, uint8_t n){
 80006f8:	b480      	push	{r7}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	4613      	mov	r3, r2
 8000704:	71fb      	strb	r3, [r7, #7]
	COMPARISON c = EQUAL;
 8000706:	2300      	movs	r3, #0
 8000708:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<n; i++){
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	e00e      	b.n	800072e <StringCompare+0x36>
		if(a[i] != b[i]){
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	4413      	add	r3, r2
 8000716:	781a      	ldrb	r2, [r3, #0]
 8000718:	693b      	ldr	r3, [r7, #16]
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	440b      	add	r3, r1
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d001      	beq.n	8000728 <StringCompare+0x30>
			c = NOT_EQUAL;
 8000724:	2301      	movs	r3, #1
 8000726:	75fb      	strb	r3, [r7, #23]
	for (int i=0; i<n; i++){
 8000728:	693b      	ldr	r3, [r7, #16]
 800072a:	3301      	adds	r3, #1
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	693a      	ldr	r2, [r7, #16]
 8000732:	429a      	cmp	r2, r3
 8000734:	dbec      	blt.n	8000710 <StringCompare+0x18>
		}
	}
	return c;
 8000736:	7dfb      	ldrb	r3, [r7, #23]
}
 8000738:	4618      	mov	r0, r3
 800073a:	371c      	adds	r7, #28
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b0ac      	sub	sp, #176	; 0xb0
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800074e:	2244      	movs	r2, #68	; 0x44
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fae8 	bl	8003d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2254      	movs	r2, #84	; 0x54
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f003 fada 	bl	8003d28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000774:	2310      	movs	r3, #16
 8000776:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000790:	2301      	movs	r3, #1
 8000792:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800079c:	2310      	movs	r3, #16
 800079e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007a2:	2307      	movs	r3, #7
 80007a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 f9c3 	bl	8001b44 <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007c4:	f000 f946 	bl	8000a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2303      	movs	r3, #3
 80007ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007e0:	2101      	movs	r1, #1
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fdce 	bl	8002384 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ee:	f000 f931 	bl	8000a54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 ffc7 	bl	8002790 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000808:	f000 f924 	bl	8000a54 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800080c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000810:	f001 f942 	bl	8001a98 <HAL_PWREx_ControlVoltageScaling>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800081a:	f000 f91b 	bl	8000a54 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	37b0      	adds	r7, #176	; 0xb0
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	; 0x28
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2224      	movs	r2, #36	; 0x24
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f003 fa77 	bl	8003d28 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_DAC1_Init+0x5c>)
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_DAC1_Init+0x60>)
 800083e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <MX_DAC1_Init+0x5c>)
 8000842:	f000 fcf4 	bl	800122e <HAL_DAC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800084c:	f000 f902 	bl	8000a54 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000854:	2324      	movs	r3, #36	; 0x24
 8000856:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_DAC1_Init+0x5c>)
 800086c:	f000 fd01 	bl	8001272 <HAL_DAC_ConfigChannel>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f8ed 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	; 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000160 	.word	0x20000160
 8000888:	40007400 	.word	0x40007400

0800088c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_TIM2_Init+0x94>)
 80008ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_TIM2_Init+0x94>)
 80008b4:	2220      	movs	r2, #32
 80008b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_TIM2_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_TIM2_Init+0x94>)
 80008c0:	2264      	movs	r2, #100	; 0x64
 80008c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c4:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_TIM2_Init+0x94>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_TIM2_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d0:	4813      	ldr	r0, [pc, #76]	; (8000920 <MX_TIM2_Init+0x94>)
 80008d2:	f002 fa43 	bl	8002d5c <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008dc:	f000 f8ba 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_TIM2_Init+0x94>)
 80008ee:	f002 fa8c 	bl	8002e0a <HAL_TIM_ConfigClockSource>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008f8:	f000 f8ac 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008fc:	2320      	movs	r3, #32
 80008fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_TIM2_Init+0x94>)
 800090a:	f002 fc43 	bl	8003194 <HAL_TIMEx_MasterConfigSynchronization>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000914:	f000 f89e 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001bc 	.word	0x200001bc

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_USART2_UART_Init+0x58>)
 800092a:	4a15      	ldr	r2, [pc, #84]	; (8000980 <MX_USART2_UART_Init+0x5c>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_USART2_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART2_UART_Init+0x58>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART2_UART_Init+0x58>)
 8000968:	f002 fc7a 	bl	8003260 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000972:	f000 f86f 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000208 	.word	0x20000208
 8000980:	40004400 	.word	0x40004400

08000984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_DMA_Init+0x38>)
 800098c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <MX_DMA_Init+0x38>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	6493      	str	r3, [r2, #72]	; 0x48
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_DMA_Init+0x38>)
 8000998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	200d      	movs	r0, #13
 80009a8:	f000 fc0b 	bl	80011c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009ac:	200d      	movs	r0, #13
 80009ae:	f000 fc24 	bl	80011fa <HAL_NVIC_EnableIRQ>

}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_GPIO_Init+0x8c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_GPIO_Init+0x8c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <MX_GPIO_Init+0x8c>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_GPIO_Init+0x8c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2108      	movs	r1, #8
 8000a22:	480b      	ldr	r0, [pc, #44]	; (8000a50 <MX_GPIO_Init+0x90>)
 8000a24:	f001 f812 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_GPIO_Init+0x90>)
 8000a40:	f000 fe9a 	bl	8001778 <HAL_GPIO_Init>

}
 8000a44:	bf00      	nop
 8000a46:	3720      	adds	r7, #32
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	48000400 	.word	0x48000400

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6613      	str	r3, [r2, #96]	; 0x60
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <HAL_DAC_MspInit+0xcc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d14f      	bne.n	8000b6a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ace:	4a2a      	ldr	r2, [pc, #168]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad6:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a24      	ldr	r2, [pc, #144]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <HAL_DAC_MspInit+0xd0>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000afa:	2310      	movs	r3, #16
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fe32 	bl	8001778 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b16:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <HAL_DAC_MspInit+0xd8>)
 8000b18:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b1c:	2206      	movs	r2, #6
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b22:	2210      	movs	r2, #16
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b40:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b44:	2220      	movs	r2, #32
 8000b46:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000b4e:	480b      	ldr	r0, [pc, #44]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b50:	f000 fcaa 	bl	80014a8 <HAL_DMA_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000b5a:	f7ff ff7b 	bl	8000a54 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <HAL_DAC_MspInit+0xd4>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40007400 	.word	0x40007400
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	20000174 	.word	0x20000174
 8000b80:	40020030 	.word	0x40020030

08000b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b94:	d10b      	bne.n	8000bae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_TIM_Base_MspInit+0x38>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_TIM_Base_MspInit+0x38>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_TIM_Base_MspInit+0x38>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a20      	ldr	r2, [pc, #128]	; (8000c60 <HAL_UART_MspInit+0xa0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13a      	bne.n	8000c58 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000be2:	4b20      	ldr	r3, [pc, #128]	; (8000c64 <HAL_UART_MspInit+0xa4>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_UART_MspInit+0xa4>)
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_UART_MspInit+0xa4>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_UART_MspInit+0xa4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <HAL_UART_MspInit+0xa4>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0xa4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c12:	2304      	movs	r3, #4
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f000 fda2 	bl	8001778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c46:	2303      	movs	r3, #3
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 fd90 	bl	8001778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40021000 	.word	0x40021000

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <NMI_Handler+0x4>

08000c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb4:	f000 f966 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <DMA1_Channel3_IRQHandler+0x10>)
 8000cc2:	f000 fca9 	bl	8001618 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000174 	.word	0x20000174

08000cd0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000cdc:	2301      	movs	r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <_read+0x38>)
 8000cec:	f002 fb9a 	bl	8003424 <HAL_UART_Receive>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	607b      	str	r3, [r7, #4]

	return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000208 	.word	0x20000208

08000d0c <_write>:

int _write(int file, char *ptr, int len)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	f04f 33ff 	mov.w	r3, #4294967295
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	4809      	ldr	r0, [pc, #36]	; (8000d4c <_write+0x40>)
 8000d28:	f002 fae8 	bl	80032fc <HAL_UART_Transmit>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000d30:	7dfb      	ldrb	r3, [r7, #23]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d002      	beq.n	8000d3c <_write+0x30>
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d101      	bne.n	8000d40 <_write+0x34>
	{
		Error_Handler();
 8000d3c:	f7ff fe8a 	bl	8000a54 <Error_Handler>
	}

	return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000208 	.word	0x20000208

08000d50 <_close>:



int _close(int file)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	return -1;
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d78:	605a      	str	r2, [r3, #4]
	return 0;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_isatty>:

int _isatty(int file)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	return 1;
 8000d90:	2301      	movs	r3, #1
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b085      	sub	sp, #20
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
	return 0;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f002 ff62 	bl	8003cb0 <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20010000 	.word	0x20010000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	20000154 	.word	0x20000154
 8000e20:	200002a0 	.word	0x200002a0

08000e24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <SystemInit+0x5c>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <SystemInit+0x5c>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <SystemInit+0x60>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <SystemInit+0x60>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <SystemInit+0x60>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <SystemInit+0x60>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <SystemInit+0x60>)
 8000e50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <SystemInit+0x60>)
 8000e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <SystemInit+0x60>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <SystemInit+0x60>)
 8000e68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SystemInit+0x60>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00
 8000e84:	40021000 	.word	0x40021000

08000e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e8c:	f7ff ffca 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e92:	e003      	b.n	8000e9c <LoopCopyDataInit>

08000e94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e9a:	3104      	adds	r1, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e9c:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ea0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ea2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ea4:	d3f6      	bcc.n	8000e94 <CopyDataInit>
	ldr	r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ea8:	e002      	b.n	8000eb0 <LoopFillZerobss>

08000eaa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000eaa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000eac:	f842 3b04 	str.w	r3, [r2], #4

08000eb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <LoopForever+0x16>)
	cmp	r2, r3
 8000eb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000eb4:	d3f9      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 ff13 	bl	8003ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eba:	f7ff fb55 	bl	8000568 <main>

08000ebe <LoopForever>:

LoopForever:
    b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000ec4:	08005104 	.word	0x08005104
	ldr	r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ecc:	20000138 	.word	0x20000138
	ldr	r2, =_sbss
 8000ed0:	20000138 	.word	0x20000138
	ldr	r3, = _ebss
 8000ed4:	200002a0 	.word	0x200002a0

08000ed8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_IRQHandler>

08000eda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f961 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eea:	2000      	movs	r0, #0
 8000eec:	f000 f80e 	bl	8000f0c <HAL_InitTick>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	e001      	b.n	8000f00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000efc:	f7ff fdb0 	bl	8000a60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f18:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d023      	beq.n	8000f68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_InitTick+0x70>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_InitTick+0x6c>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f96d 	bl	8001216 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d10f      	bne.n	8000f62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d809      	bhi.n	8000f5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f937 	bl	80011c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_InitTick+0x74>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e007      	b.n	8000f6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e004      	b.n	8000f6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
 8000f66:	e001      	b.n	8000f6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000d0 	.word	0x200000d0
 8000f7c:	200000c8 	.word	0x200000c8
 8000f80:	200000cc 	.word	0x200000cc

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200000d0 	.word	0x200000d0
 8000fa8:	2000028c 	.word	0x2000028c

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	2000028c 	.word	0x2000028c

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000d0 	.word	0x200000d0

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e014      	b.n	800126a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	791b      	ldrb	r3, [r3, #4]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fc29 	bl	8000aa8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2202      	movs	r2, #2
 800125a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b088      	sub	sp, #32
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	795b      	ldrb	r3, [r3, #5]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_DAC_ConfigChannel+0x1c>
 800128a:	2302      	movs	r3, #2
 800128c:	e107      	b.n	800149e <HAL_DAC_ConfigChannel+0x22c>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2202      	movs	r2, #2
 8001298:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b04      	cmp	r3, #4
 80012a0:	d174      	bne.n	800138c <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80012a2:	f7ff fe83 	bl	8000fac <HAL_GetTick>
 80012a6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d134      	bne.n	8001318 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012ae:	e011      	b.n	80012d4 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012b0:	f7ff fe7c 	bl	8000fac <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d90a      	bls.n	80012d4 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f043 0208 	orr.w	r2, r3, #8
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2203      	movs	r2, #3
 80012ce:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e0e4      	b.n	800149e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1e6      	bne.n	80012b0 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff fe6e 	bl	8000fc4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	6992      	ldr	r2, [r2, #24]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
 80012f2:	e01e      	b.n	8001332 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80012f4:	f7ff fe5a 	bl	8000fac <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d90a      	bls.n	8001318 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	f043 0208 	orr.w	r2, r3, #8
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2203      	movs	r2, #3
 8001312:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e0c2      	b.n	800149e <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800131e:	2b00      	cmp	r3, #0
 8001320:	dbe8      	blt.n	80012f4 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff fe4e 	bl	8000fc4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	6992      	ldr	r2, [r2, #24]
 8001330:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	ea02 0103 	and.w	r1, r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	69da      	ldr	r2, [r3, #28]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	409a      	lsls	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	21ff      	movs	r1, #255	; 0xff
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	ea02 0103 	and.w	r1, r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	6a1a      	ldr	r2, [r3, #32]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	409a      	lsls	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d11d      	bne.n	80013d0 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	221f      	movs	r2, #31
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2207      	movs	r2, #7
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43da      	mvns	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	400a      	ands	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f003 0310 	and.w	r3, r3, #16
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	22c0      	movs	r2, #192	; 0xc0
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	400a      	ands	r2, r1
 800148e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2201      	movs	r2, #1
 8001494:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e098      	b.n	80015ec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b4d      	ldr	r3, [pc, #308]	; (80015f8 <HAL_DMA_Init+0x150>)
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d80f      	bhi.n	80014e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b4b      	ldr	r3, [pc, #300]	; (80015fc <HAL_DMA_Init+0x154>)
 80014ce:	4413      	add	r3, r2
 80014d0:	4a4b      	ldr	r2, [pc, #300]	; (8001600 <HAL_DMA_Init+0x158>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	009a      	lsls	r2, r3, #2
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a48      	ldr	r2, [pc, #288]	; (8001604 <HAL_DMA_Init+0x15c>)
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
 80014e4:	e00e      	b.n	8001504 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_DMA_Init+0x160>)
 80014ee:	4413      	add	r3, r2
 80014f0:	4a43      	ldr	r2, [pc, #268]	; (8001600 <HAL_DMA_Init+0x158>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	091b      	lsrs	r3, r3, #4
 80014f8:	009a      	lsls	r2, r3, #2
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a42      	ldr	r2, [pc, #264]	; (800160c <HAL_DMA_Init+0x164>)
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2202      	movs	r2, #2
 8001508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800151a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001528:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001534:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001540:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800155e:	d039      	beq.n	80015d4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_DMA_Init+0x15c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d11a      	bne.n	80015a0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <HAL_DMA_Init+0x168>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f003 031c 	and.w	r3, r3, #28
 8001576:	210f      	movs	r1, #15
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	4924      	ldr	r1, [pc, #144]	; (8001610 <HAL_DMA_Init+0x168>)
 8001580:	4013      	ands	r3, r2
 8001582:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_DMA_Init+0x168>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	f003 031c 	and.w	r3, r3, #28
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	491d      	ldr	r1, [pc, #116]	; (8001610 <HAL_DMA_Init+0x168>)
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
 800159e:	e019      	b.n	80015d4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_DMA_Init+0x16c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	f003 031c 	and.w	r3, r3, #28
 80015ac:	210f      	movs	r1, #15
 80015ae:	fa01 f303 	lsl.w	r3, r1, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	4917      	ldr	r1, [pc, #92]	; (8001614 <HAL_DMA_Init+0x16c>)
 80015b6:	4013      	ands	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_DMA_Init+0x16c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6859      	ldr	r1, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f003 031c 	and.w	r3, r3, #28
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	4911      	ldr	r1, [pc, #68]	; (8001614 <HAL_DMA_Init+0x16c>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40020407 	.word	0x40020407
 80015fc:	bffdfff8 	.word	0xbffdfff8
 8001600:	cccccccd 	.word	0xcccccccd
 8001604:	40020000 	.word	0x40020000
 8001608:	bffdfbf8 	.word	0xbffdfbf8
 800160c:	40020400 	.word	0x40020400
 8001610:	400200a8 	.word	0x400200a8
 8001614:	400204a8 	.word	0x400204a8

08001618 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001634:	f003 031c 	and.w	r3, r3, #28
 8001638:	2204      	movs	r2, #4
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d026      	beq.n	8001692 <HAL_DMA_IRQHandler+0x7a>
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	d021      	beq.n	8001692 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0204 	bic.w	r2, r2, #4
 800166a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001670:	f003 021c 	and.w	r2, r3, #28
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	2104      	movs	r1, #4
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	2b00      	cmp	r3, #0
 8001686:	d071      	beq.n	800176c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001690:	e06c      	b.n	800176c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f003 031c 	and.w	r3, r3, #28
 800169a:	2202      	movs	r2, #2
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d02e      	beq.n	8001704 <HAL_DMA_IRQHandler+0xec>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d029      	beq.n	8001704 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10b      	bne.n	80016d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020a 	bic.w	r2, r2, #10
 80016cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 021c 	and.w	r2, r3, #28
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2102      	movs	r1, #2
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d038      	beq.n	800176c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001702:	e033      	b.n	800176c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001708:	f003 031c 	and.w	r3, r3, #28
 800170c:	2208      	movs	r2, #8
 800170e:	409a      	lsls	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4013      	ands	r3, r2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d02a      	beq.n	800176e <HAL_DMA_IRQHandler+0x156>
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d025      	beq.n	800176e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 020e 	bic.w	r2, r2, #14
 8001730:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f003 021c 	and.w	r2, r3, #28
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800176c:	bf00      	nop
 800176e:	bf00      	nop
}
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b480      	push	{r7}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e148      	b.n	8001a1a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 813a 	beq.w	8001a14 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d00b      	beq.n	80017c0 <HAL_GPIO_Init+0x48>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d007      	beq.n	80017c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b12      	cmp	r3, #18
 80017be:	d130      	bne.n	8001822 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	f003 0201 	and.w	r2, r3, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	2203      	movs	r2, #3
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0xea>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b12      	cmp	r3, #18
 8001860:	d123      	bne.n	80018aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	6939      	ldr	r1, [r7, #16]
 80018a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0203 	and.w	r2, r3, #3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8094 	beq.w	8001a14 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80018ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f0:	4a51      	ldr	r2, [pc, #324]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6613      	str	r3, [r2, #96]	; 0x60
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 80018fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001904:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <HAL_GPIO_Init+0x2c4>)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800192e:	d00d      	beq.n	800194c <HAL_GPIO_Init+0x1d4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <HAL_GPIO_Init+0x1d0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <HAL_GPIO_Init+0x2cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_GPIO_Init+0x1cc>
 8001940:	2302      	movs	r3, #2
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1d6>
 8001944:	2307      	movs	r3, #7
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1d6>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1d6>
 800194c:	2300      	movs	r3, #0
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800195e:	4937      	ldr	r1, [pc, #220]	; (8001a3c <HAL_GPIO_Init+0x2c4>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001990:	4a2d      	ldr	r2, [pc, #180]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ba:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a0e:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <HAL_GPIO_Init+0x2d0>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f aeaf 	bne.w	8001788 <HAL_GPIO_Init+0x10>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a5c:	787b      	ldrb	r3, [r7, #1]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a68:	e002      	b.n	8001a70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40007000 	.word	0x40007000

08001a98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa6:	d130      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab4:	d038      	beq.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2232      	movs	r2, #50	; 0x32
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9b      	lsrs	r3, r3, #18
 8001ad8:	3301      	adds	r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001adc:	e002      	b.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af0:	d102      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f2      	bne.n	8001ade <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b04:	d110      	bne.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e00f      	b.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b16:	d007      	beq.n	8001b28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b20:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	200000c8 	.word	0x200000c8
 8001b40:	431bde83 	.word	0x431bde83

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d102      	bne.n	8001b58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f000 bc11 	b.w	800237a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b58:	4ba0      	ldr	r3, [pc, #640]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b62:	4b9e      	ldr	r3, [pc, #632]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80e4 	beq.w	8001d42 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d007      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4c>
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	f040 808b 	bne.w	8001c9e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	f040 8087 	bne.w	8001c9e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b90:	4b92      	ldr	r3, [pc, #584]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x64>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e3e8      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1a      	ldr	r2, [r3, #32]
 8001bac:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x7e>
 8001bb8:	4b88      	ldr	r3, [pc, #544]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc0:	e005      	b.n	8001bce <HAL_RCC_OscConfig+0x8a>
 8001bc2:	4b86      	ldr	r3, [pc, #536]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d223      	bcs.n	8001c1a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 fd7a 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e3c9      	b.n	800237a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be6:	4b7d      	ldr	r3, [pc, #500]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a7c      	ldr	r2, [pc, #496]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001bec:	f043 0308 	orr.w	r3, r3, #8
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b7a      	ldr	r3, [pc, #488]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4977      	ldr	r1, [pc, #476]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c04:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	4972      	ldr	r1, [pc, #456]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e025      	b.n	8001c66 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1a:	4b70      	ldr	r3, [pc, #448]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6f      	ldr	r2, [pc, #444]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b6d      	ldr	r3, [pc, #436]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	496a      	ldr	r1, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	021b      	lsls	r3, r3, #8
 8001c46:	4965      	ldr	r1, [pc, #404]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fd3a 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e389      	b.n	800237a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c66:	f000 fc6f 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	495a      	ldr	r1, [pc, #360]	; (8001de0 <HAL_RCC_OscConfig+0x29c>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_RCC_OscConfig+0x2a0>)
 8001c84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c86:	4b58      	ldr	r3, [pc, #352]	; (8001de8 <HAL_RCC_OscConfig+0x2a4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f93e 	bl	8000f0c <HAL_InitTick>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d052      	beq.n	8001d40 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	e36d      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d032      	beq.n	8001d0c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ca6:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f97b 	bl	8000fac <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cba:	f7ff f977 	bl	8000fac <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e356      	b.n	800237a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ccc:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd8:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3f      	ldr	r2, [pc, #252]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	493a      	ldr	r1, [pc, #232]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	4935      	ldr	r1, [pc, #212]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
 8001d0a:	e01a      	b.n	8001d42 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d0c:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a32      	ldr	r2, [pc, #200]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f948 	bl	8000fac <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d20:	f7ff f944 	bl	8000fac <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e323      	b.n	800237a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1dc>
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d073      	beq.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_OscConfig+0x21c>
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d10e      	bne.n	8001d78 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d10b      	bne.n	8001d78 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d063      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d15f      	bne.n	8001e34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e300      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d106      	bne.n	8001d90 <HAL_RCC_OscConfig+0x24c>
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a15      	ldr	r2, [pc, #84]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e01d      	b.n	8001dcc <HAL_RCC_OscConfig+0x288>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x270>
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a0f      	ldr	r2, [pc, #60]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a0c      	ldr	r2, [pc, #48]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x288>
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a08      	ldr	r2, [pc, #32]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_RCC_OscConfig+0x298>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f8ea 	bl	8000fac <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dda:	e010      	b.n	8001dfe <HAL_RCC_OscConfig+0x2ba>
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08005014 	.word	0x08005014
 8001de4:	200000c8 	.word	0x200000c8
 8001de8:	200000cc 	.word	0x200000cc
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff f8de 	bl	8000fac <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e2bd      	b.n	800237a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	4baf      	ldr	r3, [pc, #700]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x2a8>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f8ce 	bl	8000fac <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f8ca 	bl	8000fac <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e2a9      	b.n	800237a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e26:	4ba5      	ldr	r3, [pc, #660]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2d0>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d060      	beq.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_OscConfig+0x310>
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d119      	bne.n	8001e82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d116      	bne.n	8001e82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e54:	4b99      	ldr	r3, [pc, #612]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_OscConfig+0x328>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e286      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b93      	ldr	r3, [pc, #588]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	4990      	ldr	r1, [pc, #576]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e80:	e040      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d023      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8a:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a8b      	ldr	r2, [pc, #556]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e96:	f7ff f889 	bl	8000fac <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e9e:	f7ff f885 	bl	8000fac <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e264      	b.n	800237a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb0:	4b82      	ldr	r3, [pc, #520]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b7f      	ldr	r3, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	497c      	ldr	r1, [pc, #496]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
 8001ed0:	e018      	b.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed2:	4b7a      	ldr	r3, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a79      	ldr	r2, [pc, #484]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f865 	bl	8000fac <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f861 	bl	8000fac <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e240      	b.n	800237a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ef8:	4b70      	ldr	r3, [pc, #448]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01c      	beq.n	8001f52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f1e:	4a67      	ldr	r2, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7ff f840 	bl	8000fac <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f30:	f7ff f83c 	bl	8000fac <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e21b      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f42:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0ef      	beq.n	8001f30 <HAL_RCC_OscConfig+0x3ec>
 8001f50:	e01b      	b.n	8001f8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001f5a:	f023 0301 	bic.w	r3, r3, #1
 8001f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f62:	f7ff f823 	bl	8000fac <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7ff f81f 	bl	8000fac <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e1fe      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f7c:	4b4f      	ldr	r3, [pc, #316]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ef      	bne.n	8001f6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80a6 	beq.w	80020e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f9c:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa8:	4b44      	ldr	r3, [pc, #272]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	4a43      	ldr	r2, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb4:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc4:	4b3e      	ldr	r3, [pc, #248]	; (80020c0 <HAL_RCC_OscConfig+0x57c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d118      	bne.n	8002002 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd0:	4b3b      	ldr	r3, [pc, #236]	; (80020c0 <HAL_RCC_OscConfig+0x57c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <HAL_RCC_OscConfig+0x57c>)
 8001fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fdc:	f7fe ffe6 	bl	8000fac <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe4:	f7fe ffe2 	bl	8000fac <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1c1      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff6:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <HAL_RCC_OscConfig+0x57c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <HAL_RCC_OscConfig+0x4d8>
 800200a:	4b2c      	ldr	r3, [pc, #176]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800201a:	e024      	b.n	8002066 <HAL_RCC_OscConfig+0x522>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d110      	bne.n	8002046 <HAL_RCC_OscConfig+0x502>
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	4a20      	ldr	r2, [pc, #128]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002044:	e00f      	b.n	8002066 <HAL_RCC_OscConfig+0x522>
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 800205e:	f023 0304 	bic.w	r3, r3, #4
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe ff9d 	bl	8000fac <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe ff99 	bl	8000fac <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e176      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x578>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ed      	beq.n	8002076 <HAL_RCC_OscConfig+0x532>
 800209a:	e01a      	b.n	80020d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe ff86 	bl	8000fac <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe ff82 	bl	8000fac <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d906      	bls.n	80020c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e15f      	b.n	800237a <HAL_RCC_OscConfig+0x836>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c4:	4baa      	ldr	r3, [pc, #680]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e8      	bne.n	80020a4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4ba5      	ldr	r3, [pc, #660]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	4aa4      	ldr	r2, [pc, #656]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03c      	beq.n	800216a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01c      	beq.n	8002132 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020f8:	4b9d      	ldr	r3, [pc, #628]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80020fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020fe:	4a9c      	ldr	r2, [pc, #624]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7fe ff50 	bl	8000fac <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002110:	f7fe ff4c 	bl	8000fac <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e12b      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002122:	4b93      	ldr	r3, [pc, #588]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCC_OscConfig+0x5cc>
 8002130:	e01b      	b.n	800216a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002132:	4b8f      	ldr	r3, [pc, #572]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002138:	4a8d      	ldr	r2, [pc, #564]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7fe ff33 	bl	8000fac <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214a:	f7fe ff2f 	bl	8000fac <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e10e      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800215c:	4b84      	ldr	r3, [pc, #528]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800215e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ef      	bne.n	800214a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8102 	beq.w	8002378 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	2b02      	cmp	r3, #2
 800217a:	f040 80c5 	bne.w	8002308 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800217e:	4b7c      	ldr	r3, [pc, #496]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0203 	and.w	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	429a      	cmp	r2, r3
 8002190:	d12c      	bne.n	80021ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	3b01      	subs	r3, #1
 800219e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d123      	bne.n	80021ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d11b      	bne.n	80021ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d113      	bne.n	80021ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ce:	085b      	lsrs	r3, r3, #1
 80021d0:	3b01      	subs	r3, #1
 80021d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d109      	bne.n	80021ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d067      	beq.n	80022bc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d062      	beq.n	80022b8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021f2:	4b5f      	ldr	r3, [pc, #380]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e0bb      	b.n	800237a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002202:	4b5b      	ldr	r3, [pc, #364]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a5a      	ldr	r2, [pc, #360]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800220e:	f7fe fecd 	bl	8000fac <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002216:	f7fe fec9 	bl	8000fac <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0a8      	b.n	800237a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002228:	4b51      	ldr	r3, [pc, #324]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002234:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	4b4e      	ldr	r3, [pc, #312]	; (8002374 <HAL_RCC_OscConfig+0x830>)
 800223a:	4013      	ands	r3, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002244:	3a01      	subs	r2, #1
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	4311      	orrs	r1, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800224e:	0212      	lsls	r2, r2, #8
 8002250:	4311      	orrs	r1, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002256:	0852      	lsrs	r2, r2, #1
 8002258:	3a01      	subs	r2, #1
 800225a:	0552      	lsls	r2, r2, #21
 800225c:	4311      	orrs	r1, r2
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002262:	0852      	lsrs	r2, r2, #1
 8002264:	3a01      	subs	r2, #1
 8002266:	0652      	lsls	r2, r2, #25
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800226e:	06d2      	lsls	r2, r2, #27
 8002270:	430a      	orrs	r2, r1
 8002272:	493f      	ldr	r1, [pc, #252]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002274:	4313      	orrs	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002278:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a3c      	ldr	r2, [pc, #240]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800227e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002282:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002284:	4b3a      	ldr	r3, [pc, #232]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a39      	ldr	r2, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800228a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002290:	f7fe fe8c 	bl	8000fac <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe fe88 	bl	8000fac <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e067      	b.n	800237a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022aa:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022b6:	e05f      	b.n	8002378 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e05e      	b.n	800237a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022bc:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d157      	bne.n	8002378 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a28      	ldr	r2, [pc, #160]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80022ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d4:	4b26      	ldr	r3, [pc, #152]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a25      	ldr	r2, [pc, #148]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022e0:	f7fe fe64 	bl	8000fac <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fe60 	bl	8000fac <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e03f      	b.n	800237a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x7a4>
 8002306:	e037      	b.n	8002378 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	2b0c      	cmp	r3, #12
 800230c:	d02d      	beq.n	800236a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002318:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800232c:	f023 0303 	bic.w	r3, r3, #3
 8002330:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 8002338:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800233c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002340:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe fe33 	bl	8000fac <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fe2f 	bl	8000fac <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e00e      	b.n	800237a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCC_OscConfig+0x82c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f0      	bne.n	800234a <HAL_RCC_OscConfig+0x806>
 8002368:	e006      	b.n	8002378 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e005      	b.n	800237a <HAL_RCC_OscConfig+0x836>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3720      	adds	r7, #32
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop

08002384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0c8      	b.n	800252a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002398:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCC_ClockConfig+0x1b0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d910      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b63      	ldr	r3, [pc, #396]	; (8002534 <HAL_RCC_ClockConfig+0x1b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4961      	ldr	r1, [pc, #388]	; (8002534 <HAL_RCC_ClockConfig+0x1b0>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <HAL_RCC_ClockConfig+0x1b0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b0      	b.n	800252a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d04c      	beq.n	800246e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d107      	bne.n	80023ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023dc:	4b56      	ldr	r3, [pc, #344]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d121      	bne.n	800242c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e09e      	b.n	800252a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d115      	bne.n	800242c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e092      	b.n	800252a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800240c:	4b4a      	ldr	r3, [pc, #296]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e086      	b.n	800252a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e07e      	b.n	800252a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800242c:	4b42      	ldr	r3, [pc, #264]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f023 0203 	bic.w	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	493f      	ldr	r1, [pc, #252]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800243e:	f7fe fdb5 	bl	8000fac <HAL_GetTick>
 8002442:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	e00a      	b.n	800245c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe fdb1 	bl	8000fac <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	; 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e066      	b.n	800252a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245c:	4b36      	ldr	r3, [pc, #216]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 020c 	and.w	r2, r3, #12
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	429a      	cmp	r2, r3
 800246c:	d1eb      	bne.n	8002446 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247a:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	492c      	ldr	r1, [pc, #176]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_RCC_ClockConfig+0x1b0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d210      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_RCC_ClockConfig+0x1b0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4924      	ldr	r1, [pc, #144]	; (8002534 <HAL_RCC_ClockConfig+0x1b0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b22      	ldr	r3, [pc, #136]	; (8002534 <HAL_RCC_ClockConfig+0x1b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e036      	b.n	800252a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4918      	ldr	r1, [pc, #96]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e6:	4b14      	ldr	r3, [pc, #80]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4910      	ldr	r1, [pc, #64]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024fa:	f000 f825 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80024fe:	4602      	mov	r2, r0
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_RCC_ClockConfig+0x1b4>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	490c      	ldr	r1, [pc, #48]	; (800253c <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	5ccb      	ldrb	r3, [r1, r3]
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fcf4 	bl	8000f0c <HAL_InitTick>
 8002524:	4603      	mov	r3, r0
 8002526:	72fb      	strb	r3, [r7, #11]

  return status;
 8002528:	7afb      	ldrb	r3, [r7, #11]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40022000 	.word	0x40022000
 8002538:	40021000 	.word	0x40021000
 800253c:	08005014 	.word	0x08005014
 8002540:	200000c8 	.word	0x200000c8
 8002544:	200000cc 	.word	0x200000cc

08002548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	; 0x24
 800254c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	2300      	movs	r3, #0
 8002554:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 0303 	and.w	r3, r3, #3
 8002568:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x34>
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d121      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d11e      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d107      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002588:	4b31      	ldr	r3, [pc, #196]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 800258a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	e005      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10d      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b04      	cmp	r3, #4
 80025be:	d102      	bne.n	80025c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <HAL_RCC_GetSysClockFreq+0x110>)
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	e004      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_RCC_GetSysClockFreq+0x114>)
 80025ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d134      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025d6:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0xa6>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d003      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0xac>
 80025ec:	e005      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <HAL_RCC_GetSysClockFreq+0x110>)
 80025f0:	617b      	str	r3, [r7, #20]
      break;
 80025f2:	e005      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_GetSysClockFreq+0x114>)
 80025f6:	617b      	str	r3, [r7, #20]
      break;
 80025f8:	e002      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	617b      	str	r3, [r7, #20]
      break;
 80025fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	3301      	adds	r3, #1
 800260c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	fb02 f203 	mul.w	r2, r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_RCC_GetSysClockFreq+0x108>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	0e5b      	lsrs	r3, r3, #25
 800262c:	f003 0303 	and.w	r3, r3, #3
 8002630:	3301      	adds	r3, #1
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002640:	69bb      	ldr	r3, [r7, #24]
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	0800502c 	.word	0x0800502c
 8002658:	00f42400 	.word	0x00f42400
 800265c:	007a1200 	.word	0x007a1200

08002660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_GetHCLKFreq+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	200000c8 	.word	0x200000c8

08002678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800267c:	f7ff fff0 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4904      	ldr	r1, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002698:	4618      	mov	r0, r3
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000
 80026a0:	08005024 	.word	0x08005024

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026a8:	f7ff ffda 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0adb      	lsrs	r3, r3, #11
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4904      	ldr	r1, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08005024 	.word	0x08005024

080026d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026e8:	f7ff f9c8 	bl	8001a7c <HAL_PWREx_GetVoltageRange>
 80026ec:	6178      	str	r0, [r7, #20]
 80026ee:	e014      	b.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a24      	ldr	r2, [pc, #144]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b22      	ldr	r3, [pc, #136]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002708:	f7ff f9b8 	bl	8001a7c <HAL_PWREx_GetVoltageRange>
 800270c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002720:	d10b      	bne.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d919      	bls.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2ba0      	cmp	r3, #160	; 0xa0
 800272c:	d902      	bls.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800272e:	2302      	movs	r3, #2
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e013      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002734:	2301      	movs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e010      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d902      	bls.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002740:	2303      	movs	r3, #3
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e00a      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d102      	bne.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800274c:	2302      	movs	r3, #2
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	e004      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b70      	cmp	r3, #112	; 0x70
 8002756:	d101      	bne.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002758:	2301      	movs	r3, #1
 800275a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 0207 	bic.w	r2, r3, #7
 8002764:	4909      	ldr	r1, [pc, #36]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	40022000 	.word	0x40022000

08002790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002798:	2300      	movs	r3, #0
 800279a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800279c:	2300      	movs	r3, #0
 800279e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d031      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027b4:	d01a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ba:	d814      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027c4:	d10f      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027c6:	4bac      	ldr	r3, [pc, #688]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4aab      	ldr	r2, [pc, #684]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f9cc 	bl	8002b78 <RCCEx_PLLSAI1_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4ba0      	ldr	r3, [pc, #640]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	499d      	ldr	r1, [pc, #628]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8099 	beq.w	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002822:	4b95      	ldr	r3, [pc, #596]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b8f      	ldr	r3, [pc, #572]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	4a8e      	ldr	r2, [pc, #568]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	; 0x58
 8002844:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a88      	ldr	r2, [pc, #544]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002860:	f7fe fba4 	bl	8000fac <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe fba0 	bl	8000fac <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d902      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	74fb      	strb	r3, [r7, #19]
        break;
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800287c:	4b7f      	ldr	r3, [pc, #508]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d155      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800288e:	4b7a      	ldr	r3, [pc, #488]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002898:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01e      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d019      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b6:	4b70      	ldr	r3, [pc, #448]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	4a6e      	ldr	r2, [pc, #440]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c6:	4b6c      	ldr	r3, [pc, #432]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	4a6a      	ldr	r2, [pc, #424]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d6:	4a68      	ldr	r2, [pc, #416]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d016      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fb60 	bl	8000fac <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ee:	e00b      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe fb5c 	bl	8000fac <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d902      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	74fb      	strb	r3, [r7, #19]
            break;
 8002906:	e006      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0ec      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291c:	4b56      	ldr	r3, [pc, #344]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	4953      	ldr	r1, [pc, #332]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002932:	e004      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
 8002938:	e001      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293e:	7c7b      	ldrb	r3, [r7, #17]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d105      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002944:	4b4c      	ldr	r3, [pc, #304]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a4b      	ldr	r2, [pc, #300]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800294a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295c:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4943      	ldr	r1, [pc, #268]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 020c 	bic.w	r2, r3, #12
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	493a      	ldr	r1, [pc, #232]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	4932      	ldr	r1, [pc, #200]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029c2:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	4929      	ldr	r1, [pc, #164]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029e4:	4b24      	ldr	r3, [pc, #144]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	4921      	ldr	r1, [pc, #132]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	4918      	ldr	r1, [pc, #96]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4910      	ldr	r1, [pc, #64]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d02c      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a68:	d10a      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6a:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4a02      	ldr	r2, [pc, #8]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a74:	60d3      	str	r3, [r2, #12]
 8002a76:	e015      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f871 	bl	8002b78 <RCCEx_PLLSAI1_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d028      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab0:	4b30      	ldr	r3, [pc, #192]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	492d      	ldr	r1, [pc, #180]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ace:	d106      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ada:	60d3      	str	r3, [r2, #12]
 8002adc:	e011      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ae6:	d10c      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 f842 	bl	8002b78 <RCCEx_PLLSAI1_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8002afe:	7cfb      	ldrb	r3, [r7, #19]
 8002b00:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01c      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1c:	4915      	ldr	r1, [pc, #84]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2102      	movs	r1, #2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f81f 	bl	8002b78 <RCCEx_PLLSAI1_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b62:	4904      	ldr	r1, [pc, #16]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000

08002b78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b86:	4b74      	ldr	r3, [pc, #464]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d018      	beq.n	8002bc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b92:	4b71      	ldr	r3, [pc, #452]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d10d      	bne.n	8002bbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002baa:	4b6b      	ldr	r3, [pc, #428]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
       ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d047      	beq.n	8002c4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	e044      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d018      	beq.n	8002bfe <RCCEx_PLLSAI1_Config+0x86>
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d825      	bhi.n	8002c1c <RCCEx_PLLSAI1_Config+0xa4>
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d002      	beq.n	8002bda <RCCEx_PLLSAI1_Config+0x62>
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d009      	beq.n	8002bec <RCCEx_PLLSAI1_Config+0x74>
 8002bd8:	e020      	b.n	8002c1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d11d      	bne.n	8002c22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bea:	e01a      	b.n	8002c22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bec:	4b5a      	ldr	r3, [pc, #360]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d116      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e013      	b.n	8002c26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bfe:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c0a:	4b53      	ldr	r3, [pc, #332]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c1a:	e006      	b.n	8002c2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c20:	e004      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c22:	bf00      	nop
 8002c24:	e002      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c26:	bf00      	nop
 8002c28:	e000      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10d      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c32:	4b49      	ldr	r3, [pc, #292]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6819      	ldr	r1, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	430b      	orrs	r3, r1
 8002c48:	4943      	ldr	r1, [pc, #268]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d17c      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c60:	f7fe f9a4 	bl	8000fac <HAL_GetTick>
 8002c64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c66:	e009      	b.n	8002c7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c68:	f7fe f9a0 	bl	8000fac <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d902      	bls.n	8002c7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	73fb      	strb	r3, [r7, #15]
        break;
 8002c7a:	e005      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1ef      	bne.n	8002c68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d15f      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d110      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c94:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6892      	ldr	r2, [r2, #8]
 8002ca4:	0211      	lsls	r1, r2, #8
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68d2      	ldr	r2, [r2, #12]
 8002caa:	06d2      	lsls	r2, r2, #27
 8002cac:	430a      	orrs	r2, r1
 8002cae:	492a      	ldr	r1, [pc, #168]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	610b      	str	r3, [r1, #16]
 8002cb4:	e027      	b.n	8002d06 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d112      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cbc:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cc4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6892      	ldr	r2, [r2, #8]
 8002ccc:	0211      	lsls	r1, r2, #8
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6912      	ldr	r2, [r2, #16]
 8002cd2:	0852      	lsrs	r2, r2, #1
 8002cd4:	3a01      	subs	r2, #1
 8002cd6:	0552      	lsls	r2, r2, #21
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	491f      	ldr	r1, [pc, #124]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	610b      	str	r3, [r1, #16]
 8002ce0:	e011      	b.n	8002d06 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6892      	ldr	r2, [r2, #8]
 8002cf2:	0211      	lsls	r1, r2, #8
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6952      	ldr	r2, [r2, #20]
 8002cf8:	0852      	lsrs	r2, r2, #1
 8002cfa:	3a01      	subs	r2, #1
 8002cfc:	0652      	lsls	r2, r2, #25
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	4915      	ldr	r1, [pc, #84]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d06:	4b14      	ldr	r3, [pc, #80]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d12:	f7fe f94b 	bl	8000fac <HAL_GetTick>
 8002d16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d18:	e009      	b.n	8002d2e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d1a:	f7fe f947 	bl	8000fac <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d902      	bls.n	8002d2e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	73fb      	strb	r3, [r7, #15]
          break;
 8002d2c:	e005      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0ef      	beq.n	8002d1a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40021000 	.word	0x40021000

08002d5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e049      	b.n	8002e02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7fd fefe 	bl	8000b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4610      	mov	r0, r2
 8002d9c:	f000 f8fc 	bl	8002f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_TIM_ConfigClockSource+0x18>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0b5      	b.n	8002f8e <HAL_TIM_ConfigClockSource+0x184>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e40:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e44:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e4c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e5e:	d03e      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0xd4>
 8002e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e64:	f200 8087 	bhi.w	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6c:	f000 8085 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x170>
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d87f      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
 8002e76:	2b70      	cmp	r3, #112	; 0x70
 8002e78:	d01a      	beq.n	8002eb0 <HAL_TIM_ConfigClockSource+0xa6>
 8002e7a:	2b70      	cmp	r3, #112	; 0x70
 8002e7c:	d87b      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
 8002e7e:	2b60      	cmp	r3, #96	; 0x60
 8002e80:	d050      	beq.n	8002f24 <HAL_TIM_ConfigClockSource+0x11a>
 8002e82:	2b60      	cmp	r3, #96	; 0x60
 8002e84:	d877      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
 8002e86:	2b50      	cmp	r3, #80	; 0x50
 8002e88:	d03c      	beq.n	8002f04 <HAL_TIM_ConfigClockSource+0xfa>
 8002e8a:	2b50      	cmp	r3, #80	; 0x50
 8002e8c:	d873      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d058      	beq.n	8002f44 <HAL_TIM_ConfigClockSource+0x13a>
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d86f      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
 8002e96:	2b30      	cmp	r3, #48	; 0x30
 8002e98:	d064      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x15a>
 8002e9a:	2b30      	cmp	r3, #48	; 0x30
 8002e9c:	d86b      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
 8002e9e:	2b20      	cmp	r3, #32
 8002ea0:	d060      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x15a>
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d867      	bhi.n	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d05c      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x15a>
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d05a      	beq.n	8002f64 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002eae:	e062      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	6899      	ldr	r1, [r3, #8]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f000 f948 	bl	8003154 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ed2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]
      break;
 8002edc:	e04e      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6899      	ldr	r1, [r3, #8]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f000 f931 	bl	8003154 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f00:	609a      	str	r2, [r3, #8]
      break;
 8002f02:	e03b      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f000 f8a5 	bl	8003060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2150      	movs	r1, #80	; 0x50
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 f8fe 	bl	800311e <TIM_ITRx_SetConfig>
      break;
 8002f22:	e02b      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	461a      	mov	r2, r3
 8002f32:	f000 f8c4 	bl	80030be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2160      	movs	r1, #96	; 0x60
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f8ee 	bl	800311e <TIM_ITRx_SetConfig>
      break;
 8002f42:	e01b      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	461a      	mov	r2, r3
 8002f52:	f000 f885 	bl	8003060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2140      	movs	r1, #64	; 0x40
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 f8de 	bl	800311e <TIM_ITRx_SetConfig>
      break;
 8002f62:	e00b      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 f8d5 	bl	800311e <TIM_ITRx_SetConfig>
        break;
 8002f74:	e002      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8002f7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
	...

08002f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <TIM_Base_SetConfig+0xbc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_Base_SetConfig+0x20>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb6:	d108      	bne.n	8002fca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a21      	ldr	r2, [pc, #132]	; (8003054 <TIM_Base_SetConfig+0xbc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0x52>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0x52>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <TIM_Base_SetConfig+0xc0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0x52>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	; (800305c <TIM_Base_SetConfig+0xc4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <TIM_Base_SetConfig+0xbc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_Base_SetConfig+0xa0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <TIM_Base_SetConfig+0xc0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0xa0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <TIM_Base_SetConfig+0xc4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d103      	bne.n	8003040 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	615a      	str	r2, [r3, #20]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40012c00 	.word	0x40012c00
 8003058:	40014000 	.word	0x40014000
 800305c:	40014400 	.word	0x40014400

08003060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f023 0201 	bic.w	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f023 030a 	bic.w	r3, r3, #10
 800309c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030be:	b480      	push	{r7}
 80030c0:	b087      	sub	sp, #28
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	f023 0210 	bic.w	r2, r3, #16
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	031b      	lsls	r3, r3, #12
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	621a      	str	r2, [r3, #32]
}
 8003112:	bf00      	nop
 8003114:	371c      	adds	r7, #28
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	f043 0307 	orr.w	r3, r3, #7
 8003140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	609a      	str	r2, [r3, #8]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	021a      	lsls	r2, r3, #8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	431a      	orrs	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4313      	orrs	r3, r2
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	609a      	str	r2, [r3, #8]
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e04f      	b.n	800324c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d108      	bne.n	80031e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a14      	ldr	r2, [pc, #80]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d004      	beq.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d10c      	bne.n	800323a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	4313      	orrs	r3, r2
 8003230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40012c00 	.word	0x40012c00
 800325c:	40014000 	.word	0x40014000

08003260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e040      	b.n	80032f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd fc9c 	bl	8000bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2224      	movs	r2, #36	; 0x24
 800328c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f992 	bl	80035c8 <UART_SetConfig>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e022      	b.n	80032f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fb92 	bl	80039e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 fc19 	bl	8003b24 <UART_CheckIdleState>
 80032f2:	4603      	mov	r3, r0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	4613      	mov	r3, r2
 800330a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003310:	2b20      	cmp	r3, #32
 8003312:	f040 8082 	bne.w	800341a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_UART_Transmit+0x26>
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07a      	b.n	800341c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_UART_Transmit+0x38>
 8003330:	2302      	movs	r3, #2
 8003332:	e073      	b.n	800341c <HAL_UART_Transmit+0x120>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2221      	movs	r2, #33	; 0x21
 8003348:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334a:	f7fd fe2f 	bl	8000fac <HAL_GetTick>
 800334e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d108      	bne.n	800337c <HAL_UART_Transmit+0x80>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d104      	bne.n	800337c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	e003      	b.n	8003384 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800338c:	e02d      	b.n	80033ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fc0c 	bl	8003bb6 <UART_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e039      	b.n	800341c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10b      	bne.n	80033c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ba:	b292      	uxth	r2, r2
 80033bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	3302      	adds	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e008      	b.n	80033d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	b292      	uxth	r2, r2
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1cb      	bne.n	800338e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2140      	movs	r1, #64	; 0x40
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fbd8 	bl	8003bb6 <UART_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e005      	b.n	800341c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	4613      	mov	r3, r2
 8003432:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003438:	2b20      	cmp	r3, #32
 800343a:	f040 80bf 	bne.w	80035bc <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_UART_Receive+0x26>
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0b7      	b.n	80035be <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_UART_Receive+0x38>
 8003458:	2302      	movs	r3, #2
 800345a:	e0b0      	b.n	80035be <HAL_UART_Receive+0x19a>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2222      	movs	r2, #34	; 0x22
 8003470:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003478:	f7fd fd98 	bl	8000fac <HAL_GetTick>
 800347c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	88fa      	ldrh	r2, [r7, #6]
 8003482:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	d10e      	bne.n	80034b6 <HAL_UART_Receive+0x92>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_UART_Receive+0x88>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80034a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034aa:	e02d      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	22ff      	movs	r2, #255	; 0xff
 80034b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034b4:	e028      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10d      	bne.n	80034da <HAL_UART_Receive+0xb6>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_UART_Receive+0xac>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	22ff      	movs	r2, #255	; 0xff
 80034ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ce:	e01b      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	227f      	movs	r2, #127	; 0x7f
 80034d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034d8:	e016      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034e2:	d10d      	bne.n	8003500 <HAL_UART_Receive+0xdc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d104      	bne.n	80034f6 <HAL_UART_Receive+0xd2>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	227f      	movs	r2, #127	; 0x7f
 80034f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034f4:	e008      	b.n	8003508 <HAL_UART_Receive+0xe4>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	223f      	movs	r2, #63	; 0x3f
 80034fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034fe:	e003      	b.n	8003508 <HAL_UART_Receive+0xe4>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800350e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003518:	d108      	bne.n	800352c <HAL_UART_Receive+0x108>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d104      	bne.n	800352c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	61bb      	str	r3, [r7, #24]
 800352a:	e003      	b.n	8003534 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800353c:	e033      	b.n	80035a6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	2120      	movs	r1, #32
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 fb34 	bl	8003bb6 <UART_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e032      	b.n	80035be <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003564:	b29a      	uxth	r2, r3
 8003566:	8a7b      	ldrh	r3, [r7, #18]
 8003568:	4013      	ands	r3, r2
 800356a:	b29a      	uxth	r2, r3
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	3302      	adds	r3, #2
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e00d      	b.n	8003594 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800357e:	b29b      	uxth	r3, r3
 8003580:	b2da      	uxtb	r2, r3
 8003582:	8a7b      	ldrh	r3, [r7, #18]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4013      	ands	r3, r2
 8003588:	b2da      	uxtb	r2, r3
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3301      	adds	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1c5      	bne.n	800353e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	e000      	b.n	80035be <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80035bc:	2302      	movs	r3, #2
  }
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3720      	adds	r7, #32
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c8:	b5b0      	push	{r4, r5, r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4baf      	ldr	r3, [pc, #700]	; (80038b0 <UART_SetConfig+0x2e8>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	69f9      	ldr	r1, [r7, #28]
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4aa4      	ldr	r2, [pc, #656]	; (80038b4 <UART_SetConfig+0x2ec>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	4313      	orrs	r3, r2
 800362e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a9b      	ldr	r2, [pc, #620]	; (80038b8 <UART_SetConfig+0x2f0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d121      	bne.n	8003692 <UART_SetConfig+0xca>
 800364e:	4b9b      	ldr	r3, [pc, #620]	; (80038bc <UART_SetConfig+0x2f4>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b03      	cmp	r3, #3
 800365a:	d817      	bhi.n	800368c <UART_SetConfig+0xc4>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <UART_SetConfig+0x9c>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003675 	.word	0x08003675
 8003668:	08003681 	.word	0x08003681
 800366c:	0800367b 	.word	0x0800367b
 8003670:	08003687 	.word	0x08003687
 8003674:	2301      	movs	r3, #1
 8003676:	76fb      	strb	r3, [r7, #27]
 8003678:	e070      	b.n	800375c <UART_SetConfig+0x194>
 800367a:	2302      	movs	r3, #2
 800367c:	76fb      	strb	r3, [r7, #27]
 800367e:	e06d      	b.n	800375c <UART_SetConfig+0x194>
 8003680:	2304      	movs	r3, #4
 8003682:	76fb      	strb	r3, [r7, #27]
 8003684:	e06a      	b.n	800375c <UART_SetConfig+0x194>
 8003686:	2308      	movs	r3, #8
 8003688:	76fb      	strb	r3, [r7, #27]
 800368a:	e067      	b.n	800375c <UART_SetConfig+0x194>
 800368c:	2310      	movs	r3, #16
 800368e:	76fb      	strb	r3, [r7, #27]
 8003690:	e064      	b.n	800375c <UART_SetConfig+0x194>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a8a      	ldr	r2, [pc, #552]	; (80038c0 <UART_SetConfig+0x2f8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d132      	bne.n	8003702 <UART_SetConfig+0x13a>
 800369c:	4b87      	ldr	r3, [pc, #540]	; (80038bc <UART_SetConfig+0x2f4>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f003 030c 	and.w	r3, r3, #12
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d828      	bhi.n	80036fc <UART_SetConfig+0x134>
 80036aa:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <UART_SetConfig+0xe8>)
 80036ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b0:	080036e5 	.word	0x080036e5
 80036b4:	080036fd 	.word	0x080036fd
 80036b8:	080036fd 	.word	0x080036fd
 80036bc:	080036fd 	.word	0x080036fd
 80036c0:	080036f1 	.word	0x080036f1
 80036c4:	080036fd 	.word	0x080036fd
 80036c8:	080036fd 	.word	0x080036fd
 80036cc:	080036fd 	.word	0x080036fd
 80036d0:	080036eb 	.word	0x080036eb
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	080036fd 	.word	0x080036fd
 80036e0:	080036f7 	.word	0x080036f7
 80036e4:	2300      	movs	r3, #0
 80036e6:	76fb      	strb	r3, [r7, #27]
 80036e8:	e038      	b.n	800375c <UART_SetConfig+0x194>
 80036ea:	2302      	movs	r3, #2
 80036ec:	76fb      	strb	r3, [r7, #27]
 80036ee:	e035      	b.n	800375c <UART_SetConfig+0x194>
 80036f0:	2304      	movs	r3, #4
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e032      	b.n	800375c <UART_SetConfig+0x194>
 80036f6:	2308      	movs	r3, #8
 80036f8:	76fb      	strb	r3, [r7, #27]
 80036fa:	e02f      	b.n	800375c <UART_SetConfig+0x194>
 80036fc:	2310      	movs	r3, #16
 80036fe:	76fb      	strb	r3, [r7, #27]
 8003700:	e02c      	b.n	800375c <UART_SetConfig+0x194>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6b      	ldr	r2, [pc, #428]	; (80038b4 <UART_SetConfig+0x2ec>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d125      	bne.n	8003758 <UART_SetConfig+0x190>
 800370c:	4b6b      	ldr	r3, [pc, #428]	; (80038bc <UART_SetConfig+0x2f4>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800371a:	d017      	beq.n	800374c <UART_SetConfig+0x184>
 800371c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003720:	d817      	bhi.n	8003752 <UART_SetConfig+0x18a>
 8003722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003726:	d00b      	beq.n	8003740 <UART_SetConfig+0x178>
 8003728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372c:	d811      	bhi.n	8003752 <UART_SetConfig+0x18a>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <UART_SetConfig+0x172>
 8003732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003736:	d006      	beq.n	8003746 <UART_SetConfig+0x17e>
 8003738:	e00b      	b.n	8003752 <UART_SetConfig+0x18a>
 800373a:	2300      	movs	r3, #0
 800373c:	76fb      	strb	r3, [r7, #27]
 800373e:	e00d      	b.n	800375c <UART_SetConfig+0x194>
 8003740:	2302      	movs	r3, #2
 8003742:	76fb      	strb	r3, [r7, #27]
 8003744:	e00a      	b.n	800375c <UART_SetConfig+0x194>
 8003746:	2304      	movs	r3, #4
 8003748:	76fb      	strb	r3, [r7, #27]
 800374a:	e007      	b.n	800375c <UART_SetConfig+0x194>
 800374c:	2308      	movs	r3, #8
 800374e:	76fb      	strb	r3, [r7, #27]
 8003750:	e004      	b.n	800375c <UART_SetConfig+0x194>
 8003752:	2310      	movs	r3, #16
 8003754:	76fb      	strb	r3, [r7, #27]
 8003756:	e001      	b.n	800375c <UART_SetConfig+0x194>
 8003758:	2310      	movs	r3, #16
 800375a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a54      	ldr	r2, [pc, #336]	; (80038b4 <UART_SetConfig+0x2ec>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d173      	bne.n	800384e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003766:	7efb      	ldrb	r3, [r7, #27]
 8003768:	2b08      	cmp	r3, #8
 800376a:	d824      	bhi.n	80037b6 <UART_SetConfig+0x1ee>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <UART_SetConfig+0x1ac>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	08003799 	.word	0x08003799
 8003778:	080037b7 	.word	0x080037b7
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037b7 	.word	0x080037b7
 8003784:	080037a7 	.word	0x080037a7
 8003788:	080037b7 	.word	0x080037b7
 800378c:	080037b7 	.word	0x080037b7
 8003790:	080037b7 	.word	0x080037b7
 8003794:	080037af 	.word	0x080037af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7fe ff6e 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 800379c:	6178      	str	r0, [r7, #20]
        break;
 800379e:	e00f      	b.n	80037c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a0:	4b48      	ldr	r3, [pc, #288]	; (80038c4 <UART_SetConfig+0x2fc>)
 80037a2:	617b      	str	r3, [r7, #20]
        break;
 80037a4:	e00c      	b.n	80037c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a6:	f7fe fecf 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80037aa:	6178      	str	r0, [r7, #20]
        break;
 80037ac:	e008      	b.n	80037c0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b2:	617b      	str	r3, [r7, #20]
        break;
 80037b4:	e004      	b.n	80037c0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	76bb      	strb	r3, [r7, #26]
        break;
 80037be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80fe 	beq.w	80039c4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d305      	bcc.n	80037e4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d902      	bls.n	80037ea <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	76bb      	strb	r3, [r7, #26]
 80037e8:	e0ec      	b.n	80039c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f04f 0100 	mov.w	r1, #0
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	020b      	lsls	r3, r1, #8
 80037fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003800:	0202      	lsls	r2, r0, #8
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	6849      	ldr	r1, [r1, #4]
 8003806:	0849      	lsrs	r1, r1, #1
 8003808:	4608      	mov	r0, r1
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	1814      	adds	r4, r2, r0
 8003810:	eb43 0501 	adc.w	r5, r3, r1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	4620      	mov	r0, r4
 8003820:	4629      	mov	r1, r5
 8003822:	f7fc fd25 	bl	8000270 <__aeabi_uldivmod>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4613      	mov	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003834:	d308      	bcc.n	8003848 <UART_SetConfig+0x280>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383c:	d204      	bcs.n	8003848 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	e0bd      	b.n	80039c4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	76bb      	strb	r3, [r7, #26]
 800384c:	e0ba      	b.n	80039c4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003856:	d168      	bne.n	800392a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003858:	7efb      	ldrb	r3, [r7, #27]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d834      	bhi.n	80038c8 <UART_SetConfig+0x300>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <UART_SetConfig+0x29c>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003889 	.word	0x08003889
 8003868:	08003891 	.word	0x08003891
 800386c:	08003899 	.word	0x08003899
 8003870:	080038c9 	.word	0x080038c9
 8003874:	0800389f 	.word	0x0800389f
 8003878:	080038c9 	.word	0x080038c9
 800387c:	080038c9 	.word	0x080038c9
 8003880:	080038c9 	.word	0x080038c9
 8003884:	080038a7 	.word	0x080038a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003888:	f7fe fef6 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 800388c:	6178      	str	r0, [r7, #20]
        break;
 800388e:	e020      	b.n	80038d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003890:	f7fe ff08 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8003894:	6178      	str	r0, [r7, #20]
        break;
 8003896:	e01c      	b.n	80038d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <UART_SetConfig+0x2fc>)
 800389a:	617b      	str	r3, [r7, #20]
        break;
 800389c:	e019      	b.n	80038d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800389e:	f7fe fe53 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 80038a2:	6178      	str	r0, [r7, #20]
        break;
 80038a4:	e015      	b.n	80038d2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	617b      	str	r3, [r7, #20]
        break;
 80038ac:	e011      	b.n	80038d2 <UART_SetConfig+0x30a>
 80038ae:	bf00      	nop
 80038b0:	efff69f3 	.word	0xefff69f3
 80038b4:	40008000 	.word	0x40008000
 80038b8:	40013800 	.word	0x40013800
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40004400 	.word	0x40004400
 80038c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	76bb      	strb	r3, [r7, #26]
        break;
 80038d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d075      	beq.n	80039c4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005a      	lsls	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	441a      	add	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b0f      	cmp	r3, #15
 80038f4:	d916      	bls.n	8003924 <UART_SetConfig+0x35c>
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d212      	bcs.n	8003924 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f023 030f 	bic.w	r3, r3, #15
 8003906:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	b29b      	uxth	r3, r3
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	b29a      	uxth	r2, r3
 8003914:	89fb      	ldrh	r3, [r7, #14]
 8003916:	4313      	orrs	r3, r2
 8003918:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	89fa      	ldrh	r2, [r7, #14]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	e04f      	b.n	80039c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	76bb      	strb	r3, [r7, #26]
 8003928:	e04c      	b.n	80039c4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800392a:	7efb      	ldrb	r3, [r7, #27]
 800392c:	2b08      	cmp	r3, #8
 800392e:	d828      	bhi.n	8003982 <UART_SetConfig+0x3ba>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <UART_SetConfig+0x370>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	0800395d 	.word	0x0800395d
 800393c:	08003965 	.word	0x08003965
 8003940:	0800396d 	.word	0x0800396d
 8003944:	08003983 	.word	0x08003983
 8003948:	08003973 	.word	0x08003973
 800394c:	08003983 	.word	0x08003983
 8003950:	08003983 	.word	0x08003983
 8003954:	08003983 	.word	0x08003983
 8003958:	0800397b 	.word	0x0800397b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800395c:	f7fe fe8c 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8003960:	6178      	str	r0, [r7, #20]
        break;
 8003962:	e013      	b.n	800398c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003964:	f7fe fe9e 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8003968:	6178      	str	r0, [r7, #20]
        break;
 800396a:	e00f      	b.n	800398c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <UART_SetConfig+0x414>)
 800396e:	617b      	str	r3, [r7, #20]
        break;
 8003970:	e00c      	b.n	800398c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003972:	f7fe fde9 	bl	8002548 <HAL_RCC_GetSysClockFreq>
 8003976:	6178      	str	r0, [r7, #20]
        break;
 8003978:	e008      	b.n	800398c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800397e:	617b      	str	r3, [r7, #20]
        break;
 8003980:	e004      	b.n	800398c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	76bb      	strb	r3, [r7, #26]
        break;
 800398a:	bf00      	nop
    }

    if (pclk != 0U)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	085a      	lsrs	r2, r3, #1
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	441a      	add	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b0f      	cmp	r3, #15
 80039ac:	d908      	bls.n	80039c0 <UART_SetConfig+0x3f8>
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b4:	d204      	bcs.n	80039c0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	e001      	b.n	80039c4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039d0:	7ebb      	ldrb	r3, [r7, #26]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bdb0      	pop	{r4, r5, r7, pc}
 80039da:	bf00      	nop
 80039dc:	00f42400 	.word	0x00f42400

080039e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00a      	beq.n	8003ab4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01a      	beq.n	8003af6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ade:	d10a      	bne.n	8003af6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b34:	f7fd fa3a 	bl	8000fac <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0308 	and.w	r3, r3, #8
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d10e      	bne.n	8003b66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f82d 	bl	8003bb6 <UART_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e023      	b.n	8003bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d10e      	bne.n	8003b92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f817 	bl	8003bb6 <UART_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e00d      	b.n	8003bae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2220      	movs	r2, #32
 8003b96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	60f8      	str	r0, [r7, #12]
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc6:	e05e      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bce:	d05a      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bd0:	f7fd f9ec 	bl	8000fac <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d302      	bcc.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d11b      	bne.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bf4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e043      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d02c      	beq.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3a:	d124      	bne.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c44:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00f      	b.n	8003ca6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	bf0c      	ite	eq
 8003c96:	2301      	moveq	r3, #1
 8003c98:	2300      	movne	r3, #0
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d091      	beq.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <__errno>:
 8003cb0:	4b01      	ldr	r3, [pc, #4]	; (8003cb8 <__errno+0x8>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	200000d4 	.word	0x200000d4

08003cbc <getchar>:
 8003cbc:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <getchar+0x20>)
 8003cbe:	b510      	push	{r4, lr}
 8003cc0:	681c      	ldr	r4, [r3, #0]
 8003cc2:	b124      	cbz	r4, 8003cce <getchar+0x12>
 8003cc4:	69a3      	ldr	r3, [r4, #24]
 8003cc6:	b913      	cbnz	r3, 8003cce <getchar+0x12>
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f000 faaf 	bl	800422c <__sinit>
 8003cce:	6861      	ldr	r1, [r4, #4]
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd6:	f000 bb63 	b.w	80043a0 <_getc_r>
 8003cda:	bf00      	nop
 8003cdc:	200000d4 	.word	0x200000d4

08003ce0 <__libc_init_array>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	4d0d      	ldr	r5, [pc, #52]	; (8003d18 <__libc_init_array+0x38>)
 8003ce4:	4c0d      	ldr	r4, [pc, #52]	; (8003d1c <__libc_init_array+0x3c>)
 8003ce6:	1b64      	subs	r4, r4, r5
 8003ce8:	10a4      	asrs	r4, r4, #2
 8003cea:	2600      	movs	r6, #0
 8003cec:	42a6      	cmp	r6, r4
 8003cee:	d109      	bne.n	8003d04 <__libc_init_array+0x24>
 8003cf0:	4d0b      	ldr	r5, [pc, #44]	; (8003d20 <__libc_init_array+0x40>)
 8003cf2:	4c0c      	ldr	r4, [pc, #48]	; (8003d24 <__libc_init_array+0x44>)
 8003cf4:	f001 f91c 	bl	8004f30 <_init>
 8003cf8:	1b64      	subs	r4, r4, r5
 8003cfa:	10a4      	asrs	r4, r4, #2
 8003cfc:	2600      	movs	r6, #0
 8003cfe:	42a6      	cmp	r6, r4
 8003d00:	d105      	bne.n	8003d0e <__libc_init_array+0x2e>
 8003d02:	bd70      	pop	{r4, r5, r6, pc}
 8003d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d08:	4798      	blx	r3
 8003d0a:	3601      	adds	r6, #1
 8003d0c:	e7ee      	b.n	8003cec <__libc_init_array+0xc>
 8003d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d12:	4798      	blx	r3
 8003d14:	3601      	adds	r6, #1
 8003d16:	e7f2      	b.n	8003cfe <__libc_init_array+0x1e>
 8003d18:	080050fc 	.word	0x080050fc
 8003d1c:	080050fc 	.word	0x080050fc
 8003d20:	080050fc 	.word	0x080050fc
 8003d24:	08005100 	.word	0x08005100

08003d28 <memset>:
 8003d28:	4402      	add	r2, r0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d100      	bne.n	8003d32 <memset+0xa>
 8003d30:	4770      	bx	lr
 8003d32:	f803 1b01 	strb.w	r1, [r3], #1
 8003d36:	e7f9      	b.n	8003d2c <memset+0x4>

08003d38 <iprintf>:
 8003d38:	b40f      	push	{r0, r1, r2, r3}
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <iprintf+0x2c>)
 8003d3c:	b513      	push	{r0, r1, r4, lr}
 8003d3e:	681c      	ldr	r4, [r3, #0]
 8003d40:	b124      	cbz	r4, 8003d4c <iprintf+0x14>
 8003d42:	69a3      	ldr	r3, [r4, #24]
 8003d44:	b913      	cbnz	r3, 8003d4c <iprintf+0x14>
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 fa70 	bl	800422c <__sinit>
 8003d4c:	ab05      	add	r3, sp, #20
 8003d4e:	9a04      	ldr	r2, [sp, #16]
 8003d50:	68a1      	ldr	r1, [r4, #8]
 8003d52:	9301      	str	r3, [sp, #4]
 8003d54:	4620      	mov	r0, r4
 8003d56:	f000 fc9f 	bl	8004698 <_vfiprintf_r>
 8003d5a:	b002      	add	sp, #8
 8003d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d60:	b004      	add	sp, #16
 8003d62:	4770      	bx	lr
 8003d64:	200000d4 	.word	0x200000d4

08003d68 <_puts_r>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	460e      	mov	r6, r1
 8003d6c:	4605      	mov	r5, r0
 8003d6e:	b118      	cbz	r0, 8003d78 <_puts_r+0x10>
 8003d70:	6983      	ldr	r3, [r0, #24]
 8003d72:	b90b      	cbnz	r3, 8003d78 <_puts_r+0x10>
 8003d74:	f000 fa5a 	bl	800422c <__sinit>
 8003d78:	69ab      	ldr	r3, [r5, #24]
 8003d7a:	68ac      	ldr	r4, [r5, #8]
 8003d7c:	b913      	cbnz	r3, 8003d84 <_puts_r+0x1c>
 8003d7e:	4628      	mov	r0, r5
 8003d80:	f000 fa54 	bl	800422c <__sinit>
 8003d84:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <_puts_r+0xd0>)
 8003d86:	429c      	cmp	r4, r3
 8003d88:	d120      	bne.n	8003dcc <_puts_r+0x64>
 8003d8a:	686c      	ldr	r4, [r5, #4]
 8003d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d8e:	07db      	lsls	r3, r3, #31
 8003d90:	d405      	bmi.n	8003d9e <_puts_r+0x36>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	0598      	lsls	r0, r3, #22
 8003d96:	d402      	bmi.n	8003d9e <_puts_r+0x36>
 8003d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d9a:	f000 fb42 	bl	8004422 <__retarget_lock_acquire_recursive>
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	0719      	lsls	r1, r3, #28
 8003da2:	d51d      	bpl.n	8003de0 <_puts_r+0x78>
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	b1db      	cbz	r3, 8003de0 <_puts_r+0x78>
 8003da8:	3e01      	subs	r6, #1
 8003daa:	68a3      	ldr	r3, [r4, #8]
 8003dac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003db0:	3b01      	subs	r3, #1
 8003db2:	60a3      	str	r3, [r4, #8]
 8003db4:	bb39      	cbnz	r1, 8003e06 <_puts_r+0x9e>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	da38      	bge.n	8003e2c <_puts_r+0xc4>
 8003dba:	4622      	mov	r2, r4
 8003dbc:	210a      	movs	r1, #10
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f000 f848 	bl	8003e54 <__swbuf_r>
 8003dc4:	3001      	adds	r0, #1
 8003dc6:	d011      	beq.n	8003dec <_puts_r+0x84>
 8003dc8:	250a      	movs	r5, #10
 8003dca:	e011      	b.n	8003df0 <_puts_r+0x88>
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <_puts_r+0xd4>)
 8003dce:	429c      	cmp	r4, r3
 8003dd0:	d101      	bne.n	8003dd6 <_puts_r+0x6e>
 8003dd2:	68ac      	ldr	r4, [r5, #8]
 8003dd4:	e7da      	b.n	8003d8c <_puts_r+0x24>
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <_puts_r+0xd8>)
 8003dd8:	429c      	cmp	r4, r3
 8003dda:	bf08      	it	eq
 8003ddc:	68ec      	ldreq	r4, [r5, #12]
 8003dde:	e7d5      	b.n	8003d8c <_puts_r+0x24>
 8003de0:	4621      	mov	r1, r4
 8003de2:	4628      	mov	r0, r5
 8003de4:	f000 f888 	bl	8003ef8 <__swsetup_r>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d0dd      	beq.n	8003da8 <_puts_r+0x40>
 8003dec:	f04f 35ff 	mov.w	r5, #4294967295
 8003df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003df2:	07da      	lsls	r2, r3, #31
 8003df4:	d405      	bmi.n	8003e02 <_puts_r+0x9a>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	059b      	lsls	r3, r3, #22
 8003dfa:	d402      	bmi.n	8003e02 <_puts_r+0x9a>
 8003dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dfe:	f000 fb11 	bl	8004424 <__retarget_lock_release_recursive>
 8003e02:	4628      	mov	r0, r5
 8003e04:	bd70      	pop	{r4, r5, r6, pc}
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	da04      	bge.n	8003e14 <_puts_r+0xac>
 8003e0a:	69a2      	ldr	r2, [r4, #24]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	dc06      	bgt.n	8003e1e <_puts_r+0xb6>
 8003e10:	290a      	cmp	r1, #10
 8003e12:	d004      	beq.n	8003e1e <_puts_r+0xb6>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	6022      	str	r2, [r4, #0]
 8003e1a:	7019      	strb	r1, [r3, #0]
 8003e1c:	e7c5      	b.n	8003daa <_puts_r+0x42>
 8003e1e:	4622      	mov	r2, r4
 8003e20:	4628      	mov	r0, r5
 8003e22:	f000 f817 	bl	8003e54 <__swbuf_r>
 8003e26:	3001      	adds	r0, #1
 8003e28:	d1bf      	bne.n	8003daa <_puts_r+0x42>
 8003e2a:	e7df      	b.n	8003dec <_puts_r+0x84>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	250a      	movs	r5, #10
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	6022      	str	r2, [r4, #0]
 8003e34:	701d      	strb	r5, [r3, #0]
 8003e36:	e7db      	b.n	8003df0 <_puts_r+0x88>
 8003e38:	08005080 	.word	0x08005080
 8003e3c:	080050a0 	.word	0x080050a0
 8003e40:	08005060 	.word	0x08005060

08003e44 <puts>:
 8003e44:	4b02      	ldr	r3, [pc, #8]	; (8003e50 <puts+0xc>)
 8003e46:	4601      	mov	r1, r0
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	f7ff bf8d 	b.w	8003d68 <_puts_r>
 8003e4e:	bf00      	nop
 8003e50:	200000d4 	.word	0x200000d4

08003e54 <__swbuf_r>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	460e      	mov	r6, r1
 8003e58:	4614      	mov	r4, r2
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	b118      	cbz	r0, 8003e66 <__swbuf_r+0x12>
 8003e5e:	6983      	ldr	r3, [r0, #24]
 8003e60:	b90b      	cbnz	r3, 8003e66 <__swbuf_r+0x12>
 8003e62:	f000 f9e3 	bl	800422c <__sinit>
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <__swbuf_r+0x98>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d12b      	bne.n	8003ec4 <__swbuf_r+0x70>
 8003e6c:	686c      	ldr	r4, [r5, #4]
 8003e6e:	69a3      	ldr	r3, [r4, #24]
 8003e70:	60a3      	str	r3, [r4, #8]
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	071a      	lsls	r2, r3, #28
 8003e76:	d52f      	bpl.n	8003ed8 <__swbuf_r+0x84>
 8003e78:	6923      	ldr	r3, [r4, #16]
 8003e7a:	b36b      	cbz	r3, 8003ed8 <__swbuf_r+0x84>
 8003e7c:	6923      	ldr	r3, [r4, #16]
 8003e7e:	6820      	ldr	r0, [r4, #0]
 8003e80:	1ac0      	subs	r0, r0, r3
 8003e82:	6963      	ldr	r3, [r4, #20]
 8003e84:	b2f6      	uxtb	r6, r6
 8003e86:	4283      	cmp	r3, r0
 8003e88:	4637      	mov	r7, r6
 8003e8a:	dc04      	bgt.n	8003e96 <__swbuf_r+0x42>
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 f926 	bl	80040e0 <_fflush_r>
 8003e94:	bb30      	cbnz	r0, 8003ee4 <__swbuf_r+0x90>
 8003e96:	68a3      	ldr	r3, [r4, #8]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	60a3      	str	r3, [r4, #8]
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	6022      	str	r2, [r4, #0]
 8003ea2:	701e      	strb	r6, [r3, #0]
 8003ea4:	6963      	ldr	r3, [r4, #20]
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	4283      	cmp	r3, r0
 8003eaa:	d004      	beq.n	8003eb6 <__swbuf_r+0x62>
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	07db      	lsls	r3, r3, #31
 8003eb0:	d506      	bpl.n	8003ec0 <__swbuf_r+0x6c>
 8003eb2:	2e0a      	cmp	r6, #10
 8003eb4:	d104      	bne.n	8003ec0 <__swbuf_r+0x6c>
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f911 	bl	80040e0 <_fflush_r>
 8003ebe:	b988      	cbnz	r0, 8003ee4 <__swbuf_r+0x90>
 8003ec0:	4638      	mov	r0, r7
 8003ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <__swbuf_r+0x9c>)
 8003ec6:	429c      	cmp	r4, r3
 8003ec8:	d101      	bne.n	8003ece <__swbuf_r+0x7a>
 8003eca:	68ac      	ldr	r4, [r5, #8]
 8003ecc:	e7cf      	b.n	8003e6e <__swbuf_r+0x1a>
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <__swbuf_r+0xa0>)
 8003ed0:	429c      	cmp	r4, r3
 8003ed2:	bf08      	it	eq
 8003ed4:	68ec      	ldreq	r4, [r5, #12]
 8003ed6:	e7ca      	b.n	8003e6e <__swbuf_r+0x1a>
 8003ed8:	4621      	mov	r1, r4
 8003eda:	4628      	mov	r0, r5
 8003edc:	f000 f80c 	bl	8003ef8 <__swsetup_r>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d0cb      	beq.n	8003e7c <__swbuf_r+0x28>
 8003ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ee8:	e7ea      	b.n	8003ec0 <__swbuf_r+0x6c>
 8003eea:	bf00      	nop
 8003eec:	08005080 	.word	0x08005080
 8003ef0:	080050a0 	.word	0x080050a0
 8003ef4:	08005060 	.word	0x08005060

08003ef8 <__swsetup_r>:
 8003ef8:	4b32      	ldr	r3, [pc, #200]	; (8003fc4 <__swsetup_r+0xcc>)
 8003efa:	b570      	push	{r4, r5, r6, lr}
 8003efc:	681d      	ldr	r5, [r3, #0]
 8003efe:	4606      	mov	r6, r0
 8003f00:	460c      	mov	r4, r1
 8003f02:	b125      	cbz	r5, 8003f0e <__swsetup_r+0x16>
 8003f04:	69ab      	ldr	r3, [r5, #24]
 8003f06:	b913      	cbnz	r3, 8003f0e <__swsetup_r+0x16>
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 f98f 	bl	800422c <__sinit>
 8003f0e:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <__swsetup_r+0xd0>)
 8003f10:	429c      	cmp	r4, r3
 8003f12:	d10f      	bne.n	8003f34 <__swsetup_r+0x3c>
 8003f14:	686c      	ldr	r4, [r5, #4]
 8003f16:	89a3      	ldrh	r3, [r4, #12]
 8003f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f1c:	0719      	lsls	r1, r3, #28
 8003f1e:	d42c      	bmi.n	8003f7a <__swsetup_r+0x82>
 8003f20:	06dd      	lsls	r5, r3, #27
 8003f22:	d411      	bmi.n	8003f48 <__swsetup_r+0x50>
 8003f24:	2309      	movs	r3, #9
 8003f26:	6033      	str	r3, [r6, #0]
 8003f28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f2c:	81a3      	strh	r3, [r4, #12]
 8003f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f32:	e03e      	b.n	8003fb2 <__swsetup_r+0xba>
 8003f34:	4b25      	ldr	r3, [pc, #148]	; (8003fcc <__swsetup_r+0xd4>)
 8003f36:	429c      	cmp	r4, r3
 8003f38:	d101      	bne.n	8003f3e <__swsetup_r+0x46>
 8003f3a:	68ac      	ldr	r4, [r5, #8]
 8003f3c:	e7eb      	b.n	8003f16 <__swsetup_r+0x1e>
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <__swsetup_r+0xd8>)
 8003f40:	429c      	cmp	r4, r3
 8003f42:	bf08      	it	eq
 8003f44:	68ec      	ldreq	r4, [r5, #12]
 8003f46:	e7e6      	b.n	8003f16 <__swsetup_r+0x1e>
 8003f48:	0758      	lsls	r0, r3, #29
 8003f4a:	d512      	bpl.n	8003f72 <__swsetup_r+0x7a>
 8003f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f4e:	b141      	cbz	r1, 8003f62 <__swsetup_r+0x6a>
 8003f50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f54:	4299      	cmp	r1, r3
 8003f56:	d002      	beq.n	8003f5e <__swsetup_r+0x66>
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f000 fac9 	bl	80044f0 <_free_r>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	6363      	str	r3, [r4, #52]	; 0x34
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f68:	81a3      	strh	r3, [r4, #12]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	6063      	str	r3, [r4, #4]
 8003f6e:	6923      	ldr	r3, [r4, #16]
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	f043 0308 	orr.w	r3, r3, #8
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	b94b      	cbnz	r3, 8003f92 <__swsetup_r+0x9a>
 8003f7e:	89a3      	ldrh	r3, [r4, #12]
 8003f80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f88:	d003      	beq.n	8003f92 <__swsetup_r+0x9a>
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 fa6f 	bl	8004470 <__smakebuf_r>
 8003f92:	89a0      	ldrh	r0, [r4, #12]
 8003f94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f98:	f010 0301 	ands.w	r3, r0, #1
 8003f9c:	d00a      	beq.n	8003fb4 <__swsetup_r+0xbc>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60a3      	str	r3, [r4, #8]
 8003fa2:	6963      	ldr	r3, [r4, #20]
 8003fa4:	425b      	negs	r3, r3
 8003fa6:	61a3      	str	r3, [r4, #24]
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	b943      	cbnz	r3, 8003fbe <__swsetup_r+0xc6>
 8003fac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fb0:	d1ba      	bne.n	8003f28 <__swsetup_r+0x30>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	0781      	lsls	r1, r0, #30
 8003fb6:	bf58      	it	pl
 8003fb8:	6963      	ldrpl	r3, [r4, #20]
 8003fba:	60a3      	str	r3, [r4, #8]
 8003fbc:	e7f4      	b.n	8003fa8 <__swsetup_r+0xb0>
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	e7f7      	b.n	8003fb2 <__swsetup_r+0xba>
 8003fc2:	bf00      	nop
 8003fc4:	200000d4 	.word	0x200000d4
 8003fc8:	08005080 	.word	0x08005080
 8003fcc:	080050a0 	.word	0x080050a0
 8003fd0:	08005060 	.word	0x08005060

08003fd4 <__sflush_r>:
 8003fd4:	898a      	ldrh	r2, [r1, #12]
 8003fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fda:	4605      	mov	r5, r0
 8003fdc:	0710      	lsls	r0, r2, #28
 8003fde:	460c      	mov	r4, r1
 8003fe0:	d458      	bmi.n	8004094 <__sflush_r+0xc0>
 8003fe2:	684b      	ldr	r3, [r1, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	dc05      	bgt.n	8003ff4 <__sflush_r+0x20>
 8003fe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	dc02      	bgt.n	8003ff4 <__sflush_r+0x20>
 8003fee:	2000      	movs	r0, #0
 8003ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ff6:	2e00      	cmp	r6, #0
 8003ff8:	d0f9      	beq.n	8003fee <__sflush_r+0x1a>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004000:	682f      	ldr	r7, [r5, #0]
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	d032      	beq.n	800406c <__sflush_r+0x98>
 8004006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	075a      	lsls	r2, r3, #29
 800400c:	d505      	bpl.n	800401a <__sflush_r+0x46>
 800400e:	6863      	ldr	r3, [r4, #4]
 8004010:	1ac0      	subs	r0, r0, r3
 8004012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004014:	b10b      	cbz	r3, 800401a <__sflush_r+0x46>
 8004016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004018:	1ac0      	subs	r0, r0, r3
 800401a:	2300      	movs	r3, #0
 800401c:	4602      	mov	r2, r0
 800401e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004020:	6a21      	ldr	r1, [r4, #32]
 8004022:	4628      	mov	r0, r5
 8004024:	47b0      	blx	r6
 8004026:	1c43      	adds	r3, r0, #1
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	d106      	bne.n	800403a <__sflush_r+0x66>
 800402c:	6829      	ldr	r1, [r5, #0]
 800402e:	291d      	cmp	r1, #29
 8004030:	d82c      	bhi.n	800408c <__sflush_r+0xb8>
 8004032:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <__sflush_r+0x108>)
 8004034:	40ca      	lsrs	r2, r1
 8004036:	07d6      	lsls	r6, r2, #31
 8004038:	d528      	bpl.n	800408c <__sflush_r+0xb8>
 800403a:	2200      	movs	r2, #0
 800403c:	6062      	str	r2, [r4, #4]
 800403e:	04d9      	lsls	r1, r3, #19
 8004040:	6922      	ldr	r2, [r4, #16]
 8004042:	6022      	str	r2, [r4, #0]
 8004044:	d504      	bpl.n	8004050 <__sflush_r+0x7c>
 8004046:	1c42      	adds	r2, r0, #1
 8004048:	d101      	bne.n	800404e <__sflush_r+0x7a>
 800404a:	682b      	ldr	r3, [r5, #0]
 800404c:	b903      	cbnz	r3, 8004050 <__sflush_r+0x7c>
 800404e:	6560      	str	r0, [r4, #84]	; 0x54
 8004050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004052:	602f      	str	r7, [r5, #0]
 8004054:	2900      	cmp	r1, #0
 8004056:	d0ca      	beq.n	8003fee <__sflush_r+0x1a>
 8004058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800405c:	4299      	cmp	r1, r3
 800405e:	d002      	beq.n	8004066 <__sflush_r+0x92>
 8004060:	4628      	mov	r0, r5
 8004062:	f000 fa45 	bl	80044f0 <_free_r>
 8004066:	2000      	movs	r0, #0
 8004068:	6360      	str	r0, [r4, #52]	; 0x34
 800406a:	e7c1      	b.n	8003ff0 <__sflush_r+0x1c>
 800406c:	6a21      	ldr	r1, [r4, #32]
 800406e:	2301      	movs	r3, #1
 8004070:	4628      	mov	r0, r5
 8004072:	47b0      	blx	r6
 8004074:	1c41      	adds	r1, r0, #1
 8004076:	d1c7      	bne.n	8004008 <__sflush_r+0x34>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0c4      	beq.n	8004008 <__sflush_r+0x34>
 800407e:	2b1d      	cmp	r3, #29
 8004080:	d001      	beq.n	8004086 <__sflush_r+0xb2>
 8004082:	2b16      	cmp	r3, #22
 8004084:	d101      	bne.n	800408a <__sflush_r+0xb6>
 8004086:	602f      	str	r7, [r5, #0]
 8004088:	e7b1      	b.n	8003fee <__sflush_r+0x1a>
 800408a:	89a3      	ldrh	r3, [r4, #12]
 800408c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004090:	81a3      	strh	r3, [r4, #12]
 8004092:	e7ad      	b.n	8003ff0 <__sflush_r+0x1c>
 8004094:	690f      	ldr	r7, [r1, #16]
 8004096:	2f00      	cmp	r7, #0
 8004098:	d0a9      	beq.n	8003fee <__sflush_r+0x1a>
 800409a:	0793      	lsls	r3, r2, #30
 800409c:	680e      	ldr	r6, [r1, #0]
 800409e:	bf08      	it	eq
 80040a0:	694b      	ldreq	r3, [r1, #20]
 80040a2:	600f      	str	r7, [r1, #0]
 80040a4:	bf18      	it	ne
 80040a6:	2300      	movne	r3, #0
 80040a8:	eba6 0807 	sub.w	r8, r6, r7
 80040ac:	608b      	str	r3, [r1, #8]
 80040ae:	f1b8 0f00 	cmp.w	r8, #0
 80040b2:	dd9c      	ble.n	8003fee <__sflush_r+0x1a>
 80040b4:	6a21      	ldr	r1, [r4, #32]
 80040b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040b8:	4643      	mov	r3, r8
 80040ba:	463a      	mov	r2, r7
 80040bc:	4628      	mov	r0, r5
 80040be:	47b0      	blx	r6
 80040c0:	2800      	cmp	r0, #0
 80040c2:	dc06      	bgt.n	80040d2 <__sflush_r+0xfe>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	f04f 30ff 	mov.w	r0, #4294967295
 80040d0:	e78e      	b.n	8003ff0 <__sflush_r+0x1c>
 80040d2:	4407      	add	r7, r0
 80040d4:	eba8 0800 	sub.w	r8, r8, r0
 80040d8:	e7e9      	b.n	80040ae <__sflush_r+0xda>
 80040da:	bf00      	nop
 80040dc:	20400001 	.word	0x20400001

080040e0 <_fflush_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	690b      	ldr	r3, [r1, #16]
 80040e4:	4605      	mov	r5, r0
 80040e6:	460c      	mov	r4, r1
 80040e8:	b913      	cbnz	r3, 80040f0 <_fflush_r+0x10>
 80040ea:	2500      	movs	r5, #0
 80040ec:	4628      	mov	r0, r5
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	b118      	cbz	r0, 80040fa <_fflush_r+0x1a>
 80040f2:	6983      	ldr	r3, [r0, #24]
 80040f4:	b90b      	cbnz	r3, 80040fa <_fflush_r+0x1a>
 80040f6:	f000 f899 	bl	800422c <__sinit>
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <_fflush_r+0x6c>)
 80040fc:	429c      	cmp	r4, r3
 80040fe:	d11b      	bne.n	8004138 <_fflush_r+0x58>
 8004100:	686c      	ldr	r4, [r5, #4]
 8004102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ef      	beq.n	80040ea <_fflush_r+0xa>
 800410a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800410c:	07d0      	lsls	r0, r2, #31
 800410e:	d404      	bmi.n	800411a <_fflush_r+0x3a>
 8004110:	0599      	lsls	r1, r3, #22
 8004112:	d402      	bmi.n	800411a <_fflush_r+0x3a>
 8004114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004116:	f000 f984 	bl	8004422 <__retarget_lock_acquire_recursive>
 800411a:	4628      	mov	r0, r5
 800411c:	4621      	mov	r1, r4
 800411e:	f7ff ff59 	bl	8003fd4 <__sflush_r>
 8004122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004124:	07da      	lsls	r2, r3, #31
 8004126:	4605      	mov	r5, r0
 8004128:	d4e0      	bmi.n	80040ec <_fflush_r+0xc>
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	059b      	lsls	r3, r3, #22
 800412e:	d4dd      	bmi.n	80040ec <_fflush_r+0xc>
 8004130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004132:	f000 f977 	bl	8004424 <__retarget_lock_release_recursive>
 8004136:	e7d9      	b.n	80040ec <_fflush_r+0xc>
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <_fflush_r+0x70>)
 800413a:	429c      	cmp	r4, r3
 800413c:	d101      	bne.n	8004142 <_fflush_r+0x62>
 800413e:	68ac      	ldr	r4, [r5, #8]
 8004140:	e7df      	b.n	8004102 <_fflush_r+0x22>
 8004142:	4b04      	ldr	r3, [pc, #16]	; (8004154 <_fflush_r+0x74>)
 8004144:	429c      	cmp	r4, r3
 8004146:	bf08      	it	eq
 8004148:	68ec      	ldreq	r4, [r5, #12]
 800414a:	e7da      	b.n	8004102 <_fflush_r+0x22>
 800414c:	08005080 	.word	0x08005080
 8004150:	080050a0 	.word	0x080050a0
 8004154:	08005060 	.word	0x08005060

08004158 <fflush>:
 8004158:	4601      	mov	r1, r0
 800415a:	b920      	cbnz	r0, 8004166 <fflush+0xe>
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <fflush+0x18>)
 800415e:	4905      	ldr	r1, [pc, #20]	; (8004174 <fflush+0x1c>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	f000 b8fe 	b.w	8004362 <_fwalk_reent>
 8004166:	4b04      	ldr	r3, [pc, #16]	; (8004178 <fflush+0x20>)
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	f7ff bfb9 	b.w	80040e0 <_fflush_r>
 800416e:	bf00      	nop
 8004170:	0800505c 	.word	0x0800505c
 8004174:	080040e1 	.word	0x080040e1
 8004178:	200000d4 	.word	0x200000d4

0800417c <std>:
 800417c:	2300      	movs	r3, #0
 800417e:	b510      	push	{r4, lr}
 8004180:	4604      	mov	r4, r0
 8004182:	e9c0 3300 	strd	r3, r3, [r0]
 8004186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800418a:	6083      	str	r3, [r0, #8]
 800418c:	8181      	strh	r1, [r0, #12]
 800418e:	6643      	str	r3, [r0, #100]	; 0x64
 8004190:	81c2      	strh	r2, [r0, #14]
 8004192:	6183      	str	r3, [r0, #24]
 8004194:	4619      	mov	r1, r3
 8004196:	2208      	movs	r2, #8
 8004198:	305c      	adds	r0, #92	; 0x5c
 800419a:	f7ff fdc5 	bl	8003d28 <memset>
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <std+0x38>)
 80041a0:	6263      	str	r3, [r4, #36]	; 0x24
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <std+0x3c>)
 80041a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <std+0x40>)
 80041a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <std+0x44>)
 80041ac:	6224      	str	r4, [r4, #32]
 80041ae:	6323      	str	r3, [r4, #48]	; 0x30
 80041b0:	bd10      	pop	{r4, pc}
 80041b2:	bf00      	nop
 80041b4:	08004c99 	.word	0x08004c99
 80041b8:	08004cbb 	.word	0x08004cbb
 80041bc:	08004cf3 	.word	0x08004cf3
 80041c0:	08004d17 	.word	0x08004d17

080041c4 <_cleanup_r>:
 80041c4:	4901      	ldr	r1, [pc, #4]	; (80041cc <_cleanup_r+0x8>)
 80041c6:	f000 b8cc 	b.w	8004362 <_fwalk_reent>
 80041ca:	bf00      	nop
 80041cc:	080040e1 	.word	0x080040e1

080041d0 <__sfmoreglue>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	1e4a      	subs	r2, r1, #1
 80041d4:	2568      	movs	r5, #104	; 0x68
 80041d6:	4355      	muls	r5, r2
 80041d8:	460e      	mov	r6, r1
 80041da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041de:	f000 f9d7 	bl	8004590 <_malloc_r>
 80041e2:	4604      	mov	r4, r0
 80041e4:	b140      	cbz	r0, 80041f8 <__sfmoreglue+0x28>
 80041e6:	2100      	movs	r1, #0
 80041e8:	e9c0 1600 	strd	r1, r6, [r0]
 80041ec:	300c      	adds	r0, #12
 80041ee:	60a0      	str	r0, [r4, #8]
 80041f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041f4:	f7ff fd98 	bl	8003d28 <memset>
 80041f8:	4620      	mov	r0, r4
 80041fa:	bd70      	pop	{r4, r5, r6, pc}

080041fc <__sfp_lock_acquire>:
 80041fc:	4801      	ldr	r0, [pc, #4]	; (8004204 <__sfp_lock_acquire+0x8>)
 80041fe:	f000 b910 	b.w	8004422 <__retarget_lock_acquire_recursive>
 8004202:	bf00      	nop
 8004204:	20000298 	.word	0x20000298

08004208 <__sfp_lock_release>:
 8004208:	4801      	ldr	r0, [pc, #4]	; (8004210 <__sfp_lock_release+0x8>)
 800420a:	f000 b90b 	b.w	8004424 <__retarget_lock_release_recursive>
 800420e:	bf00      	nop
 8004210:	20000298 	.word	0x20000298

08004214 <__sinit_lock_acquire>:
 8004214:	4801      	ldr	r0, [pc, #4]	; (800421c <__sinit_lock_acquire+0x8>)
 8004216:	f000 b904 	b.w	8004422 <__retarget_lock_acquire_recursive>
 800421a:	bf00      	nop
 800421c:	20000293 	.word	0x20000293

08004220 <__sinit_lock_release>:
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <__sinit_lock_release+0x8>)
 8004222:	f000 b8ff 	b.w	8004424 <__retarget_lock_release_recursive>
 8004226:	bf00      	nop
 8004228:	20000293 	.word	0x20000293

0800422c <__sinit>:
 800422c:	b510      	push	{r4, lr}
 800422e:	4604      	mov	r4, r0
 8004230:	f7ff fff0 	bl	8004214 <__sinit_lock_acquire>
 8004234:	69a3      	ldr	r3, [r4, #24]
 8004236:	b11b      	cbz	r3, 8004240 <__sinit+0x14>
 8004238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800423c:	f7ff bff0 	b.w	8004220 <__sinit_lock_release>
 8004240:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004244:	6523      	str	r3, [r4, #80]	; 0x50
 8004246:	4b13      	ldr	r3, [pc, #76]	; (8004294 <__sinit+0x68>)
 8004248:	4a13      	ldr	r2, [pc, #76]	; (8004298 <__sinit+0x6c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	62a2      	str	r2, [r4, #40]	; 0x28
 800424e:	42a3      	cmp	r3, r4
 8004250:	bf04      	itt	eq
 8004252:	2301      	moveq	r3, #1
 8004254:	61a3      	streq	r3, [r4, #24]
 8004256:	4620      	mov	r0, r4
 8004258:	f000 f820 	bl	800429c <__sfp>
 800425c:	6060      	str	r0, [r4, #4]
 800425e:	4620      	mov	r0, r4
 8004260:	f000 f81c 	bl	800429c <__sfp>
 8004264:	60a0      	str	r0, [r4, #8]
 8004266:	4620      	mov	r0, r4
 8004268:	f000 f818 	bl	800429c <__sfp>
 800426c:	2200      	movs	r2, #0
 800426e:	60e0      	str	r0, [r4, #12]
 8004270:	2104      	movs	r1, #4
 8004272:	6860      	ldr	r0, [r4, #4]
 8004274:	f7ff ff82 	bl	800417c <std>
 8004278:	68a0      	ldr	r0, [r4, #8]
 800427a:	2201      	movs	r2, #1
 800427c:	2109      	movs	r1, #9
 800427e:	f7ff ff7d 	bl	800417c <std>
 8004282:	68e0      	ldr	r0, [r4, #12]
 8004284:	2202      	movs	r2, #2
 8004286:	2112      	movs	r1, #18
 8004288:	f7ff ff78 	bl	800417c <std>
 800428c:	2301      	movs	r3, #1
 800428e:	61a3      	str	r3, [r4, #24]
 8004290:	e7d2      	b.n	8004238 <__sinit+0xc>
 8004292:	bf00      	nop
 8004294:	0800505c 	.word	0x0800505c
 8004298:	080041c5 	.word	0x080041c5

0800429c <__sfp>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	4607      	mov	r7, r0
 80042a0:	f7ff ffac 	bl	80041fc <__sfp_lock_acquire>
 80042a4:	4b1e      	ldr	r3, [pc, #120]	; (8004320 <__sfp+0x84>)
 80042a6:	681e      	ldr	r6, [r3, #0]
 80042a8:	69b3      	ldr	r3, [r6, #24]
 80042aa:	b913      	cbnz	r3, 80042b2 <__sfp+0x16>
 80042ac:	4630      	mov	r0, r6
 80042ae:	f7ff ffbd 	bl	800422c <__sinit>
 80042b2:	3648      	adds	r6, #72	; 0x48
 80042b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	d503      	bpl.n	80042c4 <__sfp+0x28>
 80042bc:	6833      	ldr	r3, [r6, #0]
 80042be:	b30b      	cbz	r3, 8004304 <__sfp+0x68>
 80042c0:	6836      	ldr	r6, [r6, #0]
 80042c2:	e7f7      	b.n	80042b4 <__sfp+0x18>
 80042c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042c8:	b9d5      	cbnz	r5, 8004300 <__sfp+0x64>
 80042ca:	4b16      	ldr	r3, [pc, #88]	; (8004324 <__sfp+0x88>)
 80042cc:	60e3      	str	r3, [r4, #12]
 80042ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042d2:	6665      	str	r5, [r4, #100]	; 0x64
 80042d4:	f000 f8a4 	bl	8004420 <__retarget_lock_init_recursive>
 80042d8:	f7ff ff96 	bl	8004208 <__sfp_lock_release>
 80042dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042e4:	6025      	str	r5, [r4, #0]
 80042e6:	61a5      	str	r5, [r4, #24]
 80042e8:	2208      	movs	r2, #8
 80042ea:	4629      	mov	r1, r5
 80042ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042f0:	f7ff fd1a 	bl	8003d28 <memset>
 80042f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042fc:	4620      	mov	r0, r4
 80042fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004300:	3468      	adds	r4, #104	; 0x68
 8004302:	e7d9      	b.n	80042b8 <__sfp+0x1c>
 8004304:	2104      	movs	r1, #4
 8004306:	4638      	mov	r0, r7
 8004308:	f7ff ff62 	bl	80041d0 <__sfmoreglue>
 800430c:	4604      	mov	r4, r0
 800430e:	6030      	str	r0, [r6, #0]
 8004310:	2800      	cmp	r0, #0
 8004312:	d1d5      	bne.n	80042c0 <__sfp+0x24>
 8004314:	f7ff ff78 	bl	8004208 <__sfp_lock_release>
 8004318:	230c      	movs	r3, #12
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	e7ee      	b.n	80042fc <__sfp+0x60>
 800431e:	bf00      	nop
 8004320:	0800505c 	.word	0x0800505c
 8004324:	ffff0001 	.word	0xffff0001

08004328 <_fwalk>:
 8004328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800432c:	460f      	mov	r7, r1
 800432e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004332:	2600      	movs	r6, #0
 8004334:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8004338:	f1b8 0801 	subs.w	r8, r8, #1
 800433c:	d505      	bpl.n	800434a <_fwalk+0x22>
 800433e:	6824      	ldr	r4, [r4, #0]
 8004340:	2c00      	cmp	r4, #0
 8004342:	d1f7      	bne.n	8004334 <_fwalk+0xc>
 8004344:	4630      	mov	r0, r6
 8004346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800434a:	89ab      	ldrh	r3, [r5, #12]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d906      	bls.n	800435e <_fwalk+0x36>
 8004350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004354:	3301      	adds	r3, #1
 8004356:	d002      	beq.n	800435e <_fwalk+0x36>
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	4306      	orrs	r6, r0
 800435e:	3568      	adds	r5, #104	; 0x68
 8004360:	e7ea      	b.n	8004338 <_fwalk+0x10>

08004362 <_fwalk_reent>:
 8004362:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004366:	4606      	mov	r6, r0
 8004368:	4688      	mov	r8, r1
 800436a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800436e:	2700      	movs	r7, #0
 8004370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004374:	f1b9 0901 	subs.w	r9, r9, #1
 8004378:	d505      	bpl.n	8004386 <_fwalk_reent+0x24>
 800437a:	6824      	ldr	r4, [r4, #0]
 800437c:	2c00      	cmp	r4, #0
 800437e:	d1f7      	bne.n	8004370 <_fwalk_reent+0xe>
 8004380:	4638      	mov	r0, r7
 8004382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004386:	89ab      	ldrh	r3, [r5, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d907      	bls.n	800439c <_fwalk_reent+0x3a>
 800438c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004390:	3301      	adds	r3, #1
 8004392:	d003      	beq.n	800439c <_fwalk_reent+0x3a>
 8004394:	4629      	mov	r1, r5
 8004396:	4630      	mov	r0, r6
 8004398:	47c0      	blx	r8
 800439a:	4307      	orrs	r7, r0
 800439c:	3568      	adds	r5, #104	; 0x68
 800439e:	e7e9      	b.n	8004374 <_fwalk_reent+0x12>

080043a0 <_getc_r>:
 80043a0:	b538      	push	{r3, r4, r5, lr}
 80043a2:	460c      	mov	r4, r1
 80043a4:	4605      	mov	r5, r0
 80043a6:	b118      	cbz	r0, 80043b0 <_getc_r+0x10>
 80043a8:	6983      	ldr	r3, [r0, #24]
 80043aa:	b90b      	cbnz	r3, 80043b0 <_getc_r+0x10>
 80043ac:	f7ff ff3e 	bl	800422c <__sinit>
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <_getc_r+0x74>)
 80043b2:	429c      	cmp	r4, r3
 80043b4:	d11e      	bne.n	80043f4 <_getc_r+0x54>
 80043b6:	686c      	ldr	r4, [r5, #4]
 80043b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ba:	07d8      	lsls	r0, r3, #31
 80043bc:	d405      	bmi.n	80043ca <_getc_r+0x2a>
 80043be:	89a3      	ldrh	r3, [r4, #12]
 80043c0:	0599      	lsls	r1, r3, #22
 80043c2:	d402      	bmi.n	80043ca <_getc_r+0x2a>
 80043c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043c6:	f000 f82c 	bl	8004422 <__retarget_lock_acquire_recursive>
 80043ca:	6863      	ldr	r3, [r4, #4]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	6063      	str	r3, [r4, #4]
 80043d2:	da19      	bge.n	8004408 <_getc_r+0x68>
 80043d4:	4628      	mov	r0, r5
 80043d6:	4621      	mov	r1, r4
 80043d8:	f000 fc22 	bl	8004c20 <__srget_r>
 80043dc:	4605      	mov	r5, r0
 80043de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e0:	07da      	lsls	r2, r3, #31
 80043e2:	d405      	bmi.n	80043f0 <_getc_r+0x50>
 80043e4:	89a3      	ldrh	r3, [r4, #12]
 80043e6:	059b      	lsls	r3, r3, #22
 80043e8:	d402      	bmi.n	80043f0 <_getc_r+0x50>
 80043ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ec:	f000 f81a 	bl	8004424 <__retarget_lock_release_recursive>
 80043f0:	4628      	mov	r0, r5
 80043f2:	bd38      	pop	{r3, r4, r5, pc}
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <_getc_r+0x78>)
 80043f6:	429c      	cmp	r4, r3
 80043f8:	d101      	bne.n	80043fe <_getc_r+0x5e>
 80043fa:	68ac      	ldr	r4, [r5, #8]
 80043fc:	e7dc      	b.n	80043b8 <_getc_r+0x18>
 80043fe:	4b07      	ldr	r3, [pc, #28]	; (800441c <_getc_r+0x7c>)
 8004400:	429c      	cmp	r4, r3
 8004402:	bf08      	it	eq
 8004404:	68ec      	ldreq	r4, [r5, #12]
 8004406:	e7d7      	b.n	80043b8 <_getc_r+0x18>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	6022      	str	r2, [r4, #0]
 800440e:	781d      	ldrb	r5, [r3, #0]
 8004410:	e7e5      	b.n	80043de <_getc_r+0x3e>
 8004412:	bf00      	nop
 8004414:	08005080 	.word	0x08005080
 8004418:	080050a0 	.word	0x080050a0
 800441c:	08005060 	.word	0x08005060

08004420 <__retarget_lock_init_recursive>:
 8004420:	4770      	bx	lr

08004422 <__retarget_lock_acquire_recursive>:
 8004422:	4770      	bx	lr

08004424 <__retarget_lock_release_recursive>:
 8004424:	4770      	bx	lr

08004426 <__swhatbuf_r>:
 8004426:	b570      	push	{r4, r5, r6, lr}
 8004428:	460e      	mov	r6, r1
 800442a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442e:	2900      	cmp	r1, #0
 8004430:	b096      	sub	sp, #88	; 0x58
 8004432:	4614      	mov	r4, r2
 8004434:	461d      	mov	r5, r3
 8004436:	da07      	bge.n	8004448 <__swhatbuf_r+0x22>
 8004438:	2300      	movs	r3, #0
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	89b3      	ldrh	r3, [r6, #12]
 800443e:	061a      	lsls	r2, r3, #24
 8004440:	d410      	bmi.n	8004464 <__swhatbuf_r+0x3e>
 8004442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004446:	e00e      	b.n	8004466 <__swhatbuf_r+0x40>
 8004448:	466a      	mov	r2, sp
 800444a:	f000 fc8b 	bl	8004d64 <_fstat_r>
 800444e:	2800      	cmp	r0, #0
 8004450:	dbf2      	blt.n	8004438 <__swhatbuf_r+0x12>
 8004452:	9a01      	ldr	r2, [sp, #4]
 8004454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800445c:	425a      	negs	r2, r3
 800445e:	415a      	adcs	r2, r3
 8004460:	602a      	str	r2, [r5, #0]
 8004462:	e7ee      	b.n	8004442 <__swhatbuf_r+0x1c>
 8004464:	2340      	movs	r3, #64	; 0x40
 8004466:	2000      	movs	r0, #0
 8004468:	6023      	str	r3, [r4, #0]
 800446a:	b016      	add	sp, #88	; 0x58
 800446c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004470 <__smakebuf_r>:
 8004470:	898b      	ldrh	r3, [r1, #12]
 8004472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004474:	079d      	lsls	r5, r3, #30
 8004476:	4606      	mov	r6, r0
 8004478:	460c      	mov	r4, r1
 800447a:	d507      	bpl.n	800448c <__smakebuf_r+0x1c>
 800447c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	2301      	movs	r3, #1
 8004486:	6163      	str	r3, [r4, #20]
 8004488:	b002      	add	sp, #8
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	ab01      	add	r3, sp, #4
 800448e:	466a      	mov	r2, sp
 8004490:	f7ff ffc9 	bl	8004426 <__swhatbuf_r>
 8004494:	9900      	ldr	r1, [sp, #0]
 8004496:	4605      	mov	r5, r0
 8004498:	4630      	mov	r0, r6
 800449a:	f000 f879 	bl	8004590 <_malloc_r>
 800449e:	b948      	cbnz	r0, 80044b4 <__smakebuf_r+0x44>
 80044a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a4:	059a      	lsls	r2, r3, #22
 80044a6:	d4ef      	bmi.n	8004488 <__smakebuf_r+0x18>
 80044a8:	f023 0303 	bic.w	r3, r3, #3
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	81a3      	strh	r3, [r4, #12]
 80044b2:	e7e3      	b.n	800447c <__smakebuf_r+0xc>
 80044b4:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <__smakebuf_r+0x7c>)
 80044b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	6020      	str	r0, [r4, #0]
 80044bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c0:	81a3      	strh	r3, [r4, #12]
 80044c2:	9b00      	ldr	r3, [sp, #0]
 80044c4:	6163      	str	r3, [r4, #20]
 80044c6:	9b01      	ldr	r3, [sp, #4]
 80044c8:	6120      	str	r0, [r4, #16]
 80044ca:	b15b      	cbz	r3, 80044e4 <__smakebuf_r+0x74>
 80044cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044d0:	4630      	mov	r0, r6
 80044d2:	f000 fc59 	bl	8004d88 <_isatty_r>
 80044d6:	b128      	cbz	r0, 80044e4 <__smakebuf_r+0x74>
 80044d8:	89a3      	ldrh	r3, [r4, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	f043 0301 	orr.w	r3, r3, #1
 80044e2:	81a3      	strh	r3, [r4, #12]
 80044e4:	89a0      	ldrh	r0, [r4, #12]
 80044e6:	4305      	orrs	r5, r0
 80044e8:	81a5      	strh	r5, [r4, #12]
 80044ea:	e7cd      	b.n	8004488 <__smakebuf_r+0x18>
 80044ec:	080041c5 	.word	0x080041c5

080044f0 <_free_r>:
 80044f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044f2:	2900      	cmp	r1, #0
 80044f4:	d048      	beq.n	8004588 <_free_r+0x98>
 80044f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044fa:	9001      	str	r0, [sp, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004502:	bfb8      	it	lt
 8004504:	18e4      	addlt	r4, r4, r3
 8004506:	f000 fc61 	bl	8004dcc <__malloc_lock>
 800450a:	4a20      	ldr	r2, [pc, #128]	; (800458c <_free_r+0x9c>)
 800450c:	9801      	ldr	r0, [sp, #4]
 800450e:	6813      	ldr	r3, [r2, #0]
 8004510:	4615      	mov	r5, r2
 8004512:	b933      	cbnz	r3, 8004522 <_free_r+0x32>
 8004514:	6063      	str	r3, [r4, #4]
 8004516:	6014      	str	r4, [r2, #0]
 8004518:	b003      	add	sp, #12
 800451a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800451e:	f000 bc5b 	b.w	8004dd8 <__malloc_unlock>
 8004522:	42a3      	cmp	r3, r4
 8004524:	d90b      	bls.n	800453e <_free_r+0x4e>
 8004526:	6821      	ldr	r1, [r4, #0]
 8004528:	1862      	adds	r2, r4, r1
 800452a:	4293      	cmp	r3, r2
 800452c:	bf04      	itt	eq
 800452e:	681a      	ldreq	r2, [r3, #0]
 8004530:	685b      	ldreq	r3, [r3, #4]
 8004532:	6063      	str	r3, [r4, #4]
 8004534:	bf04      	itt	eq
 8004536:	1852      	addeq	r2, r2, r1
 8004538:	6022      	streq	r2, [r4, #0]
 800453a:	602c      	str	r4, [r5, #0]
 800453c:	e7ec      	b.n	8004518 <_free_r+0x28>
 800453e:	461a      	mov	r2, r3
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	b10b      	cbz	r3, 8004548 <_free_r+0x58>
 8004544:	42a3      	cmp	r3, r4
 8004546:	d9fa      	bls.n	800453e <_free_r+0x4e>
 8004548:	6811      	ldr	r1, [r2, #0]
 800454a:	1855      	adds	r5, r2, r1
 800454c:	42a5      	cmp	r5, r4
 800454e:	d10b      	bne.n	8004568 <_free_r+0x78>
 8004550:	6824      	ldr	r4, [r4, #0]
 8004552:	4421      	add	r1, r4
 8004554:	1854      	adds	r4, r2, r1
 8004556:	42a3      	cmp	r3, r4
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	d1dd      	bne.n	8004518 <_free_r+0x28>
 800455c:	681c      	ldr	r4, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	6053      	str	r3, [r2, #4]
 8004562:	4421      	add	r1, r4
 8004564:	6011      	str	r1, [r2, #0]
 8004566:	e7d7      	b.n	8004518 <_free_r+0x28>
 8004568:	d902      	bls.n	8004570 <_free_r+0x80>
 800456a:	230c      	movs	r3, #12
 800456c:	6003      	str	r3, [r0, #0]
 800456e:	e7d3      	b.n	8004518 <_free_r+0x28>
 8004570:	6825      	ldr	r5, [r4, #0]
 8004572:	1961      	adds	r1, r4, r5
 8004574:	428b      	cmp	r3, r1
 8004576:	bf04      	itt	eq
 8004578:	6819      	ldreq	r1, [r3, #0]
 800457a:	685b      	ldreq	r3, [r3, #4]
 800457c:	6063      	str	r3, [r4, #4]
 800457e:	bf04      	itt	eq
 8004580:	1949      	addeq	r1, r1, r5
 8004582:	6021      	streq	r1, [r4, #0]
 8004584:	6054      	str	r4, [r2, #4]
 8004586:	e7c7      	b.n	8004518 <_free_r+0x28>
 8004588:	b003      	add	sp, #12
 800458a:	bd30      	pop	{r4, r5, pc}
 800458c:	20000158 	.word	0x20000158

08004590 <_malloc_r>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	1ccd      	adds	r5, r1, #3
 8004594:	f025 0503 	bic.w	r5, r5, #3
 8004598:	3508      	adds	r5, #8
 800459a:	2d0c      	cmp	r5, #12
 800459c:	bf38      	it	cc
 800459e:	250c      	movcc	r5, #12
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	4606      	mov	r6, r0
 80045a4:	db01      	blt.n	80045aa <_malloc_r+0x1a>
 80045a6:	42a9      	cmp	r1, r5
 80045a8:	d903      	bls.n	80045b2 <_malloc_r+0x22>
 80045aa:	230c      	movs	r3, #12
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	2000      	movs	r0, #0
 80045b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b2:	f000 fc0b 	bl	8004dcc <__malloc_lock>
 80045b6:	4921      	ldr	r1, [pc, #132]	; (800463c <_malloc_r+0xac>)
 80045b8:	680a      	ldr	r2, [r1, #0]
 80045ba:	4614      	mov	r4, r2
 80045bc:	b99c      	cbnz	r4, 80045e6 <_malloc_r+0x56>
 80045be:	4f20      	ldr	r7, [pc, #128]	; (8004640 <_malloc_r+0xb0>)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	b923      	cbnz	r3, 80045ce <_malloc_r+0x3e>
 80045c4:	4621      	mov	r1, r4
 80045c6:	4630      	mov	r0, r6
 80045c8:	f000 fb56 	bl	8004c78 <_sbrk_r>
 80045cc:	6038      	str	r0, [r7, #0]
 80045ce:	4629      	mov	r1, r5
 80045d0:	4630      	mov	r0, r6
 80045d2:	f000 fb51 	bl	8004c78 <_sbrk_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d123      	bne.n	8004622 <_malloc_r+0x92>
 80045da:	230c      	movs	r3, #12
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	4630      	mov	r0, r6
 80045e0:	f000 fbfa 	bl	8004dd8 <__malloc_unlock>
 80045e4:	e7e3      	b.n	80045ae <_malloc_r+0x1e>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	1b5b      	subs	r3, r3, r5
 80045ea:	d417      	bmi.n	800461c <_malloc_r+0x8c>
 80045ec:	2b0b      	cmp	r3, #11
 80045ee:	d903      	bls.n	80045f8 <_malloc_r+0x68>
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	441c      	add	r4, r3
 80045f4:	6025      	str	r5, [r4, #0]
 80045f6:	e004      	b.n	8004602 <_malloc_r+0x72>
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	42a2      	cmp	r2, r4
 80045fc:	bf0c      	ite	eq
 80045fe:	600b      	streq	r3, [r1, #0]
 8004600:	6053      	strne	r3, [r2, #4]
 8004602:	4630      	mov	r0, r6
 8004604:	f000 fbe8 	bl	8004dd8 <__malloc_unlock>
 8004608:	f104 000b 	add.w	r0, r4, #11
 800460c:	1d23      	adds	r3, r4, #4
 800460e:	f020 0007 	bic.w	r0, r0, #7
 8004612:	1ac2      	subs	r2, r0, r3
 8004614:	d0cc      	beq.n	80045b0 <_malloc_r+0x20>
 8004616:	1a1b      	subs	r3, r3, r0
 8004618:	50a3      	str	r3, [r4, r2]
 800461a:	e7c9      	b.n	80045b0 <_malloc_r+0x20>
 800461c:	4622      	mov	r2, r4
 800461e:	6864      	ldr	r4, [r4, #4]
 8004620:	e7cc      	b.n	80045bc <_malloc_r+0x2c>
 8004622:	1cc4      	adds	r4, r0, #3
 8004624:	f024 0403 	bic.w	r4, r4, #3
 8004628:	42a0      	cmp	r0, r4
 800462a:	d0e3      	beq.n	80045f4 <_malloc_r+0x64>
 800462c:	1a21      	subs	r1, r4, r0
 800462e:	4630      	mov	r0, r6
 8004630:	f000 fb22 	bl	8004c78 <_sbrk_r>
 8004634:	3001      	adds	r0, #1
 8004636:	d1dd      	bne.n	80045f4 <_malloc_r+0x64>
 8004638:	e7cf      	b.n	80045da <_malloc_r+0x4a>
 800463a:	bf00      	nop
 800463c:	20000158 	.word	0x20000158
 8004640:	2000015c 	.word	0x2000015c

08004644 <__sfputc_r>:
 8004644:	6893      	ldr	r3, [r2, #8]
 8004646:	3b01      	subs	r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	b410      	push	{r4}
 800464c:	6093      	str	r3, [r2, #8]
 800464e:	da08      	bge.n	8004662 <__sfputc_r+0x1e>
 8004650:	6994      	ldr	r4, [r2, #24]
 8004652:	42a3      	cmp	r3, r4
 8004654:	db01      	blt.n	800465a <__sfputc_r+0x16>
 8004656:	290a      	cmp	r1, #10
 8004658:	d103      	bne.n	8004662 <__sfputc_r+0x1e>
 800465a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800465e:	f7ff bbf9 	b.w	8003e54 <__swbuf_r>
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	1c58      	adds	r0, r3, #1
 8004666:	6010      	str	r0, [r2, #0]
 8004668:	7019      	strb	r1, [r3, #0]
 800466a:	4608      	mov	r0, r1
 800466c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004670:	4770      	bx	lr

08004672 <__sfputs_r>:
 8004672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004674:	4606      	mov	r6, r0
 8004676:	460f      	mov	r7, r1
 8004678:	4614      	mov	r4, r2
 800467a:	18d5      	adds	r5, r2, r3
 800467c:	42ac      	cmp	r4, r5
 800467e:	d101      	bne.n	8004684 <__sfputs_r+0x12>
 8004680:	2000      	movs	r0, #0
 8004682:	e007      	b.n	8004694 <__sfputs_r+0x22>
 8004684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004688:	463a      	mov	r2, r7
 800468a:	4630      	mov	r0, r6
 800468c:	f7ff ffda 	bl	8004644 <__sfputc_r>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d1f3      	bne.n	800467c <__sfputs_r+0xa>
 8004694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004698 <_vfiprintf_r>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	460d      	mov	r5, r1
 800469e:	b09d      	sub	sp, #116	; 0x74
 80046a0:	4614      	mov	r4, r2
 80046a2:	4698      	mov	r8, r3
 80046a4:	4606      	mov	r6, r0
 80046a6:	b118      	cbz	r0, 80046b0 <_vfiprintf_r+0x18>
 80046a8:	6983      	ldr	r3, [r0, #24]
 80046aa:	b90b      	cbnz	r3, 80046b0 <_vfiprintf_r+0x18>
 80046ac:	f7ff fdbe 	bl	800422c <__sinit>
 80046b0:	4b89      	ldr	r3, [pc, #548]	; (80048d8 <_vfiprintf_r+0x240>)
 80046b2:	429d      	cmp	r5, r3
 80046b4:	d11b      	bne.n	80046ee <_vfiprintf_r+0x56>
 80046b6:	6875      	ldr	r5, [r6, #4]
 80046b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046ba:	07d9      	lsls	r1, r3, #31
 80046bc:	d405      	bmi.n	80046ca <_vfiprintf_r+0x32>
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	059a      	lsls	r2, r3, #22
 80046c2:	d402      	bmi.n	80046ca <_vfiprintf_r+0x32>
 80046c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046c6:	f7ff feac 	bl	8004422 <__retarget_lock_acquire_recursive>
 80046ca:	89ab      	ldrh	r3, [r5, #12]
 80046cc:	071b      	lsls	r3, r3, #28
 80046ce:	d501      	bpl.n	80046d4 <_vfiprintf_r+0x3c>
 80046d0:	692b      	ldr	r3, [r5, #16]
 80046d2:	b9eb      	cbnz	r3, 8004710 <_vfiprintf_r+0x78>
 80046d4:	4629      	mov	r1, r5
 80046d6:	4630      	mov	r0, r6
 80046d8:	f7ff fc0e 	bl	8003ef8 <__swsetup_r>
 80046dc:	b1c0      	cbz	r0, 8004710 <_vfiprintf_r+0x78>
 80046de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046e0:	07dc      	lsls	r4, r3, #31
 80046e2:	d50e      	bpl.n	8004702 <_vfiprintf_r+0x6a>
 80046e4:	f04f 30ff 	mov.w	r0, #4294967295
 80046e8:	b01d      	add	sp, #116	; 0x74
 80046ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ee:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <_vfiprintf_r+0x244>)
 80046f0:	429d      	cmp	r5, r3
 80046f2:	d101      	bne.n	80046f8 <_vfiprintf_r+0x60>
 80046f4:	68b5      	ldr	r5, [r6, #8]
 80046f6:	e7df      	b.n	80046b8 <_vfiprintf_r+0x20>
 80046f8:	4b79      	ldr	r3, [pc, #484]	; (80048e0 <_vfiprintf_r+0x248>)
 80046fa:	429d      	cmp	r5, r3
 80046fc:	bf08      	it	eq
 80046fe:	68f5      	ldreq	r5, [r6, #12]
 8004700:	e7da      	b.n	80046b8 <_vfiprintf_r+0x20>
 8004702:	89ab      	ldrh	r3, [r5, #12]
 8004704:	0598      	lsls	r0, r3, #22
 8004706:	d4ed      	bmi.n	80046e4 <_vfiprintf_r+0x4c>
 8004708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800470a:	f7ff fe8b 	bl	8004424 <__retarget_lock_release_recursive>
 800470e:	e7e9      	b.n	80046e4 <_vfiprintf_r+0x4c>
 8004710:	2300      	movs	r3, #0
 8004712:	9309      	str	r3, [sp, #36]	; 0x24
 8004714:	2320      	movs	r3, #32
 8004716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800471a:	f8cd 800c 	str.w	r8, [sp, #12]
 800471e:	2330      	movs	r3, #48	; 0x30
 8004720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048e4 <_vfiprintf_r+0x24c>
 8004724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004728:	f04f 0901 	mov.w	r9, #1
 800472c:	4623      	mov	r3, r4
 800472e:	469a      	mov	sl, r3
 8004730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004734:	b10a      	cbz	r2, 800473a <_vfiprintf_r+0xa2>
 8004736:	2a25      	cmp	r2, #37	; 0x25
 8004738:	d1f9      	bne.n	800472e <_vfiprintf_r+0x96>
 800473a:	ebba 0b04 	subs.w	fp, sl, r4
 800473e:	d00b      	beq.n	8004758 <_vfiprintf_r+0xc0>
 8004740:	465b      	mov	r3, fp
 8004742:	4622      	mov	r2, r4
 8004744:	4629      	mov	r1, r5
 8004746:	4630      	mov	r0, r6
 8004748:	f7ff ff93 	bl	8004672 <__sfputs_r>
 800474c:	3001      	adds	r0, #1
 800474e:	f000 80aa 	beq.w	80048a6 <_vfiprintf_r+0x20e>
 8004752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004754:	445a      	add	r2, fp
 8004756:	9209      	str	r2, [sp, #36]	; 0x24
 8004758:	f89a 3000 	ldrb.w	r3, [sl]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80a2 	beq.w	80048a6 <_vfiprintf_r+0x20e>
 8004762:	2300      	movs	r3, #0
 8004764:	f04f 32ff 	mov.w	r2, #4294967295
 8004768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800476c:	f10a 0a01 	add.w	sl, sl, #1
 8004770:	9304      	str	r3, [sp, #16]
 8004772:	9307      	str	r3, [sp, #28]
 8004774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004778:	931a      	str	r3, [sp, #104]	; 0x68
 800477a:	4654      	mov	r4, sl
 800477c:	2205      	movs	r2, #5
 800477e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004782:	4858      	ldr	r0, [pc, #352]	; (80048e4 <_vfiprintf_r+0x24c>)
 8004784:	f7fb fd24 	bl	80001d0 <memchr>
 8004788:	9a04      	ldr	r2, [sp, #16]
 800478a:	b9d8      	cbnz	r0, 80047c4 <_vfiprintf_r+0x12c>
 800478c:	06d1      	lsls	r1, r2, #27
 800478e:	bf44      	itt	mi
 8004790:	2320      	movmi	r3, #32
 8004792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004796:	0713      	lsls	r3, r2, #28
 8004798:	bf44      	itt	mi
 800479a:	232b      	movmi	r3, #43	; 0x2b
 800479c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a0:	f89a 3000 	ldrb.w	r3, [sl]
 80047a4:	2b2a      	cmp	r3, #42	; 0x2a
 80047a6:	d015      	beq.n	80047d4 <_vfiprintf_r+0x13c>
 80047a8:	9a07      	ldr	r2, [sp, #28]
 80047aa:	4654      	mov	r4, sl
 80047ac:	2000      	movs	r0, #0
 80047ae:	f04f 0c0a 	mov.w	ip, #10
 80047b2:	4621      	mov	r1, r4
 80047b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047b8:	3b30      	subs	r3, #48	; 0x30
 80047ba:	2b09      	cmp	r3, #9
 80047bc:	d94e      	bls.n	800485c <_vfiprintf_r+0x1c4>
 80047be:	b1b0      	cbz	r0, 80047ee <_vfiprintf_r+0x156>
 80047c0:	9207      	str	r2, [sp, #28]
 80047c2:	e014      	b.n	80047ee <_vfiprintf_r+0x156>
 80047c4:	eba0 0308 	sub.w	r3, r0, r8
 80047c8:	fa09 f303 	lsl.w	r3, r9, r3
 80047cc:	4313      	orrs	r3, r2
 80047ce:	9304      	str	r3, [sp, #16]
 80047d0:	46a2      	mov	sl, r4
 80047d2:	e7d2      	b.n	800477a <_vfiprintf_r+0xe2>
 80047d4:	9b03      	ldr	r3, [sp, #12]
 80047d6:	1d19      	adds	r1, r3, #4
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	9103      	str	r1, [sp, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bfbb      	ittet	lt
 80047e0:	425b      	neglt	r3, r3
 80047e2:	f042 0202 	orrlt.w	r2, r2, #2
 80047e6:	9307      	strge	r3, [sp, #28]
 80047e8:	9307      	strlt	r3, [sp, #28]
 80047ea:	bfb8      	it	lt
 80047ec:	9204      	strlt	r2, [sp, #16]
 80047ee:	7823      	ldrb	r3, [r4, #0]
 80047f0:	2b2e      	cmp	r3, #46	; 0x2e
 80047f2:	d10c      	bne.n	800480e <_vfiprintf_r+0x176>
 80047f4:	7863      	ldrb	r3, [r4, #1]
 80047f6:	2b2a      	cmp	r3, #42	; 0x2a
 80047f8:	d135      	bne.n	8004866 <_vfiprintf_r+0x1ce>
 80047fa:	9b03      	ldr	r3, [sp, #12]
 80047fc:	1d1a      	adds	r2, r3, #4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	9203      	str	r2, [sp, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	bfb8      	it	lt
 8004806:	f04f 33ff 	movlt.w	r3, #4294967295
 800480a:	3402      	adds	r4, #2
 800480c:	9305      	str	r3, [sp, #20]
 800480e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048f4 <_vfiprintf_r+0x25c>
 8004812:	7821      	ldrb	r1, [r4, #0]
 8004814:	2203      	movs	r2, #3
 8004816:	4650      	mov	r0, sl
 8004818:	f7fb fcda 	bl	80001d0 <memchr>
 800481c:	b140      	cbz	r0, 8004830 <_vfiprintf_r+0x198>
 800481e:	2340      	movs	r3, #64	; 0x40
 8004820:	eba0 000a 	sub.w	r0, r0, sl
 8004824:	fa03 f000 	lsl.w	r0, r3, r0
 8004828:	9b04      	ldr	r3, [sp, #16]
 800482a:	4303      	orrs	r3, r0
 800482c:	3401      	adds	r4, #1
 800482e:	9304      	str	r3, [sp, #16]
 8004830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004834:	482c      	ldr	r0, [pc, #176]	; (80048e8 <_vfiprintf_r+0x250>)
 8004836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800483a:	2206      	movs	r2, #6
 800483c:	f7fb fcc8 	bl	80001d0 <memchr>
 8004840:	2800      	cmp	r0, #0
 8004842:	d03f      	beq.n	80048c4 <_vfiprintf_r+0x22c>
 8004844:	4b29      	ldr	r3, [pc, #164]	; (80048ec <_vfiprintf_r+0x254>)
 8004846:	bb1b      	cbnz	r3, 8004890 <_vfiprintf_r+0x1f8>
 8004848:	9b03      	ldr	r3, [sp, #12]
 800484a:	3307      	adds	r3, #7
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	3308      	adds	r3, #8
 8004852:	9303      	str	r3, [sp, #12]
 8004854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004856:	443b      	add	r3, r7
 8004858:	9309      	str	r3, [sp, #36]	; 0x24
 800485a:	e767      	b.n	800472c <_vfiprintf_r+0x94>
 800485c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004860:	460c      	mov	r4, r1
 8004862:	2001      	movs	r0, #1
 8004864:	e7a5      	b.n	80047b2 <_vfiprintf_r+0x11a>
 8004866:	2300      	movs	r3, #0
 8004868:	3401      	adds	r4, #1
 800486a:	9305      	str	r3, [sp, #20]
 800486c:	4619      	mov	r1, r3
 800486e:	f04f 0c0a 	mov.w	ip, #10
 8004872:	4620      	mov	r0, r4
 8004874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004878:	3a30      	subs	r2, #48	; 0x30
 800487a:	2a09      	cmp	r2, #9
 800487c:	d903      	bls.n	8004886 <_vfiprintf_r+0x1ee>
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0c5      	beq.n	800480e <_vfiprintf_r+0x176>
 8004882:	9105      	str	r1, [sp, #20]
 8004884:	e7c3      	b.n	800480e <_vfiprintf_r+0x176>
 8004886:	fb0c 2101 	mla	r1, ip, r1, r2
 800488a:	4604      	mov	r4, r0
 800488c:	2301      	movs	r3, #1
 800488e:	e7f0      	b.n	8004872 <_vfiprintf_r+0x1da>
 8004890:	ab03      	add	r3, sp, #12
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	462a      	mov	r2, r5
 8004896:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <_vfiprintf_r+0x258>)
 8004898:	a904      	add	r1, sp, #16
 800489a:	4630      	mov	r0, r6
 800489c:	f3af 8000 	nop.w
 80048a0:	4607      	mov	r7, r0
 80048a2:	1c78      	adds	r0, r7, #1
 80048a4:	d1d6      	bne.n	8004854 <_vfiprintf_r+0x1bc>
 80048a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048a8:	07d9      	lsls	r1, r3, #31
 80048aa:	d405      	bmi.n	80048b8 <_vfiprintf_r+0x220>
 80048ac:	89ab      	ldrh	r3, [r5, #12]
 80048ae:	059a      	lsls	r2, r3, #22
 80048b0:	d402      	bmi.n	80048b8 <_vfiprintf_r+0x220>
 80048b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048b4:	f7ff fdb6 	bl	8004424 <__retarget_lock_release_recursive>
 80048b8:	89ab      	ldrh	r3, [r5, #12]
 80048ba:	065b      	lsls	r3, r3, #25
 80048bc:	f53f af12 	bmi.w	80046e4 <_vfiprintf_r+0x4c>
 80048c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048c2:	e711      	b.n	80046e8 <_vfiprintf_r+0x50>
 80048c4:	ab03      	add	r3, sp, #12
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	462a      	mov	r2, r5
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <_vfiprintf_r+0x258>)
 80048cc:	a904      	add	r1, sp, #16
 80048ce:	4630      	mov	r0, r6
 80048d0:	f000 f880 	bl	80049d4 <_printf_i>
 80048d4:	e7e4      	b.n	80048a0 <_vfiprintf_r+0x208>
 80048d6:	bf00      	nop
 80048d8:	08005080 	.word	0x08005080
 80048dc:	080050a0 	.word	0x080050a0
 80048e0:	08005060 	.word	0x08005060
 80048e4:	080050c0 	.word	0x080050c0
 80048e8:	080050ca 	.word	0x080050ca
 80048ec:	00000000 	.word	0x00000000
 80048f0:	08004673 	.word	0x08004673
 80048f4:	080050c6 	.word	0x080050c6

080048f8 <_printf_common>:
 80048f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048fc:	4616      	mov	r6, r2
 80048fe:	4699      	mov	r9, r3
 8004900:	688a      	ldr	r2, [r1, #8]
 8004902:	690b      	ldr	r3, [r1, #16]
 8004904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004908:	4293      	cmp	r3, r2
 800490a:	bfb8      	it	lt
 800490c:	4613      	movlt	r3, r2
 800490e:	6033      	str	r3, [r6, #0]
 8004910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004914:	4607      	mov	r7, r0
 8004916:	460c      	mov	r4, r1
 8004918:	b10a      	cbz	r2, 800491e <_printf_common+0x26>
 800491a:	3301      	adds	r3, #1
 800491c:	6033      	str	r3, [r6, #0]
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	0699      	lsls	r1, r3, #26
 8004922:	bf42      	ittt	mi
 8004924:	6833      	ldrmi	r3, [r6, #0]
 8004926:	3302      	addmi	r3, #2
 8004928:	6033      	strmi	r3, [r6, #0]
 800492a:	6825      	ldr	r5, [r4, #0]
 800492c:	f015 0506 	ands.w	r5, r5, #6
 8004930:	d106      	bne.n	8004940 <_printf_common+0x48>
 8004932:	f104 0a19 	add.w	sl, r4, #25
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	6832      	ldr	r2, [r6, #0]
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	42ab      	cmp	r3, r5
 800493e:	dc26      	bgt.n	800498e <_printf_common+0x96>
 8004940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004944:	1e13      	subs	r3, r2, #0
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	bf18      	it	ne
 800494a:	2301      	movne	r3, #1
 800494c:	0692      	lsls	r2, r2, #26
 800494e:	d42b      	bmi.n	80049a8 <_printf_common+0xb0>
 8004950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004954:	4649      	mov	r1, r9
 8004956:	4638      	mov	r0, r7
 8004958:	47c0      	blx	r8
 800495a:	3001      	adds	r0, #1
 800495c:	d01e      	beq.n	800499c <_printf_common+0xa4>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	68e5      	ldr	r5, [r4, #12]
 8004962:	6832      	ldr	r2, [r6, #0]
 8004964:	f003 0306 	and.w	r3, r3, #6
 8004968:	2b04      	cmp	r3, #4
 800496a:	bf08      	it	eq
 800496c:	1aad      	subeq	r5, r5, r2
 800496e:	68a3      	ldr	r3, [r4, #8]
 8004970:	6922      	ldr	r2, [r4, #16]
 8004972:	bf0c      	ite	eq
 8004974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004978:	2500      	movne	r5, #0
 800497a:	4293      	cmp	r3, r2
 800497c:	bfc4      	itt	gt
 800497e:	1a9b      	subgt	r3, r3, r2
 8004980:	18ed      	addgt	r5, r5, r3
 8004982:	2600      	movs	r6, #0
 8004984:	341a      	adds	r4, #26
 8004986:	42b5      	cmp	r5, r6
 8004988:	d11a      	bne.n	80049c0 <_printf_common+0xc8>
 800498a:	2000      	movs	r0, #0
 800498c:	e008      	b.n	80049a0 <_printf_common+0xa8>
 800498e:	2301      	movs	r3, #1
 8004990:	4652      	mov	r2, sl
 8004992:	4649      	mov	r1, r9
 8004994:	4638      	mov	r0, r7
 8004996:	47c0      	blx	r8
 8004998:	3001      	adds	r0, #1
 800499a:	d103      	bne.n	80049a4 <_printf_common+0xac>
 800499c:	f04f 30ff 	mov.w	r0, #4294967295
 80049a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a4:	3501      	adds	r5, #1
 80049a6:	e7c6      	b.n	8004936 <_printf_common+0x3e>
 80049a8:	18e1      	adds	r1, r4, r3
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	2030      	movs	r0, #48	; 0x30
 80049ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b2:	4422      	add	r2, r4
 80049b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049bc:	3302      	adds	r3, #2
 80049be:	e7c7      	b.n	8004950 <_printf_common+0x58>
 80049c0:	2301      	movs	r3, #1
 80049c2:	4622      	mov	r2, r4
 80049c4:	4649      	mov	r1, r9
 80049c6:	4638      	mov	r0, r7
 80049c8:	47c0      	blx	r8
 80049ca:	3001      	adds	r0, #1
 80049cc:	d0e6      	beq.n	800499c <_printf_common+0xa4>
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7d9      	b.n	8004986 <_printf_common+0x8e>
	...

080049d4 <_printf_i>:
 80049d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d8:	460c      	mov	r4, r1
 80049da:	4691      	mov	r9, r2
 80049dc:	7e27      	ldrb	r7, [r4, #24]
 80049de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049e0:	2f78      	cmp	r7, #120	; 0x78
 80049e2:	4680      	mov	r8, r0
 80049e4:	469a      	mov	sl, r3
 80049e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049ea:	d807      	bhi.n	80049fc <_printf_i+0x28>
 80049ec:	2f62      	cmp	r7, #98	; 0x62
 80049ee:	d80a      	bhi.n	8004a06 <_printf_i+0x32>
 80049f0:	2f00      	cmp	r7, #0
 80049f2:	f000 80d8 	beq.w	8004ba6 <_printf_i+0x1d2>
 80049f6:	2f58      	cmp	r7, #88	; 0x58
 80049f8:	f000 80a3 	beq.w	8004b42 <_printf_i+0x16e>
 80049fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a04:	e03a      	b.n	8004a7c <_printf_i+0xa8>
 8004a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a0a:	2b15      	cmp	r3, #21
 8004a0c:	d8f6      	bhi.n	80049fc <_printf_i+0x28>
 8004a0e:	a001      	add	r0, pc, #4	; (adr r0, 8004a14 <_printf_i+0x40>)
 8004a10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a14:	08004a6d 	.word	0x08004a6d
 8004a18:	08004a81 	.word	0x08004a81
 8004a1c:	080049fd 	.word	0x080049fd
 8004a20:	080049fd 	.word	0x080049fd
 8004a24:	080049fd 	.word	0x080049fd
 8004a28:	080049fd 	.word	0x080049fd
 8004a2c:	08004a81 	.word	0x08004a81
 8004a30:	080049fd 	.word	0x080049fd
 8004a34:	080049fd 	.word	0x080049fd
 8004a38:	080049fd 	.word	0x080049fd
 8004a3c:	080049fd 	.word	0x080049fd
 8004a40:	08004b8d 	.word	0x08004b8d
 8004a44:	08004ab1 	.word	0x08004ab1
 8004a48:	08004b6f 	.word	0x08004b6f
 8004a4c:	080049fd 	.word	0x080049fd
 8004a50:	080049fd 	.word	0x080049fd
 8004a54:	08004baf 	.word	0x08004baf
 8004a58:	080049fd 	.word	0x080049fd
 8004a5c:	08004ab1 	.word	0x08004ab1
 8004a60:	080049fd 	.word	0x080049fd
 8004a64:	080049fd 	.word	0x080049fd
 8004a68:	08004b77 	.word	0x08004b77
 8004a6c:	680b      	ldr	r3, [r1, #0]
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	600a      	str	r2, [r1, #0]
 8004a74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0a3      	b.n	8004bc8 <_printf_i+0x1f4>
 8004a80:	6825      	ldr	r5, [r4, #0]
 8004a82:	6808      	ldr	r0, [r1, #0]
 8004a84:	062e      	lsls	r6, r5, #24
 8004a86:	f100 0304 	add.w	r3, r0, #4
 8004a8a:	d50a      	bpl.n	8004aa2 <_printf_i+0xce>
 8004a8c:	6805      	ldr	r5, [r0, #0]
 8004a8e:	600b      	str	r3, [r1, #0]
 8004a90:	2d00      	cmp	r5, #0
 8004a92:	da03      	bge.n	8004a9c <_printf_i+0xc8>
 8004a94:	232d      	movs	r3, #45	; 0x2d
 8004a96:	426d      	negs	r5, r5
 8004a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a9c:	485e      	ldr	r0, [pc, #376]	; (8004c18 <_printf_i+0x244>)
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	e019      	b.n	8004ad6 <_printf_i+0x102>
 8004aa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004aa6:	6805      	ldr	r5, [r0, #0]
 8004aa8:	600b      	str	r3, [r1, #0]
 8004aaa:	bf18      	it	ne
 8004aac:	b22d      	sxthne	r5, r5
 8004aae:	e7ef      	b.n	8004a90 <_printf_i+0xbc>
 8004ab0:	680b      	ldr	r3, [r1, #0]
 8004ab2:	6825      	ldr	r5, [r4, #0]
 8004ab4:	1d18      	adds	r0, r3, #4
 8004ab6:	6008      	str	r0, [r1, #0]
 8004ab8:	0628      	lsls	r0, r5, #24
 8004aba:	d501      	bpl.n	8004ac0 <_printf_i+0xec>
 8004abc:	681d      	ldr	r5, [r3, #0]
 8004abe:	e002      	b.n	8004ac6 <_printf_i+0xf2>
 8004ac0:	0669      	lsls	r1, r5, #25
 8004ac2:	d5fb      	bpl.n	8004abc <_printf_i+0xe8>
 8004ac4:	881d      	ldrh	r5, [r3, #0]
 8004ac6:	4854      	ldr	r0, [pc, #336]	; (8004c18 <_printf_i+0x244>)
 8004ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8004aca:	bf0c      	ite	eq
 8004acc:	2308      	moveq	r3, #8
 8004ace:	230a      	movne	r3, #10
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ad6:	6866      	ldr	r6, [r4, #4]
 8004ad8:	60a6      	str	r6, [r4, #8]
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	bfa2      	ittt	ge
 8004ade:	6821      	ldrge	r1, [r4, #0]
 8004ae0:	f021 0104 	bicge.w	r1, r1, #4
 8004ae4:	6021      	strge	r1, [r4, #0]
 8004ae6:	b90d      	cbnz	r5, 8004aec <_printf_i+0x118>
 8004ae8:	2e00      	cmp	r6, #0
 8004aea:	d04d      	beq.n	8004b88 <_printf_i+0x1b4>
 8004aec:	4616      	mov	r6, r2
 8004aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8004af2:	fb03 5711 	mls	r7, r3, r1, r5
 8004af6:	5dc7      	ldrb	r7, [r0, r7]
 8004af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004afc:	462f      	mov	r7, r5
 8004afe:	42bb      	cmp	r3, r7
 8004b00:	460d      	mov	r5, r1
 8004b02:	d9f4      	bls.n	8004aee <_printf_i+0x11a>
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d10b      	bne.n	8004b20 <_printf_i+0x14c>
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	07df      	lsls	r7, r3, #31
 8004b0c:	d508      	bpl.n	8004b20 <_printf_i+0x14c>
 8004b0e:	6923      	ldr	r3, [r4, #16]
 8004b10:	6861      	ldr	r1, [r4, #4]
 8004b12:	4299      	cmp	r1, r3
 8004b14:	bfde      	ittt	le
 8004b16:	2330      	movle	r3, #48	; 0x30
 8004b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b20:	1b92      	subs	r2, r2, r6
 8004b22:	6122      	str	r2, [r4, #16]
 8004b24:	f8cd a000 	str.w	sl, [sp]
 8004b28:	464b      	mov	r3, r9
 8004b2a:	aa03      	add	r2, sp, #12
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4640      	mov	r0, r8
 8004b30:	f7ff fee2 	bl	80048f8 <_printf_common>
 8004b34:	3001      	adds	r0, #1
 8004b36:	d14c      	bne.n	8004bd2 <_printf_i+0x1fe>
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	b004      	add	sp, #16
 8004b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b42:	4835      	ldr	r0, [pc, #212]	; (8004c18 <_printf_i+0x244>)
 8004b44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b48:	6823      	ldr	r3, [r4, #0]
 8004b4a:	680e      	ldr	r6, [r1, #0]
 8004b4c:	061f      	lsls	r7, r3, #24
 8004b4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b52:	600e      	str	r6, [r1, #0]
 8004b54:	d514      	bpl.n	8004b80 <_printf_i+0x1ac>
 8004b56:	07d9      	lsls	r1, r3, #31
 8004b58:	bf44      	itt	mi
 8004b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b5e:	6023      	strmi	r3, [r4, #0]
 8004b60:	b91d      	cbnz	r5, 8004b6a <_printf_i+0x196>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	f023 0320 	bic.w	r3, r3, #32
 8004b68:	6023      	str	r3, [r4, #0]
 8004b6a:	2310      	movs	r3, #16
 8004b6c:	e7b0      	b.n	8004ad0 <_printf_i+0xfc>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	f043 0320 	orr.w	r3, r3, #32
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	2378      	movs	r3, #120	; 0x78
 8004b78:	4828      	ldr	r0, [pc, #160]	; (8004c1c <_printf_i+0x248>)
 8004b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b7e:	e7e3      	b.n	8004b48 <_printf_i+0x174>
 8004b80:	065e      	lsls	r6, r3, #25
 8004b82:	bf48      	it	mi
 8004b84:	b2ad      	uxthmi	r5, r5
 8004b86:	e7e6      	b.n	8004b56 <_printf_i+0x182>
 8004b88:	4616      	mov	r6, r2
 8004b8a:	e7bb      	b.n	8004b04 <_printf_i+0x130>
 8004b8c:	680b      	ldr	r3, [r1, #0]
 8004b8e:	6826      	ldr	r6, [r4, #0]
 8004b90:	6960      	ldr	r0, [r4, #20]
 8004b92:	1d1d      	adds	r5, r3, #4
 8004b94:	600d      	str	r5, [r1, #0]
 8004b96:	0635      	lsls	r5, r6, #24
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	d501      	bpl.n	8004ba0 <_printf_i+0x1cc>
 8004b9c:	6018      	str	r0, [r3, #0]
 8004b9e:	e002      	b.n	8004ba6 <_printf_i+0x1d2>
 8004ba0:	0671      	lsls	r1, r6, #25
 8004ba2:	d5fb      	bpl.n	8004b9c <_printf_i+0x1c8>
 8004ba4:	8018      	strh	r0, [r3, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6123      	str	r3, [r4, #16]
 8004baa:	4616      	mov	r6, r2
 8004bac:	e7ba      	b.n	8004b24 <_printf_i+0x150>
 8004bae:	680b      	ldr	r3, [r1, #0]
 8004bb0:	1d1a      	adds	r2, r3, #4
 8004bb2:	600a      	str	r2, [r1, #0]
 8004bb4:	681e      	ldr	r6, [r3, #0]
 8004bb6:	6862      	ldr	r2, [r4, #4]
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f7fb fb08 	bl	80001d0 <memchr>
 8004bc0:	b108      	cbz	r0, 8004bc6 <_printf_i+0x1f2>
 8004bc2:	1b80      	subs	r0, r0, r6
 8004bc4:	6060      	str	r0, [r4, #4]
 8004bc6:	6863      	ldr	r3, [r4, #4]
 8004bc8:	6123      	str	r3, [r4, #16]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd0:	e7a8      	b.n	8004b24 <_printf_i+0x150>
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	4632      	mov	r2, r6
 8004bd6:	4649      	mov	r1, r9
 8004bd8:	4640      	mov	r0, r8
 8004bda:	47d0      	blx	sl
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d0ab      	beq.n	8004b38 <_printf_i+0x164>
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	079b      	lsls	r3, r3, #30
 8004be4:	d413      	bmi.n	8004c0e <_printf_i+0x23a>
 8004be6:	68e0      	ldr	r0, [r4, #12]
 8004be8:	9b03      	ldr	r3, [sp, #12]
 8004bea:	4298      	cmp	r0, r3
 8004bec:	bfb8      	it	lt
 8004bee:	4618      	movlt	r0, r3
 8004bf0:	e7a4      	b.n	8004b3c <_printf_i+0x168>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4632      	mov	r2, r6
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	4640      	mov	r0, r8
 8004bfa:	47d0      	blx	sl
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d09b      	beq.n	8004b38 <_printf_i+0x164>
 8004c00:	3501      	adds	r5, #1
 8004c02:	68e3      	ldr	r3, [r4, #12]
 8004c04:	9903      	ldr	r1, [sp, #12]
 8004c06:	1a5b      	subs	r3, r3, r1
 8004c08:	42ab      	cmp	r3, r5
 8004c0a:	dcf2      	bgt.n	8004bf2 <_printf_i+0x21e>
 8004c0c:	e7eb      	b.n	8004be6 <_printf_i+0x212>
 8004c0e:	2500      	movs	r5, #0
 8004c10:	f104 0619 	add.w	r6, r4, #25
 8004c14:	e7f5      	b.n	8004c02 <_printf_i+0x22e>
 8004c16:	bf00      	nop
 8004c18:	080050d1 	.word	0x080050d1
 8004c1c:	080050e2 	.word	0x080050e2

08004c20 <__srget_r>:
 8004c20:	b538      	push	{r3, r4, r5, lr}
 8004c22:	460c      	mov	r4, r1
 8004c24:	4605      	mov	r5, r0
 8004c26:	b118      	cbz	r0, 8004c30 <__srget_r+0x10>
 8004c28:	6983      	ldr	r3, [r0, #24]
 8004c2a:	b90b      	cbnz	r3, 8004c30 <__srget_r+0x10>
 8004c2c:	f7ff fafe 	bl	800422c <__sinit>
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <__srget_r+0x4c>)
 8004c32:	429c      	cmp	r4, r3
 8004c34:	d10d      	bne.n	8004c52 <__srget_r+0x32>
 8004c36:	686c      	ldr	r4, [r5, #4]
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f000 f8ee 	bl	8004e1c <__srefill_r>
 8004c40:	b988      	cbnz	r0, 8004c66 <__srget_r+0x46>
 8004c42:	6863      	ldr	r3, [r4, #4]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	6022      	str	r2, [r4, #0]
 8004c4e:	7818      	ldrb	r0, [r3, #0]
 8004c50:	bd38      	pop	{r3, r4, r5, pc}
 8004c52:	4b07      	ldr	r3, [pc, #28]	; (8004c70 <__srget_r+0x50>)
 8004c54:	429c      	cmp	r4, r3
 8004c56:	d101      	bne.n	8004c5c <__srget_r+0x3c>
 8004c58:	68ac      	ldr	r4, [r5, #8]
 8004c5a:	e7ed      	b.n	8004c38 <__srget_r+0x18>
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <__srget_r+0x54>)
 8004c5e:	429c      	cmp	r4, r3
 8004c60:	bf08      	it	eq
 8004c62:	68ec      	ldreq	r4, [r5, #12]
 8004c64:	e7e8      	b.n	8004c38 <__srget_r+0x18>
 8004c66:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6a:	e7f1      	b.n	8004c50 <__srget_r+0x30>
 8004c6c:	08005080 	.word	0x08005080
 8004c70:	080050a0 	.word	0x080050a0
 8004c74:	08005060 	.word	0x08005060

08004c78 <_sbrk_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d06      	ldr	r5, [pc, #24]	; (8004c94 <_sbrk_r+0x1c>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f7fc f898 	bl	8000db8 <_sbrk>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_sbrk_r+0x1a>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_sbrk_r+0x1a>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	2000029c 	.word	0x2000029c

08004c98 <__sread>:
 8004c98:	b510      	push	{r4, lr}
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ca0:	f000 f8a0 	bl	8004de4 <_read_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	bfab      	itete	ge
 8004ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004caa:	89a3      	ldrhlt	r3, [r4, #12]
 8004cac:	181b      	addge	r3, r3, r0
 8004cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cb2:	bfac      	ite	ge
 8004cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cb6:	81a3      	strhlt	r3, [r4, #12]
 8004cb8:	bd10      	pop	{r4, pc}

08004cba <__swrite>:
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	461f      	mov	r7, r3
 8004cc0:	898b      	ldrh	r3, [r1, #12]
 8004cc2:	05db      	lsls	r3, r3, #23
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	460c      	mov	r4, r1
 8004cc8:	4616      	mov	r6, r2
 8004cca:	d505      	bpl.n	8004cd8 <__swrite+0x1e>
 8004ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f000 f868 	bl	8004da8 <_lseek_r>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	4632      	mov	r2, r6
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	4628      	mov	r0, r5
 8004cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cee:	f000 b817 	b.w	8004d20 <_write_r>

08004cf2 <__sseek>:
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfa:	f000 f855 	bl	8004da8 <_lseek_r>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	bf15      	itete	ne
 8004d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d0e:	81a3      	strheq	r3, [r4, #12]
 8004d10:	bf18      	it	ne
 8004d12:	81a3      	strhne	r3, [r4, #12]
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <__sclose>:
 8004d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d1a:	f000 b813 	b.w	8004d44 <_close_r>
	...

08004d20 <_write_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4d07      	ldr	r5, [pc, #28]	; (8004d40 <_write_r+0x20>)
 8004d24:	4604      	mov	r4, r0
 8004d26:	4608      	mov	r0, r1
 8004d28:	4611      	mov	r1, r2
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	602a      	str	r2, [r5, #0]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f7fb ffec 	bl	8000d0c <_write>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	d102      	bne.n	8004d3e <_write_r+0x1e>
 8004d38:	682b      	ldr	r3, [r5, #0]
 8004d3a:	b103      	cbz	r3, 8004d3e <_write_r+0x1e>
 8004d3c:	6023      	str	r3, [r4, #0]
 8004d3e:	bd38      	pop	{r3, r4, r5, pc}
 8004d40:	2000029c 	.word	0x2000029c

08004d44 <_close_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4d06      	ldr	r5, [pc, #24]	; (8004d60 <_close_r+0x1c>)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	f7fb fffe 	bl	8000d50 <_close>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_close_r+0x1a>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_close_r+0x1a>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	2000029c 	.word	0x2000029c

08004d64 <_fstat_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d07      	ldr	r5, [pc, #28]	; (8004d84 <_fstat_r+0x20>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	602b      	str	r3, [r5, #0]
 8004d72:	f7fb fff9 	bl	8000d68 <_fstat>
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	d102      	bne.n	8004d80 <_fstat_r+0x1c>
 8004d7a:	682b      	ldr	r3, [r5, #0]
 8004d7c:	b103      	cbz	r3, 8004d80 <_fstat_r+0x1c>
 8004d7e:	6023      	str	r3, [r4, #0]
 8004d80:	bd38      	pop	{r3, r4, r5, pc}
 8004d82:	bf00      	nop
 8004d84:	2000029c 	.word	0x2000029c

08004d88 <_isatty_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d06      	ldr	r5, [pc, #24]	; (8004da4 <_isatty_r+0x1c>)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4604      	mov	r4, r0
 8004d90:	4608      	mov	r0, r1
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	f7fb fff8 	bl	8000d88 <_isatty>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_isatty_r+0x1a>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_isatty_r+0x1a>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	2000029c 	.word	0x2000029c

08004da8 <_lseek_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	4d07      	ldr	r5, [pc, #28]	; (8004dc8 <_lseek_r+0x20>)
 8004dac:	4604      	mov	r4, r0
 8004dae:	4608      	mov	r0, r1
 8004db0:	4611      	mov	r1, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	602a      	str	r2, [r5, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	f7fb fff1 	bl	8000d9e <_lseek>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_lseek_r+0x1e>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_lseek_r+0x1e>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	2000029c 	.word	0x2000029c

08004dcc <__malloc_lock>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__malloc_lock+0x8>)
 8004dce:	f7ff bb28 	b.w	8004422 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20000294 	.word	0x20000294

08004dd8 <__malloc_unlock>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__malloc_unlock+0x8>)
 8004dda:	f7ff bb23 	b.w	8004424 <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	20000294 	.word	0x20000294

08004de4 <_read_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d07      	ldr	r5, [pc, #28]	; (8004e04 <_read_r+0x20>)
 8004de8:	4604      	mov	r4, r0
 8004dea:	4608      	mov	r0, r1
 8004dec:	4611      	mov	r1, r2
 8004dee:	2200      	movs	r2, #0
 8004df0:	602a      	str	r2, [r5, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f7fb ff6c 	bl	8000cd0 <_read>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	d102      	bne.n	8004e02 <_read_r+0x1e>
 8004dfc:	682b      	ldr	r3, [r5, #0]
 8004dfe:	b103      	cbz	r3, 8004e02 <_read_r+0x1e>
 8004e00:	6023      	str	r3, [r4, #0]
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	2000029c 	.word	0x2000029c

08004e08 <lflush>:
 8004e08:	8983      	ldrh	r3, [r0, #12]
 8004e0a:	f003 0309 	and.w	r3, r3, #9
 8004e0e:	2b09      	cmp	r3, #9
 8004e10:	d101      	bne.n	8004e16 <lflush+0xe>
 8004e12:	f7ff b9a1 	b.w	8004158 <fflush>
 8004e16:	2000      	movs	r0, #0
 8004e18:	4770      	bx	lr
	...

08004e1c <__srefill_r>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	460c      	mov	r4, r1
 8004e20:	4605      	mov	r5, r0
 8004e22:	b118      	cbz	r0, 8004e2c <__srefill_r+0x10>
 8004e24:	6983      	ldr	r3, [r0, #24]
 8004e26:	b90b      	cbnz	r3, 8004e2c <__srefill_r+0x10>
 8004e28:	f7ff fa00 	bl	800422c <__sinit>
 8004e2c:	4b3b      	ldr	r3, [pc, #236]	; (8004f1c <__srefill_r+0x100>)
 8004e2e:	429c      	cmp	r4, r3
 8004e30:	d10a      	bne.n	8004e48 <__srefill_r+0x2c>
 8004e32:	686c      	ldr	r4, [r5, #4]
 8004e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6063      	str	r3, [r4, #4]
 8004e3c:	89a3      	ldrh	r3, [r4, #12]
 8004e3e:	069e      	lsls	r6, r3, #26
 8004e40:	d50c      	bpl.n	8004e5c <__srefill_r+0x40>
 8004e42:	f04f 30ff 	mov.w	r0, #4294967295
 8004e46:	e066      	b.n	8004f16 <__srefill_r+0xfa>
 8004e48:	4b35      	ldr	r3, [pc, #212]	; (8004f20 <__srefill_r+0x104>)
 8004e4a:	429c      	cmp	r4, r3
 8004e4c:	d101      	bne.n	8004e52 <__srefill_r+0x36>
 8004e4e:	68ac      	ldr	r4, [r5, #8]
 8004e50:	e7f0      	b.n	8004e34 <__srefill_r+0x18>
 8004e52:	4b34      	ldr	r3, [pc, #208]	; (8004f24 <__srefill_r+0x108>)
 8004e54:	429c      	cmp	r4, r3
 8004e56:	bf08      	it	eq
 8004e58:	68ec      	ldreq	r4, [r5, #12]
 8004e5a:	e7eb      	b.n	8004e34 <__srefill_r+0x18>
 8004e5c:	0758      	lsls	r0, r3, #29
 8004e5e:	d448      	bmi.n	8004ef2 <__srefill_r+0xd6>
 8004e60:	06d9      	lsls	r1, r3, #27
 8004e62:	d405      	bmi.n	8004e70 <__srefill_r+0x54>
 8004e64:	2309      	movs	r3, #9
 8004e66:	602b      	str	r3, [r5, #0]
 8004e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	e7e8      	b.n	8004e42 <__srefill_r+0x26>
 8004e70:	071a      	lsls	r2, r3, #28
 8004e72:	d50b      	bpl.n	8004e8c <__srefill_r+0x70>
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	f7ff f932 	bl	80040e0 <_fflush_r>
 8004e7c:	2800      	cmp	r0, #0
 8004e7e:	d1e0      	bne.n	8004e42 <__srefill_r+0x26>
 8004e80:	89a3      	ldrh	r3, [r4, #12]
 8004e82:	60a0      	str	r0, [r4, #8]
 8004e84:	f023 0308 	bic.w	r3, r3, #8
 8004e88:	81a3      	strh	r3, [r4, #12]
 8004e8a:	61a0      	str	r0, [r4, #24]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f043 0304 	orr.w	r3, r3, #4
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	b91b      	cbnz	r3, 8004ea0 <__srefill_r+0x84>
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	f7ff fae8 	bl	8004470 <__smakebuf_r>
 8004ea0:	89a6      	ldrh	r6, [r4, #12]
 8004ea2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004ea6:	07b3      	lsls	r3, r6, #30
 8004ea8:	d00f      	beq.n	8004eca <__srefill_r+0xae>
 8004eaa:	2301      	movs	r3, #1
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <__srefill_r+0x10c>)
 8004eb0:	491e      	ldr	r1, [pc, #120]	; (8004f2c <__srefill_r+0x110>)
 8004eb2:	6818      	ldr	r0, [r3, #0]
 8004eb4:	f006 0609 	and.w	r6, r6, #9
 8004eb8:	f7ff fa36 	bl	8004328 <_fwalk>
 8004ebc:	2e09      	cmp	r6, #9
 8004ebe:	81a7      	strh	r7, [r4, #12]
 8004ec0:	d103      	bne.n	8004eca <__srefill_r+0xae>
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f7ff f885 	bl	8003fd4 <__sflush_r>
 8004eca:	6922      	ldr	r2, [r4, #16]
 8004ecc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ece:	6963      	ldr	r3, [r4, #20]
 8004ed0:	6a21      	ldr	r1, [r4, #32]
 8004ed2:	6022      	str	r2, [r4, #0]
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b0      	blx	r6
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	6060      	str	r0, [r4, #4]
 8004edc:	dc1c      	bgt.n	8004f18 <__srefill_r+0xfc>
 8004ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ee2:	bf17      	itett	ne
 8004ee4:	2200      	movne	r2, #0
 8004ee6:	f043 0320 	orreq.w	r3, r3, #32
 8004eea:	6062      	strne	r2, [r4, #4]
 8004eec:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004ef0:	e7bc      	b.n	8004e6c <__srefill_r+0x50>
 8004ef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	d0cd      	beq.n	8004e94 <__srefill_r+0x78>
 8004ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004efc:	4299      	cmp	r1, r3
 8004efe:	d002      	beq.n	8004f06 <__srefill_r+0xea>
 8004f00:	4628      	mov	r0, r5
 8004f02:	f7ff faf5 	bl	80044f0 <_free_r>
 8004f06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f08:	6063      	str	r3, [r4, #4]
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	6360      	str	r0, [r4, #52]	; 0x34
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0c0      	beq.n	8004e94 <__srefill_r+0x78>
 8004f12:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e7fc      	b.n	8004f16 <__srefill_r+0xfa>
 8004f1c:	08005080 	.word	0x08005080
 8004f20:	080050a0 	.word	0x080050a0
 8004f24:	08005060 	.word	0x08005060
 8004f28:	0800505c 	.word	0x0800505c
 8004f2c:	08004e09 	.word	0x08004e09

08004f30 <_init>:
 8004f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f32:	bf00      	nop
 8004f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f36:	bc08      	pop	{r3}
 8004f38:	469e      	mov	lr, r3
 8004f3a:	4770      	bx	lr

08004f3c <_fini>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr
